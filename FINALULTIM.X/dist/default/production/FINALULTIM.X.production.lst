

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Tue May 23 18:53:30 2023

Microchip MPLAB XC8 C Compiler v2.36 (Pro license) build 20220127204148 Og9s 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	text81,global,reloc=2,class=CODE,delta=1
    96                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    97                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    98                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    99                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   100                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   101                           	psect	pa_nodes0,global,class=CODE,delta=1
   102  0000                     
   103                           ; Version 2.36
   104                           ; Generated 28/01/2022 GMT
   105                           ; 
   106                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
   107                           ; All rights reserved.
   108                           ; 
   109                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   110                           ; 
   111                           ; Redistribution and use in source and binary forms, with or without modification, are
   112                           ; permitted provided that the following conditions are met:
   113                           ; 
   114                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   115                           ;        conditions and the following disclaimer.
   116                           ; 
   117                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   118                           ;        of conditions and the following disclaimer in the documentation and/or other
   119                           ;        materials provided with the distribution. Publication is not required when
   120                           ;        this file is used in an embedded application.
   121                           ; 
   122                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   123                           ;        software without specific prior written permission.
   124                           ; 
   125                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   126                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   127                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   128                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   129                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   130                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   131                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   132                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   133                           ; 
   134                           ; 
   135                           ; Code-generator required, PIC18F4321 Definitions
   136                           ; 
   137                           ; SFR Addresses
   138  0000                     
   139                           	psect	idataBANK0
   140  0014B0                     __pidataBANK0:
   141                           	callstack 0
   142                           
   143                           ;initializer for _key1
   144  0014B0  31                 	db	49
   145  0014B1  31                 	db	49
   146  0014B2  31                 	db	49
   147  0014B3  31                 	db	49
   148                           
   149                           ;initializer for _key0
   150  0014B4  30                 	db	48
   151  0014B5  20                 	db	32
   152  0014B6  30                 	db	48
   153  0014B7  20                 	db	32
   154                           
   155                           ;initializer for _END_MSG
   156  0014B8  62                 	db	98
   157  0014B9  79                 	db	121
   158  0014BA  65                 	db	101
   159  0014BB  20                 	db	32
   160  0014BC  62                 	db	98
   161  0014BD  79                 	db	121
   162  0014BE  65                 	db	101
   163  0014BF  20                 	db	32
   164  0014C0  20                 	db	32
   165  0014C1  20                 	db	32
   166  0014C2  20                 	db	32
   167  0014C3  21                 	db	33
   168  0014C4  00                 	db	0
   169  0014C5  00                 	db	0
   170  0014C6  00                 	db	0
   171  0014C7  00                 	db	0
   172  0014C8  00                 	db	0
   173  0014C9  00                 	db	0
   174  0014CA  00                 	db	0
   175  0014CB  00                 	db	0
   176  0014CC  00                 	db	0
   177  0014CD  00                 	db	0
   178  0014CE  00                 	db	0
   179                           
   180                           ;initializer for _EMPTY2
   181  0014CF  44                 	db	68
   182  0014D0  4F                 	db	79
   183  0014D1  20                 	db	32
   184  0014D2  41                 	db	65
   185  0014D3  20                 	db	32
   186  0014D4  52                 	db	82
   187  0014D5  45                 	db	69
   188  0014D6  43                 	db	67
   189  0014D7  4F                 	db	79
   190  0014D8  52                 	db	82
   191  0014D9  44                 	db	68
   192  0014DA  21                 	db	33
   193  0014DB  00                 	db	0
   194  0014DC  00                 	db	0
   195  0014DD  00                 	db	0
   196  0014DE  00                 	db	0
   197  0014DF  00                 	db	0
   198  0014E0  00                 	db	0
   199  0014E1  00                 	db	0
   200  0014E2  00                 	db	0
   201  0014E3  00                 	db	0
   202  0014E4  00                 	db	0
   203  0014E5  00                 	db	0
   204                           
   205                           ;initializer for _EMPTY
   206  0014E6  45                 	db	69
   207  0014E7  4D                 	db	77
   208  0014E8  50                 	db	80
   209  0014E9  54                 	db	84
   210  0014EA  59                 	db	89
   211  0014EB  20                 	db	32
   212  0014EC  52                 	db	82
   213  0014ED  45                 	db	69
   214  0014EE  43                 	db	67
   215  0014EF  4F                 	db	79
   216  0014F0  52                 	db	82
   217  0014F1  44                 	db	68
   218  0014F2  49                 	db	73
   219  0014F3  4E                 	db	78
   220  0014F4  47                 	db	71
   221  0014F5  53                 	db	83
   222  0014F6  00                 	db	0
   223  0014F7  00                 	db	0
   224  0014F8  00                 	db	0
   225  0014F9  00                 	db	0
   226  0014FA  00                 	db	0
   227  0014FB  00                 	db	0
   228  0014FC  00                 	db	0
   229                           
   230                           ;initializer for _NOTHING2
   231  0014FD  00                 	db	0
   232  0014FE  00                 	db	0
   233  0014FF  00                 	db	0
   234  001500  00                 	db	0
   235  001501  00                 	db	0
   236  001502  00                 	db	0
   237  001503  00                 	db	0
   238  001504  00                 	db	0
   239  001505  00                 	db	0
   240  001506  00                 	db	0
   241  001507  00                 	db	0
   242  001508  00                 	db	0
   243  001509  00                 	db	0
   244  00150A  00                 	db	0
   245  00150B  00                 	db	0
   246  00150C  00                 	db	0
   247  00150D  00                 	db	0
   248  00150E  00                 	db	0
   249  00150F  00                 	db	0
   250  001510  00                 	db	0
   251  001511  00                 	db	0
   252  001512  00                 	db	0
   253  001513  00                 	db	0
   254                           
   255                           	psect	mediumconst
   256  001EEC                     __pmediumconst:
   257                           	callstack 0
   258  001EEC  00                 	db	0
   259  001EED                     _key9:
   260                           	callstack 0
   261  001EED  57                 	db	87
   262  001EEE  58                 	db	88
   263  001EEF  59                 	db	89
   264  001EF0  5A                 	db	90
   265  001EF1  39                 	db	57
   266  001EF2                     __end_of_key9:
   267                           	callstack 0
   268  001EF2                     _key7:
   269                           	callstack 0
   270  001EF2  50                 	db	80
   271  001EF3  51                 	db	81
   272  001EF4  52                 	db	82
   273  001EF5  53                 	db	83
   274  001EF6  37                 	db	55
   275  001EF7                     __end_of_key7:
   276                           	callstack 0
   277  001EF7                     _key8:
   278                           	callstack 0
   279  001EF7  54                 	db	84
   280  001EF8  55                 	db	85
   281  001EF9  56                 	db	86
   282  001EFA  38                 	db	56
   283  001EFB                     __end_of_key8:
   284                           	callstack 0
   285  001EFB                     _key6:
   286                           	callstack 0
   287  001EFB  4D                 	db	77
   288  001EFC  4E                 	db	78
   289  001EFD  4F                 	db	79
   290  001EFE  36                 	db	54
   291  001EFF                     __end_of_key6:
   292                           	callstack 0
   293  001EFF                     _key5:
   294                           	callstack 0
   295  001EFF  4A                 	db	74
   296  001F00  4B                 	db	75
   297  001F01  4C                 	db	76
   298  001F02  35                 	db	53
   299  001F03                     __end_of_key5:
   300                           	callstack 0
   301  001F03                     _key4:
   302                           	callstack 0
   303  001F03  47                 	db	71
   304  001F04  48                 	db	72
   305  001F05  49                 	db	73
   306  001F06  34                 	db	52
   307  001F07                     __end_of_key4:
   308                           	callstack 0
   309  001F07                     _key3:
   310                           	callstack 0
   311  001F07  44                 	db	68
   312  001F08  45                 	db	69
   313  001F09  46                 	db	70
   314  001F0A  33                 	db	51
   315  001F0B                     __end_of_key3:
   316                           	callstack 0
   317  001F0B                     _key2:
   318                           	callstack 0
   319  001F0B  41                 	db	65
   320  001F0C  42                 	db	66
   321  001F0D  43                 	db	67
   322  001F0E  32                 	db	50
   323  001F0F                     __end_of_key2:
   324                           	callstack 0
   325  001F0F                     _SHOW_CURR_TIME:
   326                           	callstack 0
   327  001F0F  43                 	db	67
   328  001F10  55                 	db	85
   329  001F11  52                 	db	82
   330  001F12  52                 	db	82
   331  001F13  45                 	db	69
   332  001F14  4E                 	db	78
   333  001F15  54                 	db	84
   334  001F16  20                 	db	32
   335  001F17  54                 	db	84
   336  001F18  49                 	db	73
   337  001F19  4D                 	db	77
   338  001F1A  45                 	db	69
   339  001F1B  3A                 	db	58
   340  001F1C  00                 	db	0
   341  001F1D  00                 	db	0
   342  001F1E  00                 	db	0
   343  001F1F  00                 	db	0
   344  001F20  00                 	db	0
   345  001F21  00                 	db	0
   346  001F22  00                 	db	0
   347  001F23  00                 	db	0
   348  001F24  00                 	db	0
   349  001F25  00                 	db	0
   350  001F26                     __end_of_SHOW_CURR_TIME:
   351                           	callstack 0
   352  001F26                     _SHOW_MODY_TIME:
   353                           	callstack 0
   354  001F26  4D                 	db	77
   355  001F27  4F                 	db	79
   356  001F28  44                 	db	68
   357  001F29  49                 	db	73
   358  001F2A  46                 	db	70
   359  001F2B  59                 	db	89
   360  001F2C  20                 	db	32
   361  001F2D  54                 	db	84
   362  001F2E  49                 	db	73
   363  001F2F  4D                 	db	77
   364  001F30  45                 	db	69
   365  001F31  3A                 	db	58
   366  001F32  00                 	db	0
   367  001F33  00                 	db	0
   368  001F34  00                 	db	0
   369  001F35  00                 	db	0
   370  001F36  00                 	db	0
   371  001F37  00                 	db	0
   372  001F38  00                 	db	0
   373  001F39  00                 	db	0
   374  001F3A  00                 	db	0
   375  001F3B  00                 	db	0
   376  001F3C  00                 	db	0
   377  001F3D                     __end_of_SHOW_MODY_TIME:
   378                           	callstack 0
   379  001F3D                     _SHOW_RECORDING:
   380                           	callstack 0
   381  001F3D  52                 	db	82
   382  001F3E  45                 	db	69
   383  001F3F  43                 	db	67
   384  001F40  4F                 	db	79
   385  001F41  52                 	db	82
   386  001F42  44                 	db	68
   387  001F43  49                 	db	73
   388  001F44  4E                 	db	78
   389  001F45  47                 	db	71
   390  001F46  2E                 	db	46
   391  001F47  2E                 	db	46
   392  001F48  2E                 	db	46
   393  001F49  00                 	db	0
   394  001F4A  00                 	db	0
   395  001F4B  00                 	db	0
   396  001F4C  00                 	db	0
   397  001F4D  00                 	db	0
   398  001F4E  00                 	db	0
   399  001F4F  00                 	db	0
   400  001F50  00                 	db	0
   401  001F51  00                 	db	0
   402  001F52  00                 	db	0
   403  001F53  00                 	db	0
   404  001F54                     __end_of_SHOW_RECORDING:
   405                           	callstack 0
   406  001F54                     _NOTHING:
   407                           	callstack 0
   408  001F54  20                 	db	32
   409  001F55  20                 	db	32
   410  001F56  20                 	db	32
   411  001F57  20                 	db	32
   412  001F58  20                 	db	32
   413  001F59  20                 	db	32
   414  001F5A  20                 	db	32
   415  001F5B  20                 	db	32
   416  001F5C  20                 	db	32
   417  001F5D  20                 	db	32
   418  001F5E  20                 	db	32
   419  001F5F  20                 	db	32
   420  001F60  20                 	db	32
   421  001F61  20                 	db	32
   422  001F62  20                 	db	32
   423  001F63  20                 	db	32
   424  001F64  20                 	db	32
   425  001F65  20                 	db	32
   426  001F66  20                 	db	32
   427  001F67  20                 	db	32
   428  001F68  20                 	db	32
   429  001F69  20                 	db	32
   430  001F6A  00                 	db	0
   431  001F6B                     __end_of_NOTHING:
   432                           	callstack 0
   433  001F6B                     _MENU2_END:
   434                           	callstack 0
   435  001F6B  35                 	db	53
   436  001F6C  2E                 	db	46
   437  001F6D  20                 	db	32
   438  001F6E  45                 	db	69
   439  001F6F  4E                 	db	78
   440  001F70  44                 	db	68
   441  001F71  20                 	db	32
   442  001F72  43                 	db	67
   443  001F73  4F                 	db	79
   444  001F74  4D                 	db	77
   445  001F75  55                 	db	85
   446  001F76  4E                 	db	78
   447  001F77  49                 	db	73
   448  001F78  43                 	db	67
   449  001F79  41                 	db	65
   450  001F7A  54                 	db	84
   451  001F7B  49                 	db	73
   452  001F7C  4F                 	db	79
   453  001F7D  4E                 	db	78
   454  001F7E  20                 	db	32
   455  001F7F  20                 	db	32
   456  001F80  20                 	db	32
   457  001F81  00                 	db	0
   458  001F82                     __end_of_MENU2_END:
   459                           	callstack 0
   460  001F82                     _MENU2_TIME:
   461                           	callstack 0
   462  001F82  34                 	db	52
   463  001F83  2E                 	db	46
   464  001F84  20                 	db	32
   465  001F85  53                 	db	83
   466  001F86  48                 	db	72
   467  001F87  4F                 	db	79
   468  001F88  57                 	db	87
   469  001F89  20                 	db	32
   470  001F8A  43                 	db	67
   471  001F8B  55                 	db	85
   472  001F8C  52                 	db	82
   473  001F8D  52                 	db	82
   474  001F8E  45                 	db	69
   475  001F8F  4E                 	db	78
   476  001F90  54                 	db	84
   477  001F91  20                 	db	32
   478  001F92  54                 	db	84
   479  001F93  49                 	db	73
   480  001F94  4D                 	db	77
   481  001F95  45                 	db	69
   482  001F96  20                 	db	32
   483  001F97  20                 	db	32
   484  001F98  00                 	db	0
   485  001F99                     __end_of_MENU2_TIME:
   486                           	callstack 0
   487  001F99                     _MENU2_MODIFY:
   488                           	callstack 0
   489  001F99  33                 	db	51
   490  001F9A  2E                 	db	46
   491  001F9B  20                 	db	32
   492  001F9C  4D                 	db	77
   493  001F9D  4F                 	db	79
   494  001F9E  44                 	db	68
   495  001F9F  49                 	db	73
   496  001FA0  46                 	db	70
   497  001FA1  59                 	db	89
   498  001FA2  20                 	db	32
   499  001FA3  43                 	db	67
   500  001FA4  55                 	db	85
   501  001FA5  52                 	db	82
   502  001FA6  52                 	db	82
   503  001FA7  45                 	db	69
   504  001FA8  4E                 	db	78
   505  001FA9  54                 	db	84
   506  001FAA  20                 	db	32
   507  001FAB  54                 	db	84
   508  001FAC  49                 	db	73
   509  001FAD  4D                 	db	77
   510  001FAE  45                 	db	69
   511  001FAF  00                 	db	0
   512  001FB0                     __end_of_MENU2_MODIFY:
   513                           	callstack 0
   514  001FB0                     _MENU2_PLAY:
   515                           	callstack 0
   516  001FB0  32                 	db	50
   517  001FB1  2E                 	db	46
   518  001FB2  20                 	db	32
   519  001FB3  50                 	db	80
   520  001FB4  4C                 	db	76
   521  001FB5  41                 	db	65
   522  001FB6  59                 	db	89
   523  001FB7  20                 	db	32
   524  001FB8  52                 	db	82
   525  001FB9  45                 	db	69
   526  001FBA  43                 	db	67
   527  001FBB  4F                 	db	79
   528  001FBC  52                 	db	82
   529  001FBD  44                 	db	68
   530  001FBE  49                 	db	73
   531  001FBF  4E                 	db	78
   532  001FC0  47                 	db	71
   533  001FC1  53                 	db	83
   534  001FC2  20                 	db	32
   535  001FC3  20                 	db	32
   536  001FC4  20                 	db	32
   537  001FC5  20                 	db	32
   538  001FC6  00                 	db	0
   539  001FC7                     __end_of_MENU2_PLAY:
   540                           	callstack 0
   541  001FC7                     _MENU2_START:
   542                           	callstack 0
   543  001FC7  31                 	db	49
   544  001FC8  2E                 	db	46
   545  001FC9  20                 	db	32
   546  001FCA  53                 	db	83
   547  001FCB  54                 	db	84
   548  001FCC  41                 	db	65
   549  001FCD  52                 	db	82
   550  001FCE  54                 	db	84
   551  001FCF  20                 	db	32
   552  001FD0  52                 	db	82
   553  001FD1  45                 	db	69
   554  001FD2  43                 	db	67
   555  001FD3  4F                 	db	79
   556  001FD4  52                 	db	82
   557  001FD5  44                 	db	68
   558  001FD6  49                 	db	73
   559  001FD7  4E                 	db	78
   560  001FD8  47                 	db	71
   561  001FD9  20                 	db	32
   562  001FDA  20                 	db	32
   563  001FDB  20                 	db	32
   564  001FDC  20                 	db	32
   565  001FDD  00                 	db	0
   566  001FDE                     __end_of_MENU2_START:
   567                           	callstack 0
   568  001FDE                     _MENU1_LOG:
   569                           	callstack 0
   570  001FDE  50                 	db	80
   571  001FDF  4F                 	db	79
   572  001FE0  52                 	db	82
   573  001FE1  54                 	db	84
   574  001FE2  20                 	db	32
   575  001FE3  4E                 	db	78
   576  001FE4  41                 	db	65
   577  001FE5  4D                 	db	77
   578  001FE6  45                 	db	69
   579  001FE7  3A                 	db	58
   580  001FE8  00                 	db	0
   581  001FE9  00                 	db	0
   582  001FEA  00                 	db	0
   583  001FEB  00                 	db	0
   584  001FEC  00                 	db	0
   585  001FED  00                 	db	0
   586  001FEE  00                 	db	0
   587  001FEF  00                 	db	0
   588  001FF0  00                 	db	0
   589  001FF1  00                 	db	0
   590  001FF2  00                 	db	0
   591  001FF3  00                 	db	0
   592  001FF4  00                 	db	0
   593  001FF5                     __end_of_MENU1_LOG:
   594                           	callstack 0
   595  0000                     _TXREG	set	4013
   596  0000                     _RCREG	set	4014
   597  0000                     _SPBRG	set	4015
   598  0000                     _BAUDCONbits	set	4024
   599  0000                     _EECON2	set	4007
   600  0000                     _PORTD	set	3971
   601  0000                     _TXSTAbits	set	4012
   602  0000                     _PORTCbits	set	3970
   603  0000                     _LATBbits	set	3978
   604  0000                     _LATCbits	set	3979
   605  0000                     _TRISBbits	set	3987
   606  0000                     _TRISD	set	3989
   607  0000                     _OSCTUNEbits	set	3995
   608  0000                     _ADCON2	set	4032
   609  0000                     _ADCON1	set	4033
   610  0000                     _INTCONbits	set	4082
   611  0000                     _TRISCbits	set	3988
   612  0000                     _LATDbits	set	3980
   613  0000                     _TRISAbits	set	3986
   614  0000                     _PORTDbits	set	3971
   615  0000                     _LATAbits	set	3977
   616  0000                     _ADRESH	set	4036
   617  0000                     _ADCON0bits	set	4034
   618  0000                     _OSCCONbits	set	4051
   619  0000                     _TMR0L	set	4054
   620  0000                     _T0CONbits	set	4053
   621  0000                     _PIR1bits	set	3998
   622  0000                     _EECON1bits	set	4006
   623  0000                     _EEDATA	set	4008
   624  0000                     _EEADR	set	4009
   625  0000                     _RCSTA	set	4011
   626  0000                     _TXSTA	set	4012
   627  0000                     _SPBRGH	set	4016
   628  001FF5                     STR_1:
   629  001FF5  20                 	db	32
   630  001FF6  20                 	db	32
   631  001FF7  20                 	db	32
   632  001FF8  20                 	db	32
   633  001FF9  20                 	db	32
   634  001FFA  20                 	db	32
   635  001FFB  20                 	db	32
   636  001FFC  20                 	db	32
   637  001FFD  00                 	db	0
   638  001FFE  00                 	db	0	; dummy byte at the end
   639  0000                     
   640                           ; #config settings
   641                           
   642                           	psect	cinit
   643  00161A                     __pcinit:
   644                           	callstack 0
   645  00161A                     start_initialization:
   646                           	callstack 0
   647  00161A                     __initialization:
   648                           	callstack 0
   649                           
   650                           ; Initialize objects allocated to BANK0 (100 bytes)
   651                           ; load TBLPTR registers with __pidataBANK0
   652  00161A  0EB0               	movlw	low __pidataBANK0
   653  00161C  6EF6               	movwf	tblptrl,c
   654  00161E  0E14               	movlw	high __pidataBANK0
   655  001620  6EF7               	movwf	tblptrh,c
   656  001622  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   657  001624  6EF8               	movwf	tblptru,c
   658  001626  EE00  F080         	lfsr	0,__pdataBANK0
   659  00162A  EE10 F064          	lfsr	1,100
   660  00162E                     copy_data0:
   661  00162E  0009               	tblrd		*+
   662  001630  CFF5 FFEE          	movff	tablat,postinc0
   663  001634  50E5               	movf	postdec1,w,c
   664  001636  50E1               	movf	fsr1l,w,c
   665  001638  E1FA               	bnz	copy_data0
   666                           
   667                           ; Clear objects allocated to BANK1 (176 bytes)
   668  00163A  EE01  F000         	lfsr	0,__pbssBANK1
   669  00163E  0EB0               	movlw	176
   670  001640                     clear_0:
   671  001640  6AEE               	clrf	postinc0,c
   672  001642  06E8               	decf	wreg,f,c
   673  001644  E1FD               	bnz	clear_0
   674                           
   675                           ; Clear objects allocated to BANK0 (28 bytes)
   676  001646  EE00  F0E4         	lfsr	0,__pbssBANK0
   677  00164A  0E1C               	movlw	28
   678  00164C                     clear_1:
   679  00164C  6AEE               	clrf	postinc0,c
   680  00164E  06E8               	decf	wreg,f,c
   681  001650  E1FD               	bnz	clear_1
   682                           
   683                           ; Clear objects allocated to COMRAM (89 bytes)
   684  001652  EE00  F001         	lfsr	0,__pbssCOMRAM
   685  001656  0E59               	movlw	89
   686  001658                     clear_2:
   687  001658  6AEE               	clrf	postinc0,c
   688  00165A  06E8               	decf	wreg,f,c
   689  00165C  E1FD               	bnz	clear_2
   690  00165E                     end_of_initialization:
   691                           	callstack 0
   692  00165E                     __end_of__initialization:
   693                           	callstack 0
   694  00165E  9074               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   695  001660  9274               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   696  001662  0E00               	movlw	low (__Lmediumconst shr (0+16))
   697  001664  6EF8               	movwf	tblptru,c
   698  001666  0100               	movlb	0
   699  001668  EF8A  F00A         	goto	_main	;jump to C main() function
   700                           
   701                           	psect	bssCOMRAM
   702  000001                     __pbssCOMRAM:
   703                           	callstack 0
   704  000001                     _countTime:
   705                           	callstack 0
   706  000001                     	ds	5
   707  000006                     _t:
   708                           	callstack 0
   709  000006                     	ds	5
   710  00000B                     _counter@TiTTimer$F1024:
   711                           	callstack 0
   712  00000B                     	ds	2
   713  00000D                     _h_Tics:
   714                           	callstack 0
   715  00000D                     	ds	2
   716  00000F                     _Timer:
   717                           	callstack 0
   718  00000F                     	ds	2
   719  000011                     _columna:
   720                           	callstack 0
   721  000011                     	ds	1
   722  000012                     _fila:
   723                           	callstack 0
   724  000012                     	ds	1
   725  000013                     _keyDetected:
   726                           	callstack 0
   727  000013                     	ds	1
   728  000014                     _state:
   729                           	callstack 0
   730  000014                     	ds	1
   731  000015                     _timer@TTeclat$F1784:
   732                           	callstack 0
   733  000015                     	ds	1
   734  000016                     motorMelody@state2:
   735                           	callstack 0
   736  000016                     	ds	1
   737  000017                     motorSound@state:
   738                           	callstack 0
   739  000017                     	ds	1
   740  000018                     _melody:
   741                           	callstack 0
   742  000018                     	ds	1
   743  000019                     _sound:
   744                           	callstack 0
   745  000019                     	ds	1
   746  00001A                     _nota:
   747                           	callstack 0
   748  00001A                     	ds	1
   749  00001B                     _timer3:
   750                           	callstack 0
   751  00001B                     	ds	1
   752  00001C                     _timer2@TSound$F1622:
   753                           	callstack 0
   754  00001C                     	ds	1
   755  00001D                     _timer@TSound$F1621:
   756                           	callstack 0
   757  00001D                     	ds	1
   758  00001E                     _rep:
   759                           	callstack 0
   760  00001E                     	ds	1
   761  00001F                     _prevKey:
   762                           	callstack 0
   763  00001F                     	ds	1
   764  000020                     _countChar:
   765                           	callstack 0
   766  000020                     	ds	1
   767  000021                     _timer@TSms$F1539:
   768                           	callstack 0
   769  000021                     	ds	1
   770  000022                     motorTX@state:
   771                           	callstack 0
   772  000022                     	ds	1
   773  000023                     motorRX@info:
   774                           	callstack 0
   775  000023                     	ds	1
   776  000024                     _flying:
   777                           	callstack 0
   778  000024                     	ds	1
   779  000025                     _ok:
   780                           	callstack 0
   781  000025                     	ds	1
   782  000026                     _s:
   783                           	callstack 0
   784  000026                     	ds	1
   785  000027                     _i:
   786                           	callstack 0
   787  000027                     	ds	1
   788  000028                     _enviaNom:
   789                           	callstack 0
   790  000028                     	ds	1
   791  000029                     _action:
   792                           	callstack 0
   793  000029                     	ds	1
   794  00002A                     _send:
   795                           	callstack 0
   796  00002A                     	ds	1
   797  00002B                     motorROM@stateROM:
   798                           	callstack 0
   799  00002B                     	ds	1
   800  00002C                     _index1:
   801                           	callstack 0
   802  00002C                     	ds	1
   803  00002D                     _pit:
   804                           	callstack 0
   805  00002D                     	ds	1
   806  00002E                     _nTotal:
   807                           	callstack 0
   808  00002E                     	ds	1
   809  00002F                     _writting:
   810                           	callstack 0
   811  00002F                     	ds	1
   812  000030                     _k:
   813                           	callstack 0
   814  000030                     	ds	1
   815  000031                     _addr:
   816                           	callstack 0
   817  000031                     	ds	1
   818  000032                     _counter:
   819                           	callstack 0
   820  000032                     	ds	1
   821  000033                     _finalMarq2:
   822                           	callstack 0
   823  000033                     	ds	1
   824  000034                     _finalMarq:
   825                           	callstack 0
   826  000034                     	ds	1
   827  000035                     _posMin2:
   828                           	callstack 0
   829  000035                     	ds	1
   830  000036                     _posMin:
   831                           	callstack 0
   832  000036                     	ds	1
   833  000037                     _posMax:
   834                           	callstack 0
   835  000037                     	ds	1
   836  000038                     _extraPos:
   837                           	callstack 0
   838  000038                     	ds	1
   839  000039                     _empty:
   840                           	callstack 0
   841  000039                     	ds	1
   842  00003A                     _posLCD:
   843                           	callstack 0
   844  00003A                     	ds	1
   845  00003B                     _caseMenu:
   846                           	callstack 0
   847  00003B                     	ds	1
   848  00003C                     _timer2:
   849                           	callstack 0
   850  00003C                     	ds	1
   851  00003D                     _timer@TMenu$F1082:
   852                           	callstack 0
   853  00003D                     	ds	1
   854  00003E                     motorHora@state:
   855                           	callstack 0
   856  00003E                     	ds	1
   857  00003F                     _startTime:
   858                           	callstack 0
   859  00003F                     	ds	1
   860  000040                     _timer:
   861                           	callstack 0
   862  000040                     	ds	1
   863  000041                     _p:
   864                           	callstack 0
   865  000041                     	ds	1
   866  000042                     _recording:
   867                           	callstack 0
   868  000042                     	ds	1
   869  000043                     _n:
   870                           	callstack 0
   871  000043                     	ds	1
   872  000044                     _posJoystick:
   873                           	callstack 0
   874  000044                     	ds	1
   875  000045                     _mode:
   876                           	callstack 0
   877  000045                     	ds	1
   878  000046                     _count:
   879                           	callstack 0
   880  000046                     	ds	1
   881  000047                     motorMicro@states:
   882                           	callstack 0
   883  000047                     	ds	1
   884  000048                     motorADC@state:
   885                           	callstack 0
   886  000048                     	ds	1
   887  000049                     _move:
   888                           	callstack 0
   889  000049                     	ds	1
   890  00004A                     _timerMicro:
   891                           	callstack 0
   892  00004A                     	ds	1
   893  00004B                     _timerADC:
   894                           	callstack 0
   895  00004B                     	ds	1
   896  00004C                     _ColumnAct:
   897                           	callstack 0
   898  00004C                     	ds	1
   899  00004D                     _RowAct:
   900                           	callstack 0
   901  00004D                     	ds	1
   902  00004E                     _Columns:
   903                           	callstack 0
   904  00004E                     	ds	1
   905  00004F                     _Rows:
   906                           	callstack 0
   907  00004F                     	ds	1
   908  000050                     _time:
   909                           	callstack 0
   910  000050                     	ds	6
   911  000056                     _portName:
   912                           	callstack 0
   913  000056                     	ds	4
   914                           
   915                           	psect	bssBANK0
   916  0000E4                     __pbssBANK0:
   917                           	callstack 0
   918  0000E4                     _sendName:
   919                           	callstack 0
   920  0000E4                     	ds	5
   921  0000E9                     _showTime:
   922                           	callstack 0
   923  0000E9                     	ds	23
   924                           
   925                           	psect	dataBANK0
   926  000080                     __pdataBANK0:
   927                           	callstack 0
   928  000080                     _key1:
   929                           	callstack 0
   930  000080                     	ds	4
   931  000084                     _key0:
   932                           	callstack 0
   933  000084                     	ds	4
   934  000088                     _END_MSG:
   935                           	callstack 0
   936  000088                     	ds	23
   937  00009F                     _EMPTY2:
   938                           	callstack 0
   939  00009F                     	ds	23
   940  0000B6                     _EMPTY:
   941                           	callstack 0
   942  0000B6                     	ds	23
   943  0000CD                     _NOTHING2:
   944                           	callstack 0
   945  0000CD                     	ds	23
   946                           
   947                           	psect	bssBANK1
   948  000100                     __pbssBANK1:
   949                           	callstack 0
   950  000100                     _s_Timers:
   951                           	callstack 0
   952  000100                     	ds	96
   953  000160                     _recordings:
   954                           	callstack 0
   955  000160                     	ds	80
   956                           
   957                           	psect	cstackBANK1
   958  0001B0                     __pcstackBANK1:
   959                           	callstack 0
   960  0001B0                     ??_motorTX:
   961  0001B0                     ??_motorRX:
   962  0001B0                     ??_changePos:
   963  0001B0                     ??_enterMode:
   964  0001B0                     LcInit@rows:
   965                           	callstack 0
   966  0001B0                     _LcGotoXY$320:
   967                           	callstack 0
   968                           
   969                           ; 2 bytes @ 0x0
   970  0001B0                     	ds	1
   971  0001B1                     LcInit@i:
   972                           	callstack 0
   973                           
   974                           ; 2 bytes @ 0x1
   975  0001B1                     	ds	1
   976  0001B2                     motorRX@num:
   977                           	callstack 0
   978  0001B2                     motorTX@num:
   979                           	callstack 0
   980  0001B2                     LcGotoXY@Fisics:
   981                           	callstack 0
   982                           
   983                           ; 2 bytes @ 0x2
   984  0001B2                     	ds	2
   985  0001B4                     LcGotoXY@Column:
   986                           	callstack 0
   987                           
   988                           ; 1 bytes @ 0x4
   989  0001B4                     	ds	1
   990  0001B5                     ??_modifyHora:
   991  0001B5                     manageKey@countChar:
   992                           	callstack 0
   993  0001B5                     showLCD@message1:
   994                           	callstack 0
   995  0001B5                     showLCD_Records@message11:
   996                           	callstack 0
   997  0001B5                     showLCD_Marq@message1:
   998                           	callstack 0
   999                           
  1000                           ; 2 bytes @ 0x5
  1001  0001B5                     	ds	1
  1002  0001B6                     manageKey@note:
  1003                           	callstack 0
  1004                           
  1005                           ; 1 bytes @ 0x6
  1006  0001B6                     	ds	1
  1007  0001B7                     modifyHora@num:
  1008                           	callstack 0
  1009  0001B7                     manageKey@key:
  1010                           	callstack 0
  1011  0001B7                     changePos@num:
  1012                           	callstack 0
  1013  0001B7                     showLCD@message2:
  1014                           	callstack 0
  1015  0001B7                     showLCD_Records@message12:
  1016                           	callstack 0
  1017  0001B7                     showLCD_Marq@message2:
  1018                           	callstack 0
  1019                           
  1020                           ; 2 bytes @ 0x7
  1021  0001B7                     	ds	1
  1022  0001B8                     ??_manageKeySMS:
  1023  0001B8                     changePos@num2:
  1024                           	callstack 0
  1025                           
  1026                           ; 1 bytes @ 0x8
  1027  0001B8                     	ds	1
  1028  0001B9                     changePos@pos:
  1029                           	callstack 0
  1030  0001B9                     _showLCD$1118:
  1031                           	callstack 0
  1032  0001B9                     showLCD_Records@message21:
  1033                           	callstack 0
  1034                           
  1035                           ; 2 bytes @ 0x9
  1036  0001B9                     	ds	1
  1037  0001BA                     manageKeySMS@key:
  1038                           	callstack 0
  1039                           
  1040                           ; 1 bytes @ 0xA
  1041  0001BA                     	ds	1
  1042  0001BB                     ??_motorTeclat:
  1043  0001BB                     _showLCD$1119:
  1044                           	callstack 0
  1045  0001BB                     showLCD_Records@message22:
  1046                           	callstack 0
  1047                           
  1048                           ; 2 bytes @ 0xB
  1049  0001BB                     	ds	2
  1050  0001BD                     ??_showLCD_Records:
  1051                           
  1052                           ; 1 bytes @ 0xD
  1053  0001BD                     	ds	4
  1054  0001C1                     ??_motorMenu:
  1055                           
  1056                           ; 1 bytes @ 0x11
  1057  0001C1                     	ds	2
  1058                           
  1059                           	psect	cstackCOMRAM
  1060  00005A                     __pcstackCOMRAM:
  1061                           	callstack 0
  1062  00005A                     ?i2___wmul:
  1063                           	callstack 0
  1064  00005A                     i2___wmul@multiplier:
  1065                           	callstack 0
  1066                           
  1067                           ; 2 bytes @ 0x0
  1068  00005A                     	ds	2
  1069  00005C                     i2___wmul@multiplicand:
  1070                           	callstack 0
  1071                           
  1072                           ; 2 bytes @ 0x2
  1073  00005C                     	ds	2
  1074  00005E                     i2___wmul@product:
  1075                           	callstack 0
  1076                           
  1077                           ; 2 bytes @ 0x4
  1078  00005E                     	ds	2
  1079  000060                     
  1080                           ; 1 bytes @ 0x6
  1081  000060                     	ds	1
  1082  000061                     ??_RSI_High:
  1083                           
  1084                           ; 1 bytes @ 0x7
  1085  000061                     	ds	4
  1086  000065                     ??_EscriuPrimeraOrdre:
  1087  000065                     ??_CantaPartAlta:
  1088  000065                     ??_CantaPartBaixa:
  1089  000065                     ??_whichKey:
  1090  000065                     ?_TiGetTics:
  1091                           	callstack 0
  1092  000065                     ?___wmul:
  1093                           	callstack 0
  1094  000065                     saveLetter@countChar:
  1095                           	callstack 0
  1096  000065                     TiInit@counter:
  1097                           	callstack 0
  1098  000065                     TiResetTics@Handle:
  1099                           	callstack 0
  1100  000065                     writeName@towerName:
  1101                           	callstack 0
  1102  000065                     changeJoystick@pos:
  1103                           	callstack 0
  1104  000065                     writeEEPROM@data:
  1105                           	callstack 0
  1106  000065                     readEEPROM@addr:
  1107                           	callstack 0
  1108  000065                     enviaMostra@sound:
  1109                           	callstack 0
  1110  000065                     selectSound@ind:
  1111                           	callstack 0
  1112  000065                     enviaDada@info:
  1113                           	callstack 0
  1114  000065                     setMode@m:
  1115                           	callstack 0
  1116  000065                     manageRepeat@max:
  1117                           	callstack 0
  1118  000065                     ___wmul@multiplier:
  1119                           	callstack 0
  1120                           
  1121                           ; 2 bytes @ 0xB
  1122  000065                     	ds	1
  1123  000066                     ??_enviaDada:
  1124  000066                     CantaPartAlta@c:
  1125                           	callstack 0
  1126  000066                     CantaPartBaixa@c:
  1127                           	callstack 0
  1128  000066                     EscriuPrimeraOrdre@ordre:
  1129                           	callstack 0
  1130  000066                     saveLetter@key:
  1131                           	callstack 0
  1132  000066                     sendSound@sound:
  1133                           	callstack 0
  1134  000066                     actHora@hora:
  1135                           	callstack 0
  1136  000066                     TiGetTimer@counter:
  1137                           	callstack 0
  1138  000066                     writeEEPROM@addr:
  1139                           	callstack 0
  1140  000066                     manageRepeat@rep:
  1141                           	callstack 0
  1142  000066                     pressSound@tono:
  1143                           	callstack 0
  1144  000066                     checkKey@D1:
  1145                           	callstack 0
  1146                           
  1147                           ; 1 bytes @ 0xC
  1148  000066                     	ds	1
  1149  000067                     ??_TiGetTics:
  1150  000067                     ??_motorROM:
  1151  000067                     CantaIR@IR:
  1152                           	callstack 0
  1153  000067                     CantaData@Data:
  1154                           	callstack 0
  1155  000067                     actHora@pos:
  1156                           	callstack 0
  1157  000067                     checkKey@D2:
  1158                           	callstack 0
  1159  000067                     ___wmul@multiplicand:
  1160                           	callstack 0
  1161                           
  1162                           ; 2 bytes @ 0xD
  1163  000067                     	ds	1
  1164  000068                     updateHora@hora:
  1165                           	callstack 0
  1166  000068                     enviaDada@c:
  1167                           	callstack 0
  1168  000068                     checkKey@stateAux:
  1169                           	callstack 0
  1170                           
  1171                           ; 1 bytes @ 0xE
  1172  000068                     	ds	1
  1173  000069                     TiGetTics@Handle:
  1174                           	callstack 0
  1175  000069                     updateHora@mod:
  1176                           	callstack 0
  1177  000069                     checkKey@column:
  1178                           	callstack 0
  1179  000069                     ___wmul@product:
  1180                           	callstack 0
  1181                           
  1182                           ; 2 bytes @ 0xF
  1183  000069                     	ds	1
  1184  00006A                     updateHora@pos:
  1185                           	callstack 0
  1186  00006A                     checkKey@D0:
  1187                           	callstack 0
  1188  00006A                     TiGetTics@actual:
  1189                           	callstack 0
  1190                           
  1191                           ; 2 bytes @ 0x10
  1192  00006A                     	ds	1
  1193  00006B                     ??_initROM:
  1194  00006B                     newHora@hora:
  1195                           	callstack 0
  1196                           
  1197                           ; 1 bytes @ 0x11
  1198  00006B                     	ds	1
  1199  00006C                     ??_motorSound:
  1200  00006C                     ??_motorMelody:
  1201  00006C                     ??_motorMicro:
  1202  00006C                     WaitForBusy@Busy:
  1203                           	callstack 0
  1204  00006C                     newHora@mod:
  1205                           	callstack 0
  1206  00006C                     manageLetter@prevKey:
  1207                           	callstack 0
  1208  00006C                     Espera@Timer:
  1209                           	callstack 0
  1210                           
  1211                           ; 2 bytes @ 0x12
  1212  00006C                     	ds	1
  1213  00006D                     LcGotoXY@Row:
  1214                           	callstack 0
  1215  00006D                     newHora@pos:
  1216                           	callstack 0
  1217  00006D                     manageLetter@key:
  1218                           	callstack 0
  1219                           
  1220                           ; 1 bytes @ 0x13
  1221  00006D                     	ds	1
  1222  00006E                     ??_motorHora:
  1223  00006E                     ??_LcGotoXY:
  1224  00006E                     Espera@ms:
  1225                           	callstack 0
  1226  00006E                     initROM@j:
  1227                           	callstack 0
  1228                           
  1229                           ; 2 bytes @ 0x14
  1230  00006E                     	ds	2
  1231  000070                     ??_Espera:
  1232  000070                     LcPutChar@c:
  1233                           	callstack 0
  1234  000070                     initROM@i:
  1235                           	callstack 0
  1236                           
  1237                           ; 2 bytes @ 0x16
  1238  000070                     	ds	1
  1239  000071                     ??_showLCD:
  1240  000071                     ??_showLCD_Marq:
  1241  000071                     printLetter@posY:
  1242                           	callstack 0
  1243                           
  1244                           ; 1 bytes @ 0x17
  1245  000071                     	ds	1
  1246  000072                     ??_motorADC:
  1247  000072                     LcInit@columns:
  1248                           	callstack 0
  1249  000072                     changeMenu@mode:
  1250                           	callstack 0
  1251  000072                     printLetter@finalKey:
  1252                           	callstack 0
  1253  000072                     initROM@i_1234:
  1254                           	callstack 0
  1255                           
  1256                           ; 2 bytes @ 0x18
  1257  000072                     	ds	1
  1258  000073                     changeMode@u:
  1259                           	callstack 0
  1260                           
  1261                           ; 1 bytes @ 0x19
  1262  000073                     	ds	1
  1263  000074                     
  1264                           ; 1 bytes @ 0x1A
  1265 ;;
  1266 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1267 ;;
  1268 ;; *************** function _main *****************
  1269 ;; Defined at:
  1270 ;;		line 34 in file "main.c"
  1271 ;; Parameters:    Size  Location     Type
  1272 ;;		None
  1273 ;; Auto vars:     Size  Location     Type
  1274 ;;		None
  1275 ;; Return value:  Size  Location     Type
  1276 ;;                  1    wreg      void 
  1277 ;; Registers used:
  1278 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1279 ;; Tracked objects:
  1280 ;;		On entry : 0/0
  1281 ;;		On exit  : 0/0
  1282 ;;		Unchanged: 0/0
  1283 ;; Data sizes:     COMRAM   BANK0   BANK1
  1284 ;;      Params:         0       0       0
  1285 ;;      Locals:         0       0       0
  1286 ;;      Temps:          0       0       0
  1287 ;;      Totals:         0       0       0
  1288 ;;Total ram usage:        0 bytes
  1289 ;; Hardware stack levels required when called: 13
  1290 ;; This function calls:
  1291 ;;		_LcInit
  1292 ;;		_TiInit
  1293 ;;		_initADC
  1294 ;;		_initCentral
  1295 ;;		_initMenu
  1296 ;;		_initROM
  1297 ;;		_initSIO
  1298 ;;		_initSMS
  1299 ;;		_initSound
  1300 ;;		_initTeclat
  1301 ;;		_motorADC
  1302 ;;		_motorHora
  1303 ;;		_motorMelody
  1304 ;;		_motorMenu
  1305 ;;		_motorMicro
  1306 ;;		_motorROM
  1307 ;;		_motorRX
  1308 ;;		_motorSound
  1309 ;;		_motorTX
  1310 ;;		_motorTeclat
  1311 ;; This function is called by:
  1312 ;;		Startup code after reset
  1313 ;; This function uses a non-reentrant model
  1314 ;;
  1315                           
  1316                           	psect	text0
  1317  001514                     __ptext0:
  1318                           	callstack 0
  1319  001514                     _main:
  1320                           	callstack 18
  1321                           
  1322                           ;main.c: 36: }
  1323                           
  1324                           ;incstack = 0
  1325  001514  8CF2               	bsf	242,6,c	;volatile
  1326  001516  8EF2               	bsf	242,7,c	;volatile
  1327  001518  EC20  F00C         	call	_TiInit	;wreg free
  1328  00151C  0E10               	movlw	16
  1329  00151E  6E72               	movwf	LcInit@columns^0,c
  1330  001520  0E02               	movlw	2
  1331  001522  ECC4  F005         	call	_LcInit
  1332  001526  ECB9  F003         	call	_initROM	;wreg free
  1333  00152A  ECC5  F00B         	call	_initMenu	;wreg free
  1334  00152E  ECB5  F00D         	call	_initTeclat	;wreg free
  1335  001532  EC46  F00D         	call	_initCentral	;wreg free
  1336  001536  ECC1  F00D         	call	_initSMS	;wreg free
  1337  00153A  EC11  F00D         	call	_initADC	;wreg free
  1338  00153E  ECBA  F00C         	call	_initSound	;wreg free
  1339  001542  EC5E  F00B         	call	_initSIO	;wreg free
  1340  001546                     l8600:
  1341  001546  ECBD  F001         	call	_motorMenu	;wreg free
  1342  00154A  EC34  F007         	call	_motorTeclat	;wreg free
  1343  00154E  EC60  F008         	call	_motorSound	;wreg free
  1344  001552  EC85  F002         	call	_motorTX	;wreg free
  1345  001556  EC9F  F008         	call	_motorADC	;wreg free
  1346  00155A  EC56  F005         	call	_motorRX	;wreg free
  1347  00155E  EC56  F009         	call	_motorHora	;wreg free
  1348  001562  ECCD  F007         	call	_motorMelody	;wreg free
  1349  001566  EC4E  F004         	call	_motorROM	;wreg free
  1350  00156A  EC36  F00B         	call	_motorMicro	;wreg free
  1351  00156E  D7EB               	goto	l8600
  1352  001570                     __end_of_main:
  1353                           	callstack 0
  1354                           
  1355 ;; *************** function _motorTeclat *****************
  1356 ;; Defined at:
  1357 ;;		line 105 in file "TTeclat.c"
  1358 ;; Parameters:    Size  Location     Type
  1359 ;;		None
  1360 ;; Auto vars:     Size  Location     Type
  1361 ;;		None
  1362 ;; Return value:  Size  Location     Type
  1363 ;;                  1    wreg      void 
  1364 ;; Registers used:
  1365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1366 ;; Tracked objects:
  1367 ;;		On entry : 0/0
  1368 ;;		On exit  : 0/0
  1369 ;;		Unchanged: 0/0
  1370 ;; Data sizes:     COMRAM   BANK0   BANK1
  1371 ;;      Params:         0       0       0
  1372 ;;      Locals:         0       0       0
  1373 ;;      Temps:          0       0       2
  1374 ;;      Totals:         0       0       2
  1375 ;;Total ram usage:        2 bytes
  1376 ;; Hardware stack levels used: 1
  1377 ;; Hardware stack levels required when called: 12
  1378 ;; This function calls:
  1379 ;;		_TiGetTics
  1380 ;;		_TiResetTics
  1381 ;;		_checkKey
  1382 ;;		_manageKeySMS
  1383 ;;		_whichKey
  1384 ;; This function is called by:
  1385 ;;		_main
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           	psect	text1
  1390  000E68                     __ptext1:
  1391                           	callstack 0
  1392  000E68                     _motorTeclat:
  1393                           	callstack 18
  1394                           
  1395                           ;TTeclat.c: 106:     switch (state){
  1396                           
  1397                           ;incstack = 0
  1398  000E68  D037               	goto	l8254
  1399  000E6A                     l8234:
  1400                           
  1401                           ; BSR set to: 1
  1402                           ;TTeclat.c: 108:            state = checkKey( 0, 1, 1, 1, 1);
  1403  000E6A  0E01               	movlw	1
  1404  000E6C  6E66               	movwf	checkKey@D1^0,c
  1405  000E6E  6E67               	movwf	checkKey@D2^0,c
  1406  000E70  6E68               	movwf	checkKey@stateAux^0,c
  1407  000E72  6E69               	movwf	checkKey@column^0,c
  1408  000E74  0E00               	movlw	0
  1409  000E76  EC81  F00B         	call	_checkKey
  1410  000E7A  6E14               	movwf	_state^0,c
  1411                           
  1412                           ;TTeclat.c: 109:            break;
  1413  000E7C  0012               	return	
  1414  000E7E                     l8236:
  1415                           
  1416                           ; BSR set to: 1
  1417                           ;TTeclat.c: 111:            state = checkKey( 1, 0, 1, 2, 2);
  1418  000E7E  0E00               	movlw	0
  1419  000E80  6E66               	movwf	checkKey@D1^0,c
  1420  000E82  0E01               	movlw	1
  1421  000E84  6E67               	movwf	checkKey@D2^0,c
  1422  000E86  0E02               	movlw	2
  1423  000E88  6E68               	movwf	checkKey@stateAux^0,c
  1424  000E8A  6E69               	movwf	checkKey@column^0,c
  1425  000E8C  0E01               	movlw	1
  1426  000E8E  EC81  F00B         	call	_checkKey
  1427  000E92  6E14               	movwf	_state^0,c
  1428                           
  1429                           ;TTeclat.c: 112:            break;
  1430  000E94  0012               	return	
  1431  000E96                     l8238:
  1432                           
  1433                           ; BSR set to: 1
  1434                           ;TTeclat.c: 114:            state = checkKey( 1, 1, 0, 0, 3);
  1435  000E96  0E01               	movlw	1
  1436  000E98  6E66               	movwf	checkKey@D1^0,c
  1437  000E9A  0E00               	movlw	0
  1438  000E9C  6E67               	movwf	checkKey@D2^0,c
  1439  000E9E  6E68               	movwf	checkKey@stateAux^0,c
  1440  000EA0  0E03               	movlw	3
  1441  000EA2  6E69               	movwf	checkKey@column^0,c
  1442  000EA4  0E01               	movlw	1
  1443  000EA6  EC81  F00B         	call	_checkKey
  1444  000EAA  6E14               	movwf	_state^0,c
  1445                           
  1446                           ;TTeclat.c: 115:            break;
  1447  000EAC  0012               	return	
  1448  000EAE                     l8240:
  1449                           
  1450                           ; BSR set to: 1
  1451                           ;TTeclat.c: 117:             if (TiGetTics(timer) >= 1000){
  1452  000EAE  5015               	movf	_timer@TTeclat$F1784^0,w,c
  1453  000EB0  EC57  F00C         	call	_TiGetTics
  1454  000EB4  0EE8               	movlw	232
  1455  000EB6  5C65               	subwf	?_TiGetTics^0,w,c
  1456  000EB8  0E03               	movlw	3
  1457  000EBA  5866               	subwfb	(?_TiGetTics+1)^0,w,c
  1458  000EBC  A0D8               	btfss	status,0,c
  1459  000EBE  0012               	return	
  1460                           
  1461                           ;TTeclat.c: 118:                 state = 4;
  1462  000EC0  0E04               	movlw	4
  1463  000EC2  6E14               	movwf	_state^0,c
  1464                           
  1465                           ;TTeclat.c: 119:                 TiResetTics(timer);
  1466  000EC4  5015               	movf	_timer@TTeclat$F1784^0,w,c
  1467  000EC6  EF1A  F00E         	goto	_TiResetTics
  1468  000ECA                     l8246:
  1469                           
  1470                           ; BSR set to: 1
  1471                           ;TTeclat.c: 123:             if (keyDetected){
  1472  000ECA  5013               	movf	_keyDetected^0,w,c
  1473  000ECC  E017               	bz	PL100
  1474                           
  1475                           ; BSR set to: 1
  1476                           ;TTeclat.c: 124:                 manageKeySMS(whichKey());
  1477  000ECE  EC8B  F009         	call	_whichKey	;wreg free
  1478  000ED2  EC1C  F000         	call	_manageKeySMS
  1479  000ED6                     l8250:
  1480                           
  1481                           ;TTeclat.c: 126:             state = keyDetected = 0;
  1482                           
  1483                           ;TTeclat.c: 127:             break;
  1484  000ED6  D012               	goto	PL100	;call to abstracted procedure
  1485  000ED8                     l8254:
  1486  000ED8  5014               	movf	_state^0,w,c
  1487  000EDA  0101               	movlb	1	; () banked
  1488  000EDC  6FBB               	movwf	??_motorTeclat& (0+255),b
  1489  000EDE  6BBC               	clrf	(??_motorTeclat+1)& (0+255),b
  1490                           
  1491                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1492                           ; Switch size 1, requested type "space"
  1493                           ; Number of cases is 1, Range of values is 0 to 0
  1494                           ; switch strategies available:
  1495                           ; Name         Instructions Cycles
  1496                           ; simple_byte            4     3 (average)
  1497                           ;	Chosen strategy is simple_byte
  1498  000EE0  51BC               	movf	(??_motorTeclat+1)& (0+255),w,b
  1499  000EE2  A4D8               	btfss	status,2,c
  1500  000EE4  0012               	return	
  1501                           
  1502                           ; BSR set to: 1
  1503                           ; Switch size 1, requested type "space"
  1504                           ; Number of cases is 5, Range of values is 0 to 4
  1505                           ; switch strategies available:
  1506                           ; Name         Instructions Cycles
  1507                           ; simple_byte           16     9 (average)
  1508                           ;	Chosen strategy is simple_byte
  1509  000EE6  51BB               	movf	??_motorTeclat& (0+255),w,b
  1510  000EE8  E0C0               	bz	l8234
  1511  000EEA  0A01               	xorlw	1	; case 1
  1512  000EEC  E0C8               	bz	l8236
  1513  000EEE  0A03               	xorlw	3	; case 2
  1514  000EF0  E0D2               	bz	l8238
  1515  000EF2  0A01               	xorlw	1	; case 3
  1516  000EF4  E0DC               	bz	l8240
  1517  000EF6  0A07               	xorlw	7	; case 4
  1518  000EF8  E0E8               	bz	l8246
  1519  000EFA  0012               	return		;funcret
  1520  000EFC                     __end_of_motorTeclat:
  1521                           	callstack 0
  1522  000EFC                     PL100:
  1523                           	callstack 26
  1524  000EFC  6A13               	clrf	_keyDetected^0,c
  1525  000EFE  6A14               	clrf	_state^0,c
  1526  000F00  0012               	return		;funcret
  1527  000F02                     __end_ofPL100:
  1528                           	callstack 0
  1529                           
  1530 ;; *************** function _whichKey *****************
  1531 ;; Defined at:
  1532 ;;		line 47 in file "TTeclat.c"
  1533 ;; Parameters:    Size  Location     Type
  1534 ;;		None
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;		None
  1537 ;; Return value:  Size  Location     Type
  1538 ;;                  1    wreg      unsigned char 
  1539 ;; Registers used:
  1540 ;;		wreg, status,2, status,0
  1541 ;; Tracked objects:
  1542 ;;		On entry : 0/1
  1543 ;;		On exit  : 0/0
  1544 ;;		Unchanged: 0/0
  1545 ;; Data sizes:     COMRAM   BANK0   BANK1
  1546 ;;      Params:         0       0       0
  1547 ;;      Locals:         0       0       0
  1548 ;;      Temps:          2       0       0
  1549 ;;      Totals:         2       0       0
  1550 ;;Total ram usage:        2 bytes
  1551 ;; Hardware stack levels used: 1
  1552 ;; Hardware stack levels required when called: 3
  1553 ;; This function calls:
  1554 ;;		Nothing
  1555 ;; This function is called by:
  1556 ;;		_motorTeclat
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560                           	psect	text2
  1561  001316                     __ptext2:
  1562                           	callstack 0
  1563  001316                     _whichKey:
  1564                           	callstack 26
  1565                           
  1566                           ;TTeclat.c: 72:             return '#';
  1567                           
  1568                           ;TTeclat.c: 70:             return '0';
  1569                           
  1570                           ;TTeclat.c: 68:             return '*';
  1571                           
  1572                           ;TTeclat.c: 66:             return '9';
  1573                           
  1574                           ;TTeclat.c: 64:             return '8';
  1575                           
  1576                           ;TTeclat.c: 62:             return '7';
  1577                           
  1578                           ;TTeclat.c: 60:             return '6';
  1579                           
  1580                           ;TTeclat.c: 58:             return '5';
  1581                           
  1582                           ;TTeclat.c: 56:             return '4';
  1583                           
  1584                           ;TTeclat.c: 54:             return '3';
  1585                           
  1586                           ;TTeclat.c: 52:             return '2';
  1587                           
  1588                           ;TTeclat.c: 50:             return '1';
  1589                           
  1590                           ;TTeclat.c: 48:     switch ((fila << 4) | columna) {
  1591                           
  1592                           ;incstack = 0
  1593  001316  5012               	movf	_fila^0,w,c
  1594  001318  6E65               	movwf	??_whichKey^0,c
  1595  00131A  6A66               	clrf	(??_whichKey+1)^0,c
  1596  00131C  3A65               	swapf	??_whichKey^0,f,c
  1597  00131E  3A66               	swapf	(??_whichKey+1)^0,f,c
  1598  001320  0EF0               	movlw	240
  1599  001322  1666               	andwf	(??_whichKey+1)^0,f,c
  1600  001324  5065               	movf	??_whichKey^0,w,c
  1601  001326  0B0F               	andlw	15
  1602  001328  1266               	iorwf	(??_whichKey+1)^0,f,c
  1603  00132A  0EF0               	movlw	240
  1604  00132C  1665               	andwf	??_whichKey^0,f,c
  1605  00132E  5011               	movf	_columna^0,w,c
  1606  001330  1265               	iorwf	??_whichKey^0,f,c
  1607                           
  1608                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1609                           ; Switch size 1, requested type "space"
  1610                           ; Number of cases is 1, Range of values is 0 to 0
  1611                           ; switch strategies available:
  1612                           ; Name         Instructions Cycles
  1613                           ; simple_byte            4     3 (average)
  1614                           ;	Chosen strategy is simple_byte
  1615  001332  5066               	movf	(??_whichKey+1)^0,w,c
  1616  001334  A4D8               	btfss	status,2,c
  1617  001336  0C23               	retlw	35
  1618                           
  1619                           ; Switch size 1, requested type "space"
  1620                           ; Number of cases is 11, Range of values is 17 to 66
  1621                           ; switch strategies available:
  1622                           ; Name         Instructions Cycles
  1623                           ; simple_byte           34    18 (average)
  1624                           ;	Chosen strategy is simple_byte
  1625  001338  5065               	movf	??_whichKey^0,w,c
  1626  00133A  0A11               	xorlw	17	; case 17
  1627  00133C  B4D8               	btfsc	status,2,c
  1628  00133E  0C31               	retlw	49
  1629  001340  0A03               	xorlw	3	; case 18
  1630  001342  B4D8               	btfsc	status,2,c
  1631  001344  0C32               	retlw	50
  1632  001346  0A01               	xorlw	1	; case 19
  1633  001348  B4D8               	btfsc	status,2,c
  1634  00134A  0C33               	retlw	51
  1635  00134C  0A32               	xorlw	50	; case 33
  1636  00134E  B4D8               	btfsc	status,2,c
  1637  001350  0C34               	retlw	52
  1638  001352  0A03               	xorlw	3	; case 34
  1639  001354  B4D8               	btfsc	status,2,c
  1640  001356  0C35               	retlw	53
  1641  001358  0A01               	xorlw	1	; case 35
  1642  00135A  B4D8               	btfsc	status,2,c
  1643  00135C  0C36               	retlw	54
  1644  00135E  0A12               	xorlw	18	; case 49
  1645  001360  B4D8               	btfsc	status,2,c
  1646  001362  0C37               	retlw	55
  1647  001364  0A03               	xorlw	3	; case 50
  1648  001366  B4D8               	btfsc	status,2,c
  1649  001368  0C38               	retlw	56
  1650  00136A  0A01               	xorlw	1	; case 51
  1651  00136C  B4D8               	btfsc	status,2,c
  1652  00136E  0C39               	retlw	57
  1653  001370  0A72               	xorlw	114	; case 65
  1654  001372  B4D8               	btfsc	status,2,c
  1655  001374  0C2A               	retlw	42
  1656  001376  0A03               	xorlw	3	; case 66
  1657  001378  B4D8               	btfsc	status,2,c
  1658  00137A  0C30               	retlw	48
  1659  00137C  0C23               	retlw	35
  1660  00137E                     __end_of_whichKey:
  1661                           	callstack 0
  1662                           
  1663 ;; *************** function _manageKeySMS *****************
  1664 ;; Defined at:
  1665 ;;		line 60 in file "TSms.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;  key             1    wreg     unsigned char 
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;  key             1   10[BANK1 ] unsigned char 
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  1    wreg      void 
  1672 ;; Registers used:
  1673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/1
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMRAM   BANK0   BANK1
  1679 ;;      Params:         0       0       0
  1680 ;;      Locals:         0       0       1
  1681 ;;      Temps:          0       0       2
  1682 ;;      Totals:         0       0       3
  1683 ;;Total ram usage:        3 bytes
  1684 ;; Hardware stack levels used: 1
  1685 ;; Hardware stack levels required when called: 11
  1686 ;; This function calls:
  1687 ;;		_TiResetTics
  1688 ;;		_initSMS
  1689 ;;		_manageKey
  1690 ;;		_manageLetter
  1691 ;;		_modifyHora
  1692 ;; This function is called by:
  1693 ;;		_motorTeclat
  1694 ;; This function uses a non-reentrant model
  1695 ;;
  1696                           
  1697                           	psect	text3
  1698  000038                     __ptext3:
  1699                           	callstack 0
  1700  000038                     _manageKeySMS:
  1701                           	callstack 18
  1702                           
  1703                           ;incstack = 0
  1704                           ;manageKeySMS@key stored from wreg
  1705  000038  0101               	movlb	1	; () banked
  1706  00003A  6FBA               	movwf	manageKeySMS@key& (0+255),b
  1707                           
  1708                           ;TSms.c: 61:     if (countChar < 4) {
  1709  00003C  0E04               	movlw	4
  1710  00003E  6020               	cpfslt	_countChar^0,c
  1711  000040  D0A3               	goto	l8056
  1712                           
  1713                           ;TSms.c: 63:         manageLetter(key, prevKey);
  1714  000042  C01F  F06C         	movff	_prevKey,manageLetter@prevKey
  1715  000046  51BA               	movf	manageKeySMS@key& (0+255),w,b
  1716  000048  ECB8  F00A         	call	_manageLetter
  1717                           
  1718                           ;TSms.c: 64:         switch (key) {
  1719  00004C  D07C               	goto	l8052
  1720  00004E                     l8030:
  1721                           
  1722                           ; BSR set to: 1
  1723                           ;TSms.c: 66:                 manageKey(key0[rep], countChar, 20);
  1724  00004E  C020  F1B5         	movff	_countChar,manageKey@countChar
  1725  000052  0E14               	movlw	20
  1726  000054  6FB6               	movwf	manageKey@note& (0+255),b
  1727  000056  501E               	movf	_rep^0,w,c
  1728  000058  0F84               	addlw	low _key0
  1729  00005A  D8BC               	call	PL102	;call to abstracted procedure
  1730  00005C  EC19  F008         	call	_manageKey
  1731                           
  1732                           ;TSms.c: 67:                 break;
  1733  000060  D08E               	goto	l1170
  1734  000062                     l8032:
  1735                           
  1736                           ; BSR set to: 1
  1737                           ;TSms.c: 69:                 manageKey(key1[rep], countChar, 2);
  1738  000062  C020  F1B5         	movff	_countChar,manageKey@countChar
  1739  000066  0E02               	movlw	2
  1740  000068  6FB6               	movwf	manageKey@note& (0+255),b
  1741  00006A  501E               	movf	_rep^0,w,c
  1742  00006C  0F80               	addlw	low _key1
  1743  00006E  D8B2               	call	PL102	;call to abstracted procedure
  1744  000070  EC19  F008         	call	_manageKey
  1745                           
  1746                           ;TSms.c: 70:                 break;
  1747  000074  D084               	goto	l1170
  1748  000076                     l8034:
  1749                           
  1750                           ; BSR set to: 1
  1751                           ;TSms.c: 72:                 manageKey(key2[rep], countChar, 3);
  1752  000076  C020  F1B5         	movff	_countChar,manageKey@countChar
  1753  00007A  0E03               	movlw	3
  1754  00007C  6FB6               	movwf	manageKey@note& (0+255),b
  1755  00007E  0E0B               	movlw	low _key2
  1756  000080  241E               	addwf	_rep^0,w,c
  1757  000082  6EF6               	movwf	tblptrl,c
  1758  000084  6AF7               	clrf	tblptrh,c
  1759  000086  0E1F               	movlw	high _key2
  1760  000088  D8A1               	call	PL48	;call to abstracted procedure
  1761  00008A  EC19  F008         	call	_manageKey
  1762                           
  1763                           ;TSms.c: 73:                 break;
  1764  00008E  D077               	goto	l1170
  1765  000090                     l8036:
  1766                           
  1767                           ; BSR set to: 1
  1768                           ;TSms.c: 75:                 manageKey(key3[rep], countChar, 4);
  1769  000090  C020  F1B5         	movff	_countChar,manageKey@countChar
  1770  000094  0E04               	movlw	4
  1771  000096  6FB6               	movwf	manageKey@note& (0+255),b
  1772  000098  0E07               	movlw	low _key3
  1773  00009A  241E               	addwf	_rep^0,w,c
  1774  00009C  6EF6               	movwf	tblptrl,c
  1775  00009E  6AF7               	clrf	tblptrh,c
  1776  0000A0  0E1F               	movlw	high _key3
  1777  0000A2  D894               	call	PL48	;call to abstracted procedure
  1778  0000A4  EC19  F008         	call	_manageKey
  1779                           
  1780                           ;TSms.c: 76:                 break;
  1781  0000A8  D06A               	goto	l1170
  1782  0000AA                     l8038:
  1783                           
  1784                           ; BSR set to: 1
  1785                           ;TSms.c: 78:                 manageKey(key4[rep], countChar, 5);
  1786  0000AA  C020  F1B5         	movff	_countChar,manageKey@countChar
  1787  0000AE  0E05               	movlw	5
  1788  0000B0  6FB6               	movwf	manageKey@note& (0+255),b
  1789  0000B2  0E03               	movlw	low _key4
  1790  0000B4  241E               	addwf	_rep^0,w,c
  1791  0000B6  6EF6               	movwf	tblptrl,c
  1792  0000B8  6AF7               	clrf	tblptrh,c
  1793  0000BA  0E1F               	movlw	high _key4
  1794  0000BC  D887               	call	PL48	;call to abstracted procedure
  1795  0000BE  EC19  F008         	call	_manageKey
  1796                           
  1797                           ;TSms.c: 79:                 break;
  1798  0000C2  D05D               	goto	l1170
  1799  0000C4                     l8040:
  1800                           
  1801                           ; BSR set to: 1
  1802                           ;TSms.c: 81:                 manageKey(key5[rep], countChar, 6);
  1803  0000C4  C020  F1B5         	movff	_countChar,manageKey@countChar
  1804  0000C8  0E06               	movlw	6
  1805  0000CA  6FB6               	movwf	manageKey@note& (0+255),b
  1806  0000CC  0EFF               	movlw	low _key5
  1807  0000CE  241E               	addwf	_rep^0,w,c
  1808  0000D0  6EF6               	movwf	tblptrl,c
  1809  0000D2  6AF7               	clrf	tblptrh,c
  1810  0000D4  0E1E               	movlw	high _key5
  1811  0000D6  D87A               	call	PL48	;call to abstracted procedure
  1812  0000D8  EC19  F008         	call	_manageKey
  1813                           
  1814                           ;TSms.c: 82:                 break;
  1815  0000DC  D050               	goto	l1170
  1816  0000DE                     l8042:
  1817                           
  1818                           ; BSR set to: 1
  1819                           ;TSms.c: 84:                 manageKey(key6[rep], countChar, 7);
  1820  0000DE  C020  F1B5         	movff	_countChar,manageKey@countChar
  1821  0000E2  0E07               	movlw	7
  1822  0000E4  6FB6               	movwf	manageKey@note& (0+255),b
  1823  0000E6  0EFB               	movlw	low _key6
  1824  0000E8  241E               	addwf	_rep^0,w,c
  1825  0000EA  6EF6               	movwf	tblptrl,c
  1826  0000EC  6AF7               	clrf	tblptrh,c
  1827  0000EE  0E1E               	movlw	high _key6
  1828  0000F0  D86D               	call	PL48	;call to abstracted procedure
  1829  0000F2  EC19  F008         	call	_manageKey
  1830                           
  1831                           ;TSms.c: 85:                 break;
  1832  0000F6  D043               	goto	l1170
  1833  0000F8                     l8044:
  1834                           
  1835                           ; BSR set to: 1
  1836                           ;TSms.c: 87:                 manageKey(key7[rep], countChar, 8);
  1837  0000F8  C020  F1B5         	movff	_countChar,manageKey@countChar
  1838  0000FC  0E08               	movlw	8
  1839  0000FE  6FB6               	movwf	manageKey@note& (0+255),b
  1840  000100  0EF2               	movlw	low _key7
  1841  000102  241E               	addwf	_rep^0,w,c
  1842  000104  6EF6               	movwf	tblptrl,c
  1843  000106  6AF7               	clrf	tblptrh,c
  1844  000108  0E1E               	movlw	high _key7
  1845  00010A  D860               	call	PL48	;call to abstracted procedure
  1846  00010C  EC19  F008         	call	_manageKey
  1847                           
  1848                           ;TSms.c: 88:                 break;
  1849  000110  D036               	goto	l1170
  1850  000112                     l8046:
  1851                           
  1852                           ; BSR set to: 1
  1853                           ;TSms.c: 90:                 manageKey(key8[rep], countChar, 10);
  1854  000112  C020  F1B5         	movff	_countChar,manageKey@countChar
  1855  000116  0E0A               	movlw	10
  1856  000118  6FB6               	movwf	manageKey@note& (0+255),b
  1857  00011A  0EF7               	movlw	low _key8
  1858  00011C  241E               	addwf	_rep^0,w,c
  1859  00011E  6EF6               	movwf	tblptrl,c
  1860  000120  6AF7               	clrf	tblptrh,c
  1861  000122  0E1E               	movlw	high _key8
  1862  000124  D853               	call	PL48	;call to abstracted procedure
  1863  000126  EC19  F008         	call	_manageKey
  1864                           
  1865                           ;TSms.c: 91:                 break;
  1866  00012A  D029               	goto	l1170
  1867  00012C                     l8048:
  1868                           
  1869                           ; BSR set to: 1
  1870                           ;TSms.c: 93:                 manageKey(key9[rep], countChar, 12);
  1871  00012C  C020  F1B5         	movff	_countChar,manageKey@countChar
  1872  000130  0E0C               	movlw	12
  1873  000132  6FB6               	movwf	manageKey@note& (0+255),b
  1874  000134  0EED               	movlw	low _key9
  1875  000136  241E               	addwf	_rep^0,w,c
  1876  000138  6EF6               	movwf	tblptrl,c
  1877  00013A  6AF7               	clrf	tblptrh,c
  1878  00013C  0E1E               	movlw	high _key9
  1879  00013E  D846               	call	PL48	;call to abstracted procedure
  1880  000140  EC19  F008         	call	_manageKey
  1881                           
  1882                           ;TSms.c: 94:                 break;
  1883  000144  D01C               	goto	l1170
  1884  000146                     l8052:
  1885  000146  0101               	movlb	1	; () banked
  1886  000148  51BA               	movf	manageKeySMS@key& (0+255),w,b
  1887  00014A  6FB8               	movwf	??_manageKeySMS& (0+255),b
  1888  00014C  6BB9               	clrf	(??_manageKeySMS+1)& (0+255),b
  1889                           
  1890                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1891                           ; Switch size 1, requested type "space"
  1892                           ; Number of cases is 1, Range of values is 0 to 0
  1893                           ; switch strategies available:
  1894                           ; Name         Instructions Cycles
  1895                           ; simple_byte            4     3 (average)
  1896                           ;	Chosen strategy is simple_byte
  1897  00014E  51B9               	movf	(??_manageKeySMS+1)& (0+255),w,b
  1898  000150  E116               	bnz	l1170
  1899                           
  1900                           ; BSR set to: 1
  1901                           ; Switch size 1, requested type "space"
  1902                           ; Number of cases is 10, Range of values is 48 to 57
  1903                           ; switch strategies available:
  1904                           ; Name         Instructions Cycles
  1905                           ; simple_byte           31    16 (average)
  1906                           ;	Chosen strategy is simple_byte
  1907  000152  51B8               	movf	??_manageKeySMS& (0+255),w,b
  1908  000154  0A30               	xorlw	48	; case 48
  1909  000156  E101 D77A          	bz	l8030
  1910  00015A  0A01               	xorlw	1	; case 49
  1911  00015C  E082               	bz	l8032
  1912  00015E  0A03               	xorlw	3	; case 50
  1913  000160  E08A               	bz	l8034
  1914  000162  0A01               	xorlw	1	; case 51
  1915  000164  E095               	bz	l8036
  1916  000166  0A07               	xorlw	7	; case 52
  1917  000168  E0A0               	bz	l8038
  1918  00016A  0A01               	xorlw	1	; case 53
  1919  00016C  E0AB               	bz	l8040
  1920  00016E  0A03               	xorlw	3	; case 54
  1921  000170  E0B6               	bz	l8042
  1922  000172  0A01               	xorlw	1	; case 55
  1923  000174  E0C1               	bz	l8044
  1924  000176  0A0F               	xorlw	15	; case 56
  1925  000178  E0CC               	bz	l8046
  1926  00017A  0A01               	xorlw	1	; case 57
  1927  00017C  E0D7               	bz	l8048
  1928  00017E                     l1170:
  1929                           
  1930                           ;TSms.c: 97:         prevKey = key;
  1931  00017E  C1BA  F01F         	movff	manageKeySMS@key,_prevKey
  1932                           
  1933                           ;TSms.c: 98:         TiResetTics(timer);
  1934  000182  5021               	movf	_timer@TSms$F1539^0,w,c
  1935  000184  EC1A  F00E         	call	_TiResetTics
  1936  000188                     l8056:
  1937                           
  1938                           ;TSms.c: 101:     if (key == '*') {
  1939  000188  0E2A               	movlw	42
  1940  00018A  0101               	movlb	1	; () banked
  1941  00018C  19BA               	xorwf	manageKeySMS@key& (0+255),w,b
  1942  00018E  E10B               	bnz	l8064
  1943                           
  1944                           ; BSR set to: 1
  1945                           ;TSms.c: 102:         countChar = 0;
  1946  000190  6A20               	clrf	_countChar^0,c
  1947                           
  1948                           ; BSR set to: 1
  1949                           ;TSms.c: 103:         prevKey = 10;
  1950  000192  0E0A               	movlw	10
  1951  000194  6E1F               	movwf	_prevKey^0,c
  1952                           
  1953                           ; BSR set to: 1
  1954                           ;TSms.c: 104:         manageKey(key, countChar, 15);
  1955  000196  C020  F1B5         	movff	_countChar,manageKey@countChar
  1956  00019A  0E0F               	movlw	15
  1957  00019C  6FB6               	movwf	manageKey@note& (0+255),b
  1958  00019E  51BA               	movf	manageKeySMS@key& (0+255),w,b
  1959  0001A0  EC19  F008         	call	_manageKey
  1960                           
  1961                           ;TSms.c: 105:     } else if (key == '#') {
  1962  0001A4  D00F               	goto	l1181
  1963  0001A6                     l8064:
  1964                           
  1965                           ; BSR set to: 1
  1966  0001A6  0E23               	movlw	35
  1967  0001A8  19BA               	xorwf	manageKeySMS@key& (0+255),w,b
  1968  0001AA  E10C               	bnz	l1181
  1969                           
  1970                           ; BSR set to: 1
  1971                           ;TSms.c: 106:         manageKey(key, countChar, 22);
  1972  0001AC  C020  F1B5         	movff	_countChar,manageKey@countChar
  1973  0001B0  0E16               	movlw	22
  1974  0001B2  6FB6               	movwf	manageKey@note& (0+255),b
  1975  0001B4  51BA               	movf	manageKeySMS@key& (0+255),w,b
  1976  0001B6  EC19  F008         	call	_manageKey
  1977                           
  1978                           ;TSms.c: 107:         if (countChar == 3) {
  1979  0001BA  0E03               	movlw	3
  1980  0001BC  1820               	xorwf	_countChar^0,w,c
  1981  0001BE  E102               	bnz	l1181
  1982                           
  1983                           ;TSms.c: 108:             initSMS();
  1984  0001C0  ECC1  F00D         	call	_initSMS	;wreg free
  1985  0001C4                     l1181:
  1986                           
  1987                           ;TSms.c: 112:     modifyHora(key);
  1988  0001C4  0101               	movlb	1	; () banked
  1989  0001C6  51BA               	movf	manageKeySMS@key& (0+255),w,b
  1990  0001C8  EF2A  F006         	goto	_modifyHora
  1991  0001CC                     __end_of_manageKeySMS:
  1992                           	callstack 0
  1993  0001CC                     PL48:
  1994                           	callstack 18
  1995  0001CC  22F7               	addwfc	tblptrh,f,c
  1996  0001CE                     	if	0	;There are less than 3 active tblptr bytes
  1997  0001CE                     	endif
  1998  0001CE  0008               	tblrd		*
  1999  0001D0  50F5               	movf	tablat,w,c
  2000  0001D2  0012               	return	
  2001  0001D4                     __end_ofPL48:
  2002                           	callstack 0
  2003  0001D4                     PL102:
  2004                           	callstack 18
  2005  0001D4  6ED9               	movwf	fsr2l,c
  2006  0001D6  6ADA               	clrf	fsr2h,c
  2007  0001D8  50DF               	movf	indf2,w,c
  2008  0001DA  0012               	return	
  2009  0001DC                     __end_ofPL102:
  2010                           	callstack 0
  2011                           
  2012 ;; *************** function _modifyHora *****************
  2013 ;; Defined at:
  2014 ;;		line 36 in file "TCentral.c"
  2015 ;; Parameters:    Size  Location     Type
  2016 ;;  num             1    wreg     unsigned char 
  2017 ;; Auto vars:     Size  Location     Type
  2018 ;;  num             1    7[BANK1 ] unsigned char 
  2019 ;; Return value:  Size  Location     Type
  2020 ;;                  1    wreg      void 
  2021 ;; Registers used:
  2022 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2023 ;; Tracked objects:
  2024 ;;		On entry : 3F/1
  2025 ;;		On exit  : 0/0
  2026 ;;		Unchanged: 0/0
  2027 ;; Data sizes:     COMRAM   BANK0   BANK1
  2028 ;;      Params:         0       0       0
  2029 ;;      Locals:         0       0       1
  2030 ;;      Temps:          0       0       2
  2031 ;;      Totals:         0       0       3
  2032 ;;Total ram usage:        3 bytes
  2033 ;; Hardware stack levels used: 1
  2034 ;; Hardware stack levels required when called: 9
  2035 ;; This function calls:
  2036 ;;		_LcGotoXY
  2037 ;;		_changeMode
  2038 ;;		_newHora
  2039 ;;		_printLetter
  2040 ;; This function is called by:
  2041 ;;		_manageKeySMS
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           	psect	text4
  2046  000C54                     __ptext4:
  2047                           	callstack 0
  2048  000C54                     _modifyHora:
  2049                           	callstack 19
  2050                           
  2051                           ;incstack = 0
  2052                           ;modifyHora@num stored from wreg
  2053  000C54  6FB7               	movwf	modifyHora@num& (0+255),b
  2054                           
  2055                           ;TCentral.c: 37:     LcGotoXY(0,1);
  2056  000C56  EC54  F00C         	call	PL96	;call to abstracted procedure
  2057  000C5A  ECE5  F006         	call	_LcGotoXY
  2058                           
  2059                           ;TCentral.c: 38:     if (mode == 4) {
  2060  000C5E  0E04               	movlw	4
  2061  000C60  1845               	xorwf	_mode^0,w,c
  2062  000C62  A4D8               	btfss	status,2,c
  2063  000C64  0012               	return	
  2064                           
  2065                           ;TCentral.c: 39:         if (num != '*' && num != '#') {
  2066  000C66  0E2A               	movlw	42
  2067  000C68  0101               	movlb	1	; () banked
  2068  000C6A  19B7               	xorwf	modifyHora@num& (0+255),w,b
  2069  000C6C  E027               	bz	l7662
  2070                           
  2071                           ; BSR set to: 1
  2072  000C6E  0E23               	movlw	35
  2073  000C70  19B7               	xorwf	modifyHora@num& (0+255),w,b
  2074  000C72  E024               	bz	l7662
  2075                           
  2076                           ; BSR set to: 1
  2077                           ;TCentral.c: 40:             if (count+1 < 6) {
  2078  000C74  5046               	movf	_count^0,w,c
  2079  000C76  D84D               	call	PL30	;call to abstracted procedure
  2080  000C78  BFB6               	btfsc	(??_modifyHora+1)& (0+255),7,b
  2081  000C7A  D006               	goto	u6430
  2082  000C7C  51B6               	movf	(??_modifyHora+1)& (0+255),w,b
  2083  000C7E  E148               	bnz	l419
  2084  000C80  0E06               	movlw	6
  2085  000C82  5DB5               	subwf	??_modifyHora& (0+255),w,b
  2086  000C84  B0D8               	btfsc	status,0,c
  2087  000C86  0012               	return	
  2088  000C88                     u6430:
  2089                           
  2090                           ; BSR set to: 1
  2091                           ;TCentral.c: 41:                 t[count] = num;
  2092  000C88  5046               	movf	_count^0,w,c
  2093  000C8A  0F06               	addlw	low _t
  2094  000C8C  6ED9               	movwf	fsr2l,c
  2095  000C8E  6ADA               	clrf	fsr2h,c
  2096  000C90  C1B7  FFDF         	movff	modifyHora@num,indf2
  2097                           
  2098                           ; BSR set to: 1
  2099                           ;TCentral.c: 42:                 printLetter(num, count+1);
  2100  000C94  2846               	incf	_count^0,w,c
  2101  000C96  6E71               	movwf	printLetter@posY^0,c
  2102  000C98  51B7               	movf	modifyHora@num& (0+255),w,b
  2103  000C9A  ECFF  F00D         	call	_printLetter
  2104                           
  2105                           ;TCentral.c: 43:                 if (count+1 == 2) {
  2106  000C9E  5046               	movf	_count^0,w,c
  2107  000CA0  0101               	movlb	1	; () banked
  2108  000CA2  D837               	call	PL30	;call to abstracted procedure
  2109  000CA4  0E02               	movlw	2
  2110  000CA6  19B5               	xorwf	??_modifyHora& (0+255),w,b
  2111  000CA8  11B6               	iorwf	(??_modifyHora+1)& (0+255),w,b
  2112  000CAA  E106               	bnz	l7660
  2113                           
  2114                           ; BSR set to: 1
  2115                           ;TCentral.c: 44:                     count++;
  2116  000CAC  2A46               	incf	_count^0,f,c
  2117                           
  2118                           ; BSR set to: 1
  2119                           ;TCentral.c: 45:                     printLetter(':', count+1);
  2120  000CAE  2846               	incf	_count^0,w,c
  2121  000CB0  6E71               	movwf	printLetter@posY^0,c
  2122  000CB2  0E3A               	movlw	58
  2123  000CB4  ECFF  F00D         	call	_printLetter
  2124  000CB8                     l7660:
  2125                           
  2126                           ;TCentral.c: 47:                 count++;
  2127  000CB8  2A46               	incf	_count^0,f,c
  2128  000CBA  0012               	return	
  2129  000CBC                     l7662:
  2130                           
  2131                           ; BSR set to: 1
  2132  000CBC  0E23               	movlw	35
  2133  000CBE  19B7               	xorwf	modifyHora@num& (0+255),w,b
  2134  000CC0  A4D8               	btfss	status,2,c
  2135  000CC2  0012               	return	
  2136                           
  2137                           ; BSR set to: 1
  2138  000CC4  5046               	movf	_count^0,w,c
  2139  000CC6  D825               	call	PL30	;call to abstracted procedure
  2140  000CC8  0E06               	movlw	6
  2141  000CCA  19B5               	xorwf	??_modifyHora& (0+255),w,b
  2142  000CCC  11B6               	iorwf	(??_modifyHora+1)& (0+255),w,b
  2143  000CCE  A4D8               	btfss	status,2,c
  2144  000CD0  0012               	return	
  2145                           
  2146                           ; BSR set to: 1
  2147                           ;TCentral.c: 50:             newHora(0, t[0], 1);
  2148  000CD2  C006  F06B         	movff	_t,newHora@hora
  2149  000CD6  0E01               	movlw	1
  2150  000CD8  6E6C               	movwf	newHora@mod^0,c
  2151  000CDA  0E00               	movlw	0
  2152  000CDC  EC81  F00D         	call	_newHora
  2153                           
  2154                           ;TCentral.c: 51:             newHora(1, t[1], 1);
  2155  000CE0  C007  F06B         	movff	_t+1,newHora@hora
  2156  000CE4  0E01               	movlw	1
  2157  000CE6  6E6C               	movwf	newHora@mod^0,c
  2158  000CE8  EC81  F00D         	call	_newHora
  2159                           
  2160                           ;TCentral.c: 52:             newHora(3, t[3], 1);
  2161  000CEC  C009  F06B         	movff	_t+3,newHora@hora
  2162  000CF0  0E01               	movlw	1
  2163  000CF2  6E6C               	movwf	newHora@mod^0,c
  2164  000CF4  0E03               	movlw	3
  2165  000CF6  EC81  F00D         	call	_newHora
  2166                           
  2167                           ;TCentral.c: 53:             newHora(4, t[4], 1);
  2168  000CFA  C00A  F06B         	movff	_t+4,newHora@hora
  2169  000CFE  0E01               	movlw	1
  2170  000D00  6E6C               	movwf	newHora@mod^0,c
  2171  000D02  0E04               	movlw	4
  2172  000D04  EC81  F00D         	call	_newHora
  2173                           
  2174                           ;TCentral.c: 55:             changeMode(1);
  2175  000D08  0E01               	movlw	1
  2176  000D0A  EC08  F00E         	call	_changeMode
  2177                           
  2178                           ;TCentral.c: 56:             count = 0;
  2179  000D0E  6A46               	clrf	_count^0,c
  2180  000D10                     l419:
  2181  000D10  0012               	return		;funcret
  2182  000D12                     __end_of_modifyHora:
  2183                           	callstack 0
  2184  000D12                     PL30:
  2185                           	callstack 19
  2186  000D12  6FB5               	movwf	??_modifyHora& (0+255),b
  2187  000D14  6BB6               	clrf	(??_modifyHora+1)& (0+255),b
  2188  000D16  2BB5               	incf	??_modifyHora& (0+255),f,b
  2189  000D18  0E00               	movlw	0
  2190  000D1A  23B6               	addwfc	(??_modifyHora+1)& (0+255),f,b
  2191  000D1C  0C00               	retlw	0
  2192  000D1E                     __end_ofPL30:
  2193                           	callstack 0
  2194                           
  2195 ;; *************** function _manageLetter *****************
  2196 ;; Defined at:
  2197 ;;		line 39 in file "TSms.c"
  2198 ;; Parameters:    Size  Location     Type
  2199 ;;  key             1    wreg     unsigned char 
  2200 ;;  prevKey         1   18[COMRAM] unsigned char 
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;  key             1   19[COMRAM] unsigned char 
  2203 ;; Return value:  Size  Location     Type
  2204 ;;                  1    wreg      void 
  2205 ;; Registers used:
  2206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2207 ;; Tracked objects:
  2208 ;;		On entry : 3F/1
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMRAM   BANK0   BANK1
  2212 ;;      Params:         1       0       0
  2213 ;;      Locals:         1       0       0
  2214 ;;      Temps:          0       0       0
  2215 ;;      Totals:         2       0       0
  2216 ;;Total ram usage:        2 bytes
  2217 ;; Hardware stack levels used: 1
  2218 ;; Hardware stack levels required when called: 4
  2219 ;; This function calls:
  2220 ;;		_TiGetTics
  2221 ;;		_manageRepeat
  2222 ;; This function is called by:
  2223 ;;		_manageKeySMS
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           	psect	text5
  2228  001570                     __ptext5:
  2229                           	callstack 0
  2230  001570                     _manageLetter:
  2231                           	callstack 24
  2232                           
  2233                           ;incstack = 0
  2234                           ;manageLetter@key stored from wreg
  2235  001570  6E6D               	movwf	manageLetter@key^0,c
  2236                           
  2237                           ;TSms.c: 40:     if (key != '#' && key != '*') {
  2238  001572  0E23               	movlw	35
  2239  001574  186D               	xorwf	manageLetter@key^0,w,c
  2240  001576  B4D8               	btfsc	status,2,c
  2241  001578  0012               	return	
  2242  00157A  0E2A               	movlw	42
  2243  00157C  186D               	xorwf	manageLetter@key^0,w,c
  2244  00157E  B4D8               	btfsc	status,2,c
  2245  001580  0012               	return	
  2246                           
  2247                           ;TSms.c: 41:         if(key == prevKey){
  2248  001582  506C               	movf	manageLetter@prevKey^0,w,c
  2249  001584  186D               	xorwf	manageLetter@key^0,w,c
  2250  001586  E11C               	bnz	l7742
  2251                           
  2252                           ;TSms.c: 42:             if (TiGetTics(timer) <= 4000){
  2253  001588  5021               	movf	_timer@TSms$F1539^0,w,c
  2254  00158A  EC57  F00C         	call	_TiGetTics
  2255  00158E  0EA1               	movlw	161
  2256  001590  5C65               	subwf	?_TiGetTics^0,w,c
  2257  001592  0E0F               	movlw	15
  2258  001594  5866               	subwfb	(?_TiGetTics+1)^0,w,c
  2259  001596  E214               	bc	l7742
  2260                           
  2261                           ;TSms.c: 43:                 if (key == '7' || key == '9') {
  2262  001598  0E37               	movlw	55
  2263  00159A  186D               	xorwf	manageLetter@key^0,w,c
  2264  00159C  E003               	bz	u6650
  2265  00159E  0E39               	movlw	57
  2266  0015A0  186D               	xorwf	manageLetter@key^0,w,c
  2267  0015A2  E107               	bnz	l7740
  2268  0015A4                     u6650:
  2269                           
  2270                           ;TSms.c: 45:                     rep = manageRepeat(rep, 4);
  2271  0015A4  0E04               	movlw	4
  2272  0015A6  6E65               	movwf	manageRepeat@max^0,c
  2273  0015A8  501E               	movf	_rep^0,w,c
  2274  0015AA  EC23  F00E         	call	_manageRepeat
  2275  0015AE  6E1E               	movwf	_rep^0,c
  2276                           
  2277                           ;TSms.c: 46:                 } else {
  2278  0015B0  0012               	return	
  2279  0015B2                     l7740:
  2280                           
  2281                           ;TSms.c: 47:                     rep = manageRepeat(rep, 3);
  2282  0015B2  0E03               	movlw	3
  2283  0015B4  6E65               	movwf	manageRepeat@max^0,c
  2284  0015B6  501E               	movf	_rep^0,w,c
  2285  0015B8  EC23  F00E         	call	_manageRepeat
  2286  0015BC  6E1E               	movwf	_rep^0,c
  2287  0015BE  0012               	return	
  2288  0015C0                     l7742:
  2289                           
  2290                           ;TSms.c: 50:               countChar++;
  2291  0015C0  2A20               	incf	_countChar^0,f,c
  2292                           
  2293                           ;TSms.c: 51:               rep = 0;
  2294  0015C2  6A1E               	clrf	_rep^0,c
  2295  0015C4  0012               	return		;funcret
  2296  0015C6                     __end_of_manageLetter:
  2297                           	callstack 0
  2298                           
  2299 ;; *************** function _manageRepeat *****************
  2300 ;; Defined at:
  2301 ;;		line 29 in file "TSms.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;  rep             1    wreg     unsigned char 
  2304 ;;  max             1   11[COMRAM] unsigned char 
  2305 ;; Auto vars:     Size  Location     Type
  2306 ;;  rep             1   12[COMRAM] unsigned char 
  2307 ;; Return value:  Size  Location     Type
  2308 ;;                  1    wreg      unsigned char 
  2309 ;; Registers used:
  2310 ;;		wreg, status,2, status,0
  2311 ;; Tracked objects:
  2312 ;;		On entry : 0/1
  2313 ;;		On exit  : 0/0
  2314 ;;		Unchanged: 0/0
  2315 ;; Data sizes:     COMRAM   BANK0   BANK1
  2316 ;;      Params:         1       0       0
  2317 ;;      Locals:         1       0       0
  2318 ;;      Temps:          0       0       0
  2319 ;;      Totals:         2       0       0
  2320 ;;Total ram usage:        2 bytes
  2321 ;; Hardware stack levels used: 1
  2322 ;; Hardware stack levels required when called: 3
  2323 ;; This function calls:
  2324 ;;		Nothing
  2325 ;; This function is called by:
  2326 ;;		_manageLetter
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           	psect	text6
  2331  001C46                     __ptext6:
  2332                           	callstack 0
  2333  001C46                     _manageRepeat:
  2334                           	callstack 24
  2335                           
  2336                           ;incstack = 0
  2337                           ;manageRepeat@rep stored from wreg
  2338  001C46  6E66               	movwf	manageRepeat@rep^0,c
  2339                           
  2340                           ;TSms.c: 30:     if (rep == max) {
  2341  001C48  1865               	xorwf	manageRepeat@max^0,w,c
  2342  001C4A  E102               	bnz	l7626
  2343                           
  2344                           ;TSms.c: 31:         rep = 0;
  2345  001C4C  6A66               	clrf	manageRepeat@rep^0,c
  2346                           
  2347                           ;TSms.c: 32:     } else {
  2348  001C4E  D001               	goto	l7628
  2349  001C50                     l7626:
  2350                           
  2351                           ;TSms.c: 33:         rep++;
  2352  001C50  2A66               	incf	manageRepeat@rep^0,f,c
  2353  001C52                     l7628:
  2354                           
  2355                           ;TSms.c: 35:     return rep;
  2356  001C52  5066               	movf	manageRepeat@rep^0,w,c
  2357  001C54  0012               	return		;funcret
  2358  001C56                     __end_of_manageRepeat:
  2359                           	callstack 0
  2360                           
  2361 ;; *************** function _manageKey *****************
  2362 ;; Defined at:
  2363 ;;		line 91 in file "TCentral.c"
  2364 ;; Parameters:    Size  Location     Type
  2365 ;;  key             1    wreg     unsigned char 
  2366 ;;  countChar       1    5[BANK1 ] unsigned char 
  2367 ;;  note            1    6[BANK1 ] unsigned char 
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;  key             1    7[BANK1 ] unsigned char 
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  1    wreg      void 
  2372 ;; Registers used:
  2373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2374 ;; Tracked objects:
  2375 ;;		On entry : 3F/1
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMRAM   BANK0   BANK1
  2379 ;;      Params:         0       0       2
  2380 ;;      Locals:         0       0       1
  2381 ;;      Temps:          0       0       0
  2382 ;;      Totals:         0       0       3
  2383 ;;Total ram usage:        3 bytes
  2384 ;; Hardware stack levels used: 1
  2385 ;; Hardware stack levels required when called: 10
  2386 ;; This function calls:
  2387 ;;		_changeMode
  2388 ;;		_cleanPortName
  2389 ;;		_enterMode
  2390 ;;		_enviaDada
  2391 ;;		_initHora
  2392 ;;		_pressSound
  2393 ;;		_printLetter
  2394 ;;		_saveLetter
  2395 ;;		_selectSound
  2396 ;;		_writeName
  2397 ;; This function is called by:
  2398 ;;		_manageKeySMS
  2399 ;; This function uses a non-reentrant model
  2400 ;;
  2401                           
  2402                           	psect	text7
  2403  001032                     __ptext7:
  2404                           	callstack 0
  2405  001032                     _manageKey:
  2406                           	callstack 18
  2407                           
  2408                           ;incstack = 0
  2409                           ;manageKey@key stored from wreg
  2410  001032  6FB7               	movwf	manageKey@key& (0+255),b
  2411                           
  2412                           ;TCentral.c: 92:     pressSound(note);
  2413  001034  0101               	movlb	1	; () banked
  2414  001036  51B6               	movf	manageKey@note& (0+255),w,b
  2415  001038  EC9D  F00D         	call	_pressSound
  2416                           
  2417                           ;TCentral.c: 97:     if (key == '*') {
  2418  00103C  0E2A               	movlw	42
  2419  00103E  0101               	movlb	1	; () banked
  2420  001040  19B7               	xorwf	manageKey@key& (0+255),w,b
  2421  001042  E10C               	bnz	l7686
  2422                           
  2423                           ; BSR set to: 1
  2424                           ;TCentral.c: 99:         if (mode == 0) {
  2425  001044  5045               	movf	_mode^0,w,c
  2426  001046  E102               	bnz	l7680
  2427                           
  2428                           ; BSR set to: 1
  2429                           ;TCentral.c: 100:             cleanPortName();
  2430  001048  EF3C  F00C         	goto	_cleanPortName	;wreg free
  2431  00104C                     l7680:
  2432                           
  2433                           ; BSR set to: 1
  2434  00104C  0E02               	movlw	2
  2435  00104E  6445               	cpfsgt	_mode^0,c
  2436  001050  0C02               	retlw	2
  2437                           
  2438                           ; BSR set to: 1
  2439                           ;TCentral.c: 102:             changeMode(1);
  2440  001052  0E01               	movlw	1
  2441  001054  EC08  F00E         	call	_changeMode
  2442                           
  2443                           ;TCentral.c: 103:             count = 0;
  2444  001058  6A46               	clrf	_count^0,c
  2445                           
  2446                           ; BSR set to: 1
  2447                           ;TCentral.c: 106:     } else if (key == '#') {
  2448  00105A  0012               	return	
  2449  00105C                     l7686:
  2450                           
  2451                           ; BSR set to: 1
  2452  00105C  0E23               	movlw	35
  2453  00105E  19B7               	xorwf	manageKey@key& (0+255),w,b
  2454  001060  E11E               	bnz	l7706
  2455                           
  2456                           ; BSR set to: 1
  2457                           ;TCentral.c: 108:         if ((countChar == 3 || countChar == 4) && mode == 0) {
  2458  001062  0E03               	movlw	3
  2459  001064  19B5               	xorwf	manageKey@countChar& (0+255),w,b
  2460  001066  E003               	bz	u6520
  2461                           
  2462                           ; BSR set to: 1
  2463  001068  0E04               	movlw	4
  2464  00106A  19B5               	xorwf	manageKey@countChar& (0+255),w,b
  2465  00106C  E10D               	bnz	l7698
  2466  00106E                     u6520:
  2467                           
  2468                           ; BSR set to: 1
  2469  00106E  5045               	movf	_mode^0,w,c
  2470  001070  E10B               	bnz	l7698
  2471                           
  2472                           ; BSR set to: 1
  2473                           ;TCentral.c: 109:             enviaDada(0, &portName);
  2474  001072  0E56               	movlw	low _portName
  2475  001074  6E65               	movwf	enviaDada@info^0,c
  2476  001076  0E00               	movlw	0
  2477  001078  EC81  F007         	call	_enviaDada
  2478                           
  2479                           ;TCentral.c: 110:             writeName(&portName);
  2480  00107C  0E56               	movlw	low _portName
  2481  00107E  6E65               	movwf	writeName@towerName^0,c
  2482  001080  EC37  F00D         	call	_writeName	;wreg free
  2483                           
  2484                           ; BSR set to: 0
  2485                           ;TCentral.c: 111:             initHora();
  2486  001084  EFA4  F00B         	goto	_initHora	;wreg free
  2487  001088                     l7698:
  2488                           
  2489                           ; BSR set to: 1
  2490  001088  0445               	decf	_mode^0,w,c
  2491  00108A  E102               	bnz	l7702
  2492                           
  2493                           ; BSR set to: 1
  2494                           ;TCentral.c: 113:             enterMode();
  2495  00108C  EFBF  F009         	goto	_enterMode	;wreg free
  2496  001090                     l7702:
  2497                           
  2498                           ; BSR set to: 1
  2499  001090  0E03               	movlw	3
  2500  001092  1845               	xorwf	_mode^0,w,c
  2501  001094  A4D8               	btfss	status,2,c
  2502  001096  0012               	return	
  2503                           
  2504                           ; BSR set to: 1
  2505                           ;TCentral.c: 115:             selectSound(n);
  2506  001098  5043               	movf	_n^0,w,c
  2507  00109A  EFF6  F00D         	goto	_selectSound
  2508  00109E                     l7706:
  2509                           
  2510                           ; BSR set to: 1
  2511                           ;TCentral.c: 119:         if (mode == 0 && countChar < 4) {
  2512  00109E  5045               	movf	_mode^0,w,c
  2513  0010A0  A4D8               	btfss	status,2,c
  2514  0010A2  0012               	return	
  2515                           
  2516                           ; BSR set to: 1
  2517  0010A4  0E04               	movlw	4
  2518  0010A6  61B5               	cpfslt	manageKey@countChar& (0+255),b
  2519  0010A8  0C04               	retlw	4
  2520                           
  2521                           ; BSR set to: 1
  2522                           ;TCentral.c: 120:             saveLetter(key, countChar);
  2523  0010AA  C1B5  F065         	movff	manageKey@countChar,saveLetter@countChar
  2524  0010AE  51B7               	movf	manageKey@key& (0+255),w,b
  2525  0010B0  EC2B  F00E         	call	_saveLetter
  2526                           
  2527                           ;TCentral.c: 121:             printLetter(key, countChar);
  2528  0010B4  C1B5  F071         	movff	manageKey@countChar,printLetter@posY
  2529  0010B8  0101               	movlb	1	; () banked
  2530  0010BA  51B7               	movf	manageKey@key& (0+255),w,b
  2531  0010BC  EFFF  F00D         	goto	_printLetter
  2532  0010C0                     __end_of_manageKey:
  2533                           	callstack 0
  2534                           
  2535 ;; *************** function _writeName *****************
  2536 ;; Defined at:
  2537 ;;		line 43 in file "TMenu.c"
  2538 ;; Parameters:    Size  Location     Type
  2539 ;;  towerName       1   11[COMRAM] PTR unsigned char 
  2540 ;;		 -> portName(4), 
  2541 ;; Auto vars:     Size  Location     Type
  2542 ;;		None
  2543 ;; Return value:  Size  Location     Type
  2544 ;;                  1    wreg      void 
  2545 ;; Registers used:
  2546 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2547 ;; Tracked objects:
  2548 ;;		On entry : 0/1
  2549 ;;		On exit  : 3F/0
  2550 ;;		Unchanged: 0/0
  2551 ;; Data sizes:     COMRAM   BANK0   BANK1
  2552 ;;      Params:         1       0       0
  2553 ;;      Locals:         0       0       0
  2554 ;;      Temps:          0       0       0
  2555 ;;      Totals:         1       0       0
  2556 ;;Total ram usage:        1 bytes
  2557 ;; Hardware stack levels used: 1
  2558 ;; Hardware stack levels required when called: 3
  2559 ;; This function calls:
  2560 ;;		Nothing
  2561 ;; This function is called by:
  2562 ;;		_manageKey
  2563 ;; This function uses a non-reentrant model
  2564 ;;
  2565                           
  2566                           	psect	text8
  2567  001A6E                     __ptext8:
  2568                           	callstack 0
  2569  001A6E                     _writeName:
  2570                           	callstack 24
  2571                           
  2572                           ;TMenu.c: 44:     END_MSG[8] = towerName[0];
  2573                           
  2574                           ;incstack = 0
  2575  001A6E  5065               	movf	writeName@towerName^0,w,c
  2576  001A70  6ED9               	movwf	fsr2l,c
  2577  001A72  6ADA               	clrf	fsr2h,c
  2578  001A74  50DF               	movf	indf2,w,c
  2579  001A76  0100               	movlb	0	; () banked
  2580  001A78  6F90               	movwf	(_END_MSG+8)& (0+255),b
  2581                           
  2582                           ; BSR set to: 0
  2583                           ;TMenu.c: 45:     END_MSG[9] = towerName[1];
  2584  001A7A  5065               	movf	writeName@towerName^0,w,c
  2585  001A7C  ECBC  F007         	call	PL54	;call to abstracted procedure
  2586  001A80  6F91               	movwf	(_END_MSG+9)& (0+255),b
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;TMenu.c: 46:     END_MSG[10] = towerName[2];
  2590  001A82  5065               	movf	writeName@towerName^0,w,c
  2591  001A84  ECC7  F007         	call	PL68	;call to abstracted procedure
  2592  001A88  6F92               	movwf	(_END_MSG+10)& (0+255),b
  2593                           
  2594                           ; BSR set to: 0
  2595  001A8A  0012               	return		;funcret
  2596  001A8C                     __end_of_writeName:
  2597                           	callstack 0
  2598                           
  2599 ;; *************** function _selectSound *****************
  2600 ;; Defined at:
  2601 ;;		line 44 in file "TSIO.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;  ind             1    wreg     unsigned char 
  2604 ;; Auto vars:     Size  Location     Type
  2605 ;;  ind             1   11[COMRAM] unsigned char 
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  1    wreg      void 
  2608 ;; Registers used:
  2609 ;;		wreg, status,2
  2610 ;; Tracked objects:
  2611 ;;		On entry : 3F/1
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMRAM   BANK0   BANK1
  2615 ;;      Params:         0       0       0
  2616 ;;      Locals:         1       0       0
  2617 ;;      Temps:          0       0       0
  2618 ;;      Totals:         1       0       0
  2619 ;;Total ram usage:        1 bytes
  2620 ;; Hardware stack levels used: 1
  2621 ;; Hardware stack levels required when called: 3
  2622 ;; This function calls:
  2623 ;;		Nothing
  2624 ;; This function is called by:
  2625 ;;		_manageKey
  2626 ;; This function uses a non-reentrant model
  2627 ;;
  2628                           
  2629                           	psect	text9
  2630  001BEC                     __ptext9:
  2631                           	callstack 0
  2632  001BEC                     _selectSound:
  2633                           	callstack 24
  2634                           
  2635                           ; BSR set to: 0
  2636                           ;incstack = 0
  2637                           ;selectSound@ind stored from wreg
  2638  001BEC  6E65               	movwf	selectSound@ind^0,c
  2639                           
  2640                           ;TSIO.c: 45:     action = 'P';
  2641  001BEE  0E50               	movlw	80
  2642  001BF0  6E29               	movwf	_action^0,c
  2643                           
  2644                           ;TSIO.c: 46:     s = ind;
  2645  001BF2  C065  F026         	movff	selectSound@ind,_s
  2646                           
  2647                           ;TSIO.c: 47:     send = 1;
  2648  001BF6  D000               	goto	PL94	;call to abstracted procedure
  2649  001BF8                     __end_of_selectSound:
  2650                           	callstack 0
  2651  001BF8                     PL94:
  2652                           	callstack 25
  2653  001BF8  0E01               	movlw	1
  2654  001BFA  6E2A               	movwf	_send^0,c
  2655  001BFC  0C01               	retlw	1	;funcret
  2656  001BFE                     __end_ofPL94:
  2657                           	callstack 0
  2658                           
  2659 ;; *************** function _saveLetter *****************
  2660 ;; Defined at:
  2661 ;;		line 27 in file "TCentral.c"
  2662 ;; Parameters:    Size  Location     Type
  2663 ;;  key             1    wreg     unsigned char 
  2664 ;;  countChar       1   11[COMRAM] unsigned char 
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;  key             1   12[COMRAM] unsigned char 
  2667 ;; Return value:  Size  Location     Type
  2668 ;;                  1    wreg      void 
  2669 ;; Registers used:
  2670 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2671 ;; Tracked objects:
  2672 ;;		On entry : 3F/1
  2673 ;;		On exit  : 0/0
  2674 ;;		Unchanged: 0/0
  2675 ;; Data sizes:     COMRAM   BANK0   BANK1
  2676 ;;      Params:         1       0       0
  2677 ;;      Locals:         1       0       0
  2678 ;;      Temps:          0       0       0
  2679 ;;      Totals:         2       0       0
  2680 ;;Total ram usage:        2 bytes
  2681 ;; Hardware stack levels used: 1
  2682 ;; Hardware stack levels required when called: 3
  2683 ;; This function calls:
  2684 ;;		Nothing
  2685 ;; This function is called by:
  2686 ;;		_manageKey
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690                           	psect	text10
  2691  001C56                     __ptext10:
  2692                           	callstack 0
  2693  001C56                     _saveLetter:
  2694                           	callstack 24
  2695                           
  2696                           ;incstack = 0
  2697                           ;saveLetter@key stored from wreg
  2698  001C56  6E66               	movwf	saveLetter@key^0,c
  2699                           
  2700                           ;TCentral.c: 28:     portName[countChar-1] = key;
  2701  001C58  5065               	movf	saveLetter@countChar^0,w,c
  2702  001C5A  0F55               	addlw	low (_portName+255)
  2703  001C5C  6ED9               	movwf	fsr2l,c
  2704  001C5E  6ADA               	clrf	fsr2h,c
  2705  001C60  C066  FFDF         	movff	saveLetter@key,indf2
  2706  001C64  0012               	return		;funcret
  2707  001C66                     __end_of_saveLetter:
  2708                           	callstack 0
  2709                           
  2710 ;; *************** function _printLetter *****************
  2711 ;; Defined at:
  2712 ;;		line 80 in file "TMenu.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;  finalKey        1    wreg     unsigned char 
  2715 ;;  posY            1   23[COMRAM] unsigned char 
  2716 ;; Auto vars:     Size  Location     Type
  2717 ;;  finalKey        1   24[COMRAM] unsigned char 
  2718 ;; Return value:  Size  Location     Type
  2719 ;;                  1    wreg      void 
  2720 ;; Registers used:
  2721 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2722 ;; Tracked objects:
  2723 ;;		On entry : 3F/1
  2724 ;;		On exit  : 0/0
  2725 ;;		Unchanged: 0/0
  2726 ;; Data sizes:     COMRAM   BANK0   BANK1
  2727 ;;      Params:         1       0       0
  2728 ;;      Locals:         1       0       0
  2729 ;;      Temps:          0       0       0
  2730 ;;      Totals:         2       0       0
  2731 ;;Total ram usage:        2 bytes
  2732 ;; Hardware stack levels used: 1
  2733 ;; Hardware stack levels required when called: 7
  2734 ;; This function calls:
  2735 ;;		_LcGotoXY
  2736 ;;		_LcPutChar
  2737 ;; This function is called by:
  2738 ;;		_modifyHora
  2739 ;;		_manageKey
  2740 ;; This function uses a non-reentrant model
  2741 ;;
  2742                           
  2743                           	psect	text11
  2744  001BFE                     __ptext11:
  2745                           	callstack 0
  2746  001BFE                     _printLetter:
  2747                           	callstack 20
  2748                           
  2749                           ;incstack = 0
  2750                           ;printLetter@finalKey stored from wreg
  2751  001BFE  6E72               	movwf	printLetter@finalKey^0,c
  2752                           
  2753                           ;TMenu.c: 81:     LcGotoXY(posY - 1, 1);
  2754  001C00  0E01               	movlw	1
  2755  001C02  6E6D               	movwf	LcGotoXY@Row^0,c
  2756  001C04  0471               	decf	printLetter@posY^0,w,c
  2757  001C06  ECE5  F006         	call	_LcGotoXY
  2758                           
  2759                           ;TMenu.c: 82:     LcPutChar(finalKey);
  2760  001C0A  5072               	movf	printLetter@finalKey^0,w,c
  2761  001C0C  EFE3  F00A         	goto	_LcPutChar
  2762  001C10                     __end_of_printLetter:
  2763                           	callstack 0
  2764                           
  2765 ;; *************** function _pressSound *****************
  2766 ;; Defined at:
  2767 ;;		line 28 in file "TSound.c"
  2768 ;; Parameters:    Size  Location     Type
  2769 ;;  tono            1    wreg     unsigned char 
  2770 ;; Auto vars:     Size  Location     Type
  2771 ;;  tono            1   12[COMRAM] unsigned char 
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  1    wreg      void 
  2774 ;; Registers used:
  2775 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2776 ;; Tracked objects:
  2777 ;;		On entry : 3F/1
  2778 ;;		On exit  : 0/0
  2779 ;;		Unchanged: 0/0
  2780 ;; Data sizes:     COMRAM   BANK0   BANK1
  2781 ;;      Params:         0       0       0
  2782 ;;      Locals:         1       0       0
  2783 ;;      Temps:          0       0       0
  2784 ;;      Totals:         1       0       0
  2785 ;;Total ram usage:        1 bytes
  2786 ;; Hardware stack levels used: 1
  2787 ;; Hardware stack levels required when called: 4
  2788 ;; This function calls:
  2789 ;;		_TiResetTics
  2790 ;; This function is called by:
  2791 ;;		_manageKey
  2792 ;; This function uses a non-reentrant model
  2793 ;;
  2794                           
  2795                           	psect	text12
  2796  001B3A                     __ptext12:
  2797                           	callstack 0
  2798  001B3A                     _pressSound:
  2799                           	callstack 23
  2800                           
  2801                           ;incstack = 0
  2802                           ;pressSound@tono stored from wreg
  2803  001B3A  6E66               	movwf	pressSound@tono^0,c
  2804                           
  2805                           ;TSound.c: 29:     TiResetTics(timer);
  2806  001B3C  501D               	movf	_timer@TSound$F1621^0,w,c
  2807  001B3E  EC1A  F00E         	call	_TiResetTics
  2808                           
  2809                           ;TSound.c: 30:     TiResetTics(timer2);
  2810  001B42  501C               	movf	_timer2@TSound$F1622^0,w,c
  2811  001B44  EC1A  F00E         	call	_TiResetTics
  2812                           
  2813                           ;TSound.c: 31:     nota = tono;
  2814  001B48  C066  F01A         	movff	pressSound@tono,_nota
  2815                           
  2816                           ;TSound.c: 32:     sound = 1;
  2817  001B4C  0E01               	movlw	1
  2818  001B4E  6E19               	movwf	_sound^0,c
  2819  001B50  0C01               	retlw	1	;funcret
  2820  001B52                     __end_of_pressSound:
  2821                           	callstack 0
  2822                           
  2823 ;; *************** function _initHora *****************
  2824 ;; Defined at:
  2825 ;;		line 14 in file "THora.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;		None
  2828 ;; Auto vars:     Size  Location     Type
  2829 ;;		None
  2830 ;; Return value:  Size  Location     Type
  2831 ;;                  1    wreg      void 
  2832 ;; Registers used:
  2833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2834 ;; Tracked objects:
  2835 ;;		On entry : 3F/0
  2836 ;;		On exit  : 0/0
  2837 ;;		Unchanged: 0/0
  2838 ;; Data sizes:     COMRAM   BANK0   BANK1
  2839 ;;      Params:         0       0       0
  2840 ;;      Locals:         0       0       0
  2841 ;;      Temps:          0       0       0
  2842 ;;      Totals:         0       0       0
  2843 ;;Total ram usage:        0 bytes
  2844 ;; Hardware stack levels used: 1
  2845 ;; Hardware stack levels required when called: 7
  2846 ;; This function calls:
  2847 ;;		_TiGetTimer
  2848 ;;		_TiResetTics
  2849 ;;		_newHora
  2850 ;; This function is called by:
  2851 ;;		_manageKey
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854                           
  2855                           	psect	text13
  2856  001748                     __ptext13:
  2857                           	callstack 0
  2858  001748                     _initHora:
  2859                           	callstack 20
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;THora.c: 15:     timer = TiGetTimer();
  2863                           
  2864                           ;incstack = 0
  2865  001748  EC71  F00C         	call	_TiGetTimer	;wreg free
  2866  00174C  6E40               	movwf	_timer^0,c
  2867                           
  2868                           ;THora.c: 16:     TiResetTics(timer);
  2869  00174E  5040               	movf	_timer^0,w,c
  2870  001750  EC1A  F00E         	call	_TiResetTics
  2871                           
  2872                           ;THora.c: 17:     countTime[2] = ':';
  2873  001754  0E3A               	movlw	58
  2874  001756  6E03               	movwf	(_countTime+2)^0,c
  2875                           
  2876                           ;THora.c: 18:     countTime[0] = countTime[1] = countTime[3] = countTime[4]= '0';
  2877  001758  EC86  F009         	call	PL70	;call to abstracted procedure
  2878  00175C  C004  F002         	movff	_countTime+3,_countTime+1
  2879  001760  C002  F001         	movff	_countTime+1,_countTime
  2880                           
  2881                           ;THora.c: 19:     newHora(3, countTime[3], 0);
  2882  001764  EC9E  F00C         	call	PL52	;call to abstracted procedure
  2883  001768  EC81  F00D         	call	_newHora
  2884                           
  2885                           ;THora.c: 20:     newHora(4, countTime[4], 0);
  2886  00176C  EC9A  F00C         	call	PL36	;call to abstracted procedure
  2887  001770  EC81  F00D         	call	_newHora
  2888                           
  2889                           ;THora.c: 21:     newHora(0, countTime[0], 0);
  2890  001774  ECB6  F00C         	call	PL74	;call to abstracted procedure
  2891  001778  EC81  F00D         	call	_newHora
  2892                           
  2893                           ;THora.c: 22:     newHora(1, countTime[1], 0);
  2894  00177C  ECB2  F00C         	call	PL50	;call to abstracted procedure
  2895  001780  EC81  F00D         	call	_newHora
  2896                           
  2897                           ;THora.c: 23:     startTime = 1;
  2898  001784  0E01               	movlw	1
  2899  001786  6E3F               	movwf	_startTime^0,c
  2900  001788  0C01               	retlw	1	;funcret
  2901  00178A                     __end_of_initHora:
  2902                           	callstack 0
  2903                           
  2904 ;; *************** function _enterMode *****************
  2905 ;; Defined at:
  2906 ;;		line 62 in file "TCentral.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;		None
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;		None
  2911 ;; Return value:  Size  Location     Type
  2912 ;;                  1    wreg      void 
  2913 ;; Registers used:
  2914 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2915 ;; Tracked objects:
  2916 ;;		On entry : 3F/1
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMRAM   BANK0   BANK1
  2920 ;;      Params:         0       0       0
  2921 ;;      Locals:         0       0       0
  2922 ;;      Temps:          0       0       2
  2923 ;;      Totals:         0       0       2
  2924 ;;Total ram usage:        2 bytes
  2925 ;; Hardware stack levels used: 1
  2926 ;; Hardware stack levels required when called: 9
  2927 ;; This function calls:
  2928 ;;		_activaRecording
  2929 ;;		_changeMode
  2930 ;;		_emptyRec
  2931 ;;		_enviaDada
  2932 ;;		_initCentral
  2933 ;;		_initSIO
  2934 ;;		_initSound
  2935 ;; This function is called by:
  2936 ;;		_manageKey
  2937 ;; This function uses a non-reentrant model
  2938 ;;
  2939                           
  2940                           	psect	text14
  2941  00137E                     __ptext14:
  2942                           	callstack 0
  2943  00137E                     _enterMode:
  2944                           	callstack 18
  2945                           
  2946                           ; BSR set to: 1
  2947                           ;TCentral.c: 63:     switch(posJoystick){
  2948                           
  2949                           ;incstack = 0
  2950  00137E  D021               	goto	l7586
  2951  001380                     l7562:
  2952                           
  2953                           ; BSR set to: 1
  2954                           ;TCentral.c: 65:             enviaDada(1, &time);
  2955  001380  0E50               	movlw	low _time
  2956  001382  6E65               	movwf	enviaDada@info^0,c
  2957  001384  0E01               	movlw	1
  2958  001386  EC81  F007         	call	_enviaDada
  2959                           
  2960                           ;TCentral.c: 66:             recording = 1;
  2961  00138A  0E01               	movlw	1
  2962  00138C  6E42               	movwf	_recording^0,c
  2963                           
  2964                           ;TCentral.c: 67:             activaRecording();
  2965  00138E  EC4E  F00E         	call	_activaRecording	;wreg free
  2966                           
  2967                           ;TCentral.c: 68:             changeMode(2);
  2968  001392  0E02               	movlw	2
  2969  001394  EC08  F00E         	call	_changeMode
  2970                           
  2971                           ;TCentral.c: 69:             emptyRec();
  2972  001398  EF4B  F00E         	goto	_emptyRec	;wreg free
  2973  00139C                     l425:
  2974                           
  2975                           ; BSR set to: 1
  2976                           ;TCentral.c: 72:             n = 0;
  2977  00139C  6A43               	clrf	_n^0,c
  2978                           
  2979                           ; BSR set to: 1
  2980                           ;TCentral.c: 73:             changeMode(3);
  2981  00139E  0E03               	movlw	3
  2982  0013A0  EF08  F00E         	goto	_changeMode
  2983  0013A4                     l7574:
  2984                           
  2985                           ; BSR set to: 1
  2986                           ;TCentral.c: 76:             changeMode(4);
  2987  0013A4  0E04               	movlw	4
  2988  0013A6  EF08  F00E         	goto	_changeMode
  2989  0013AA                     l7576:
  2990                           
  2991                           ; BSR set to: 1
  2992                           ;TCentral.c: 79:             changeMode(5);
  2993  0013AA  0E05               	movlw	5
  2994  0013AC  EF08  F00E         	goto	_changeMode
  2995  0013B0                     l7578:
  2996                           
  2997                           ; BSR set to: 1
  2998                           ;TCentral.c: 82:             changeMode(6);
  2999  0013B0  0E06               	movlw	6
  3000  0013B2  EC08  F00E         	call	_changeMode
  3001                           
  3002                           ;TCentral.c: 83:             initCentral();
  3003  0013B6  EC46  F00D         	call	_initCentral	;wreg free
  3004                           
  3005                           ;TCentral.c: 84:             initSound();
  3006  0013BA  ECBA  F00C         	call	_initSound	;wreg free
  3007                           
  3008                           ;TCentral.c: 85:             initSIO();
  3009  0013BE  EF5E  F00B         	goto	_initSIO	;wreg free
  3010  0013C2                     l7586:
  3011                           
  3012                           ; BSR set to: 1
  3013  0013C2  5044               	movf	_posJoystick^0,w,c
  3014  0013C4  6FB0               	movwf	??_enterMode& (0+255),b
  3015  0013C6  6BB1               	clrf	(??_enterMode+1)& (0+255),b
  3016                           
  3017                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3018                           ; Switch size 1, requested type "space"
  3019                           ; Number of cases is 1, Range of values is 0 to 0
  3020                           ; switch strategies available:
  3021                           ; Name         Instructions Cycles
  3022                           ; simple_byte            4     3 (average)
  3023                           ;	Chosen strategy is simple_byte
  3024  0013C8  51B1               	movf	(??_enterMode+1)& (0+255),w,b
  3025  0013CA  A4D8               	btfss	status,2,c
  3026  0013CC  0012               	return	
  3027                           
  3028                           ; BSR set to: 1
  3029                           ; Switch size 1, requested type "space"
  3030                           ; Number of cases is 5, Range of values is 0 to 4
  3031                           ; switch strategies available:
  3032                           ; Name         Instructions Cycles
  3033                           ; simple_byte           16     9 (average)
  3034                           ;	Chosen strategy is simple_byte
  3035  0013CE  51B0               	movf	??_enterMode& (0+255),w,b
  3036  0013D0  E0D7               	bz	l7562
  3037  0013D2  0A01               	xorlw	1	; case 1
  3038  0013D4  E0E3               	bz	l425
  3039  0013D6  0A03               	xorlw	3	; case 2
  3040  0013D8  E0E5               	bz	l7574
  3041  0013DA  0A01               	xorlw	1	; case 3
  3042  0013DC  E0E6               	bz	l7576
  3043  0013DE  0A07               	xorlw	7	; case 4
  3044  0013E0  E0E7               	bz	l7578
  3045  0013E2  0012               	return		;funcret
  3046  0013E4                     __end_of_enterMode:
  3047                           	callstack 0
  3048                           
  3049 ;; *************** function _initSound *****************
  3050 ;; Defined at:
  3051 ;;		line 16 in file "TSound.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;		None
  3054 ;; Auto vars:     Size  Location     Type
  3055 ;;		None
  3056 ;; Return value:  Size  Location     Type
  3057 ;;                  1    wreg      void 
  3058 ;; Registers used:
  3059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3060 ;; Tracked objects:
  3061 ;;		On entry : 0/0
  3062 ;;		On exit  : 0/0
  3063 ;;		Unchanged: 0/0
  3064 ;; Data sizes:     COMRAM   BANK0   BANK1
  3065 ;;      Params:         0       0       0
  3066 ;;      Locals:         0       0       0
  3067 ;;      Temps:          0       0       0
  3068 ;;      Totals:         0       0       0
  3069 ;;Total ram usage:        0 bytes
  3070 ;; Hardware stack levels used: 1
  3071 ;; Hardware stack levels required when called: 4
  3072 ;; This function calls:
  3073 ;;		_TiGetTimer
  3074 ;;		_TiResetTics
  3075 ;; This function is called by:
  3076 ;;		_main
  3077 ;;		_enterMode
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081                           	psect	text15
  3082  001974                     __ptext15:
  3083                           	callstack 0
  3084  001974                     _initSound:
  3085                           	callstack 22
  3086                           
  3087                           ;TSound.c: 17:   timer = TiGetTimer();
  3088                           
  3089                           ;incstack = 0
  3090  001974  EC71  F00C         	call	_TiGetTimer	;wreg free
  3091  001978  6E1D               	movwf	_timer@TSound$F1621^0,c
  3092                           
  3093                           ;TSound.c: 18:   TiResetTics(timer);
  3094  00197A  501D               	movf	_timer@TSound$F1621^0,w,c
  3095  00197C  EC1A  F00E         	call	_TiResetTics
  3096                           
  3097                           ;TSound.c: 19:   timer2 = TiGetTimer();
  3098  001980  EC71  F00C         	call	_TiGetTimer	;wreg free
  3099  001984  6E1C               	movwf	_timer2@TSound$F1622^0,c
  3100                           
  3101                           ;TSound.c: 20:   TiResetTics(timer2);
  3102  001986  501C               	movf	_timer2@TSound$F1622^0,w,c
  3103  001988  EC1A  F00E         	call	_TiResetTics
  3104                           
  3105                           ;TSound.c: 21:   timer3 = TiGetTimer();
  3106  00198C  EC71  F00C         	call	_TiGetTimer	;wreg free
  3107  001990  6E1B               	movwf	_timer3^0,c
  3108                           
  3109                           ;TSound.c: 22:   TiResetTics(timer3);
  3110  001992  501B               	movf	_timer3^0,w,c
  3111  001994  EC1A  F00E         	call	_TiResetTics
  3112                           
  3113                           ;TSound.c: 23:   TRISAbits.TRISA5 = 0;
  3114  001998  9A92               	bcf	146,5,c	;volatile
  3115                           
  3116                           ;TSound.c: 24:   LATAbits.LATA5 = 0;
  3117  00199A  9A89               	bcf	137,5,c	;volatile
  3118                           
  3119                           ;TSound.c: 25:   sound = melody = 0;
  3120  00199C  6A18               	clrf	_melody^0,c
  3121  00199E  6A19               	clrf	_sound^0,c
  3122  0019A0  0012               	return		;funcret
  3123  0019A2                     __end_of_initSound:
  3124                           	callstack 0
  3125                           
  3126 ;; *************** function _initSIO *****************
  3127 ;; Defined at:
  3128 ;;		line 15 in file "TSIO.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;		None
  3131 ;; Auto vars:     Size  Location     Type
  3132 ;;		None
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  1    wreg      void 
  3135 ;; Registers used:
  3136 ;;		wreg, status,2
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMRAM   BANK0   BANK1
  3142 ;;      Params:         0       0       0
  3143 ;;      Locals:         0       0       0
  3144 ;;      Temps:          0       0       0
  3145 ;;      Totals:         0       0       0
  3146 ;;Total ram usage:        0 bytes
  3147 ;; Hardware stack levels used: 1
  3148 ;; Hardware stack levels required when called: 3
  3149 ;; This function calls:
  3150 ;;		Nothing
  3151 ;; This function is called by:
  3152 ;;		_main
  3153 ;;		_enterMode
  3154 ;; This function uses a non-reentrant model
  3155 ;;
  3156                           
  3157                           	psect	text16
  3158  0016BC                     __ptext16:
  3159                           	callstack 0
  3160  0016BC                     _initSIO:
  3161                           	callstack 23
  3162                           
  3163                           ;TSIO.c: 17:     TRISCbits.TRISC6 = 1;
  3164                           
  3165                           ;incstack = 0
  3166  0016BC  8C94               	bsf	148,6,c	;volatile
  3167                           
  3168                           ;TSIO.c: 18:     TRISCbits.TRISC7 = 1;
  3169  0016BE  8E94               	bsf	148,7,c	;volatile
  3170                           
  3171                           ;TSIO.c: 19:   TXSTA = 0x26;
  3172  0016C0  0E26               	movlw	38
  3173  0016C2  6EAC               	movwf	172,c	;volatile
  3174                           
  3175                           ;TSIO.c: 20:   RCSTA = 0x90;
  3176  0016C4  0E90               	movlw	144
  3177  0016C6  6EAB               	movwf	171,c	;volatile
  3178                           
  3179                           ;TSIO.c: 21:   BAUDCONbits.BRG16 = 1;
  3180  0016C8  86B8               	bsf	184,3,c	;volatile
  3181                           
  3182                           ;TSIO.c: 22:     SPBRG = 68;
  3183  0016CA  0E44               	movlw	68
  3184  0016CC  6EAF               	movwf	175,c	;volatile
  3185                           
  3186                           ;TSIO.c: 23:     SPBRGH = 0;
  3187  0016CE  6AB0               	clrf	176,c	;volatile
  3188                           
  3189                           ;TSIO.c: 25:     time[2] = ':';
  3190                           
  3191                           ;TSIO.c: 26:     time[0] = time[1] = time[3] = time[4]= '0';
  3192                           
  3193                           ;TSIO.c: 27:     time[5] = '\0';
  3194  0016D0  D80C               	call	PL26	;call to abstracted procedure
  3195                           
  3196                           ;TSIO.c: 28:     send = action = count = mode = enviaNom = s = flying = recording = ok =
      +                           0;
  3197  0016D2  6A25               	clrf	_ok^0,c
  3198  0016D4  6A42               	clrf	_recording^0,c
  3199  0016D6  6A24               	clrf	_flying^0,c
  3200  0016D8  6A26               	clrf	_s^0,c
  3201  0016DA  6A28               	clrf	_enviaNom^0,c
  3202  0016DC  6A45               	clrf	_mode^0,c
  3203  0016DE  6A46               	clrf	_count^0,c
  3204  0016E0  6A29               	clrf	_action^0,c
  3205  0016E2  6A2A               	clrf	_send^0,c
  3206                           
  3207                           ;TSIO.c: 29:     i = 1;
  3208  0016E4  0E01               	movlw	1
  3209  0016E6  6E27               	movwf	_i^0,c
  3210  0016E8  0C01               	retlw	1	;funcret
  3211  0016EA                     __end_of_initSIO:
  3212                           	callstack 0
  3213  0016EA                     PL26:
  3214                           	callstack 22
  3215  0016EA  0E3A               	movlw	58
  3216  0016EC  6E52               	movwf	(_time+2)^0,c
  3217  0016EE  0E30               	movlw	48
  3218  0016F0  6E54               	movwf	(_time+4)^0,c
  3219  0016F2  C054  F053         	movff	_time+4,_time+3
  3220  0016F6  C053  F051         	movff	_time+3,_time+1
  3221  0016FA  C051  F050         	movff	_time+1,_time
  3222  0016FE  6A55               	clrf	(_time+5)^0,c
  3223  001700  0012               	return	
  3224  001702                     __end_ofPL26:
  3225                           	callstack 0
  3226                           
  3227 ;; *************** function _initCentral *****************
  3228 ;; Defined at:
  3229 ;;		line 15 in file "TCentral.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;		None
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;		None
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  1    wreg      void 
  3236 ;; Registers used:
  3237 ;;		wreg, status,2, cstack
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMRAM   BANK0   BANK1
  3243 ;;      Params:         0       0       0
  3244 ;;      Locals:         0       0       0
  3245 ;;      Temps:          0       0       0
  3246 ;;      Totals:         0       0       0
  3247 ;;Total ram usage:        0 bytes
  3248 ;; Hardware stack levels used: 1
  3249 ;; Hardware stack levels required when called: 4
  3250 ;; This function calls:
  3251 ;;		_emptyRec
  3252 ;;		_getPT
  3253 ;; This function is called by:
  3254 ;;		_main
  3255 ;;		_enterMode
  3256 ;; This function uses a non-reentrant model
  3257 ;;
  3258                           
  3259                           	psect	text17
  3260  001A8C                     __ptext17:
  3261                           	callstack 0
  3262  001A8C                     _initCentral:
  3263                           	callstack 22
  3264                           
  3265                           ;TCentral.c: 16:     count = mode = posJoystick = n = recording = 0;
  3266                           
  3267                           ;incstack = 0
  3268  001A8C  6A42               	clrf	_recording^0,c
  3269  001A8E  6A43               	clrf	_n^0,c
  3270  001A90  6A44               	clrf	_posJoystick^0,c
  3271  001A92  6A45               	clrf	_mode^0,c
  3272  001A94  6A46               	clrf	_count^0,c
  3273                           
  3274                           ;TCentral.c: 17:     time[2] = ':';
  3275                           
  3276                           ;TCentral.c: 18:     time[0] = time[1] = time[3] = time[4]= '0';
  3277                           
  3278                           ;TCentral.c: 19:     time[5] = '\0';
  3279  001A96  EC75  F00B         	call	PL26	;call to abstracted procedure
  3280                           
  3281                           ;TCentral.c: 20:     p = getPT();
  3282  001A9A  EC59  F00E         	call	_getPT	;wreg free
  3283  001A9E  6E41               	movwf	_p^0,c
  3284                           
  3285                           ;TCentral.c: 21:     if(p){
  3286  001AA0  5041               	movf	_p^0,w,c
  3287  001AA2  A4D8               	btfss	status,2,c
  3288                           
  3289                           ;TCentral.c: 22:         emptyRec();
  3290  001AA4  EC4B  F00E         	call	_emptyRec	;wreg free
  3291  001AA8  0012               	return		;funcret
  3292  001AAA                     __end_of_initCentral:
  3293                           	callstack 0
  3294                           
  3295 ;; *************** function _emptyRec *****************
  3296 ;; Defined at:
  3297 ;;		line 57 in file "TMenu.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;		None
  3300 ;; Auto vars:     Size  Location     Type
  3301 ;;		None
  3302 ;; Return value:  Size  Location     Type
  3303 ;;                  1    wreg      void 
  3304 ;; Registers used:
  3305 ;;		wreg, status,2
  3306 ;; Tracked objects:
  3307 ;;		On entry : 0/1
  3308 ;;		On exit  : 0/0
  3309 ;;		Unchanged: 0/0
  3310 ;; Data sizes:     COMRAM   BANK0   BANK1
  3311 ;;      Params:         0       0       0
  3312 ;;      Locals:         0       0       0
  3313 ;;      Temps:          0       0       0
  3314 ;;      Totals:         0       0       0
  3315 ;;Total ram usage:        0 bytes
  3316 ;; Hardware stack levels used: 1
  3317 ;; Hardware stack levels required when called: 3
  3318 ;; This function calls:
  3319 ;;		Nothing
  3320 ;; This function is called by:
  3321 ;;		_initCentral
  3322 ;;		_enterMode
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325                           
  3326                           	psect	text18
  3327  001C96                     __ptext18:
  3328                           	callstack 0
  3329  001C96                     _emptyRec:
  3330                           	callstack 22
  3331                           
  3332                           ;TMenu.c: 58:     empty = 1;
  3333                           
  3334                           ;incstack = 0
  3335  001C96  0E01               	movlw	1
  3336  001C98  6E39               	movwf	_empty^0,c
  3337  001C9A  0C01               	retlw	1	;funcret
  3338  001C9C                     __end_of_emptyRec:
  3339                           	callstack 0
  3340                           
  3341 ;; *************** function _enviaDada *****************
  3342 ;; Defined at:
  3343 ;;		line 50 in file "TSIO.c"
  3344 ;; Parameters:    Size  Location     Type
  3345 ;;  c               1    wreg     unsigned char 
  3346 ;;  info            1   11[COMRAM] PTR unsigned char 
  3347 ;;		 -> portName(4), time(6), 
  3348 ;; Auto vars:     Size  Location     Type
  3349 ;;  c               1   14[COMRAM] unsigned char 
  3350 ;; Return value:  Size  Location     Type
  3351 ;;                  1    wreg      void 
  3352 ;; Registers used:
  3353 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3354 ;; Tracked objects:
  3355 ;;		On entry : 3F/1
  3356 ;;		On exit  : 0/0
  3357 ;;		Unchanged: 0/0
  3358 ;; Data sizes:     COMRAM   BANK0   BANK1
  3359 ;;      Params:         1       0       0
  3360 ;;      Locals:         1       0       0
  3361 ;;      Temps:          2       0       0
  3362 ;;      Totals:         4       0       0
  3363 ;;Total ram usage:        4 bytes
  3364 ;; Hardware stack levels used: 1
  3365 ;; Hardware stack levels required when called: 3
  3366 ;; This function calls:
  3367 ;;		Nothing
  3368 ;; This function is called by:
  3369 ;;		_enterMode
  3370 ;;		_manageKey
  3371 ;; This function uses a non-reentrant model
  3372 ;;
  3373                           
  3374                           	psect	text19
  3375  000F02                     __ptext19:
  3376                           	callstack 0
  3377  000F02                     _enviaDada:
  3378                           	callstack 24
  3379                           
  3380                           ;incstack = 0
  3381                           ;enviaDada@c stored from wreg
  3382  000F02  6E68               	movwf	enviaDada@c^0,c
  3383                           
  3384                           ;TSIO.c: 51:     switch (c){
  3385  000F04  D02A               	goto	l7546
  3386  000F06                     l7518:
  3387                           
  3388                           ;TSIO.c: 54:             action = 'T';
  3389  000F06  0E54               	movlw	84
  3390                           
  3391                           ;TSIO.c: 55:             sendName[1] = info[0];
  3392  000F08  D83C               	call	PL62	;call to abstracted procedure
  3393  000F0A  0100               	movlb	0	; () banked
  3394  000F0C  6FE5               	movwf	(_sendName+1)& (0+255),b
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;TSIO.c: 56:             sendName[2] = info[1];
  3398  000F0E  5065               	movf	enviaDada@info^0,w,c
  3399  000F10  D833               	call	PL54	;call to abstracted procedure
  3400  000F12  6FE6               	movwf	(_sendName+2)& (0+255),b
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;TSIO.c: 57:             sendName[3] = info[2];
  3404  000F14  5065               	movf	enviaDada@info^0,w,c
  3405  000F16  D83B               	call	PL68	;call to abstracted procedure
  3406  000F18  6FE7               	movwf	(_sendName+3)& (0+255),b
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;TSIO.c: 58:             sendName[4] = '\0';
  3410  000F1A  6BE8               	clrf	(_sendName+4)& (0+255),b
  3411                           
  3412                           ;TSIO.c: 59:             break;
  3413  000F1C  EFFC  F00D         	goto	PL94
  3414  000F20                     l7528:
  3415                           
  3416                           ;TSIO.c: 62:             action = 'D';
  3417  000F20  0E44               	movlw	68
  3418                           
  3419                           ;TSIO.c: 63:             time[0] = info[0];
  3420  000F22  D82F               	call	PL62	;call to abstracted procedure
  3421  000F24  6E50               	movwf	_time^0,c
  3422                           
  3423                           ;TSIO.c: 64:             time[1] = info[1];
  3424  000F26  5065               	movf	enviaDada@info^0,w,c
  3425  000F28  D827               	call	PL54	;call to abstracted procedure
  3426  000F2A  6E51               	movwf	(_time+1)^0,c
  3427                           
  3428                           ;TSIO.c: 65:             time[2] = ':';
  3429  000F2C  0E3A               	movlw	58
  3430  000F2E  6E52               	movwf	(_time+2)^0,c
  3431                           
  3432                           ;TSIO.c: 66:             time[3] = info[3];
  3433  000F30  5065               	movf	enviaDada@info^0,w,c
  3434  000F32  6ED9               	movwf	fsr2l,c
  3435  000F34  6ADA               	clrf	fsr2h,c
  3436  000F36  0E03               	movlw	3
  3437  000F38  26D9               	addwf	fsr2l,f,c
  3438  000F3A  50DF               	movf	indf2,w,c
  3439  000F3C  6E53               	movwf	(_time+3)^0,c
  3440                           
  3441                           ;TSIO.c: 67:             time[4] = info[4];
  3442  000F3E  5065               	movf	enviaDada@info^0,w,c
  3443  000F40  6ED9               	movwf	fsr2l,c
  3444  000F42  6ADA               	clrf	fsr2h,c
  3445  000F44  0E04               	movlw	4
  3446  000F46  26D9               	addwf	fsr2l,f,c
  3447  000F48  50DF               	movf	indf2,w,c
  3448  000F4A  6E54               	movwf	(_time+4)^0,c
  3449                           
  3450                           ;TSIO.c: 68:             time[5] = '\0';
  3451  000F4C  6A55               	clrf	(_time+5)^0,c
  3452                           
  3453                           ;TSIO.c: 69:             break;
  3454  000F4E  EFFC  F00D         	goto	PL94
  3455  000F52                     l7542:
  3456                           
  3457                           ;TSIO.c: 71:             action = 'P';
  3458  000F52  0E50               	movlw	80
  3459  000F54  6E29               	movwf	_action^0,c
  3460                           
  3461                           ;TSIO.c: 72:             break;
  3462  000F56  EFFC  F00D         	goto	PL94
  3463  000F5A                     l7546:
  3464  000F5A  5068               	movf	enviaDada@c^0,w,c
  3465  000F5C  6E66               	movwf	??_enviaDada^0,c
  3466  000F5E  6A67               	clrf	(??_enviaDada+1)^0,c
  3467                           
  3468                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3469                           ; Switch size 1, requested type "space"
  3470                           ; Number of cases is 1, Range of values is 0 to 0
  3471                           ; switch strategies available:
  3472                           ; Name         Instructions Cycles
  3473                           ; simple_byte            4     3 (average)
  3474                           ;	Chosen strategy is simple_byte
  3475  000F60  5067               	movf	(??_enviaDada+1)^0,w,c
  3476  000F62  E002 EFFC  F00D    	bnz	PL94
  3477                           
  3478                           ; Switch size 1, requested type "space"
  3479                           ; Number of cases is 3, Range of values is 0 to 2
  3480                           ; switch strategies available:
  3481                           ; Name         Instructions Cycles
  3482                           ; simple_byte           10     6 (average)
  3483                           ;	Chosen strategy is simple_byte
  3484  000F68  5066               	movf	??_enviaDada^0,w,c
  3485  000F6A  E0CD               	bz	l7518
  3486  000F6C  0A01               	xorlw	1	; case 1
  3487  000F6E  E0D8               	bz	l7528
  3488  000F70  0A03               	xorlw	3	; case 2
  3489  000F72  E0EF               	bz	l7542
  3490  000F74                     l7548:
  3491                           
  3492                           ;TSIO.c: 75:     send = 1;
  3493  000F74  EFFC  F00D         	goto	PL94	;call to abstracted procedure
  3494  000F78                     __end_of_enviaDada:
  3495                           	callstack 0
  3496  000F78                     PL54:
  3497                           	callstack 24
  3498  000F78  6ED9               	movwf	fsr2l,c
  3499  000F7A  6ADA               	clrf	fsr2h,c
  3500  000F7C  2AD9               	incf	fsr2l,f,c
  3501  000F7E  50DF               	movf	indf2,w,c
  3502  000F80  0012               	return	
  3503  000F82                     __end_ofPL54:
  3504                           	callstack 0
  3505  000F82                     PL62:
  3506                           	callstack 24
  3507  000F82  6E29               	movwf	_action^0,c
  3508  000F84  5065               	movf	enviaDada@info^0,w,c
  3509  000F86  6ED9               	movwf	fsr2l,c
  3510  000F88  6ADA               	clrf	fsr2h,c
  3511  000F8A  50DF               	movf	indf2,w,c
  3512  000F8C  0012               	return	
  3513  000F8E                     __end_ofPL62:
  3514                           	callstack 0
  3515  000F8E                     PL68:
  3516                           	callstack 24
  3517  000F8E  6ED9               	movwf	fsr2l,c
  3518  000F90  6ADA               	clrf	fsr2h,c
  3519  000F92  0E02               	movlw	2
  3520  000F94  26D9               	addwf	fsr2l,f,c
  3521  000F96  50DF               	movf	indf2,w,c
  3522  000F98  0012               	return	
  3523  000F9A                     __end_ofPL68:
  3524                           	callstack 0
  3525                           
  3526 ;; *************** function _activaRecording *****************
  3527 ;; Defined at:
  3528 ;;		line 32 in file "TSIO.c"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;		None
  3531 ;; Auto vars:     Size  Location     Type
  3532 ;;		None
  3533 ;; Return value:  Size  Location     Type
  3534 ;;                  1    wreg      void 
  3535 ;; Registers used:
  3536 ;;		wreg, status,2
  3537 ;; Tracked objects:
  3538 ;;		On entry : 0/1
  3539 ;;		On exit  : 0/0
  3540 ;;		Unchanged: 0/0
  3541 ;; Data sizes:     COMRAM   BANK0   BANK1
  3542 ;;      Params:         0       0       0
  3543 ;;      Locals:         0       0       0
  3544 ;;      Temps:          0       0       0
  3545 ;;      Totals:         0       0       0
  3546 ;;Total ram usage:        0 bytes
  3547 ;; Hardware stack levels used: 1
  3548 ;; Hardware stack levels required when called: 3
  3549 ;; This function calls:
  3550 ;;		Nothing
  3551 ;; This function is called by:
  3552 ;;		_enterMode
  3553 ;; This function uses a non-reentrant model
  3554 ;;
  3555                           
  3556                           	psect	text20
  3557  001C9C                     __ptext20:
  3558                           	callstack 0
  3559  001C9C                     _activaRecording:
  3560                           	callstack 23
  3561                           
  3562                           ;TSIO.c: 33:     recording = 1;
  3563                           
  3564                           ;incstack = 0
  3565  001C9C  0E01               	movlw	1
  3566  001C9E  6E42               	movwf	_recording^0,c
  3567  001CA0  0C01               	retlw	1	;funcret
  3568  001CA2                     __end_of_activaRecording:
  3569                           	callstack 0
  3570                           
  3571 ;; *************** function _cleanPortName *****************
  3572 ;; Defined at:
  3573 ;;		line 69 in file "TMenu.c"
  3574 ;; Parameters:    Size  Location     Type
  3575 ;;		None
  3576 ;; Auto vars:     Size  Location     Type
  3577 ;;		None
  3578 ;; Return value:  Size  Location     Type
  3579 ;;                  1    wreg      void 
  3580 ;; Registers used:
  3581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3582 ;; Tracked objects:
  3583 ;;		On entry : 3F/1
  3584 ;;		On exit  : 0/0
  3585 ;;		Unchanged: 0/0
  3586 ;; Data sizes:     COMRAM   BANK0   BANK1
  3587 ;;      Params:         0       0       0
  3588 ;;      Locals:         0       0       0
  3589 ;;      Temps:          0       0       0
  3590 ;;      Totals:         0       0       0
  3591 ;;Total ram usage:        0 bytes
  3592 ;; Hardware stack levels used: 1
  3593 ;; Hardware stack levels required when called: 7
  3594 ;; This function calls:
  3595 ;;		_LcGotoXY
  3596 ;;		_LcPutChar
  3597 ;; This function is called by:
  3598 ;;		_manageKey
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602                           	psect	text21
  3603  001878                     __ptext21:
  3604                           	callstack 0
  3605  001878                     _cleanPortName:
  3606                           	callstack 0
  3607                           
  3608                           ; BSR set to: 1
  3609                           ;TMenu.c: 70:     LcGotoXY(0, 1);
  3610                           
  3611                           ;incstack = 0
  3612  001878  D817               	call	PL96	;call to abstracted procedure
  3613  00187A  ECE5  F006         	call	_LcGotoXY
  3614                           
  3615                           ;TMenu.c: 71:     LcPutChar(' ');
  3616  00187E  0E20               	movlw	32
  3617  001880  ECE3  F00A         	call	_LcPutChar
  3618                           
  3619                           ;TMenu.c: 72:     LcGotoXY(1, 1);
  3620  001884  0E01               	movlw	1
  3621  001886  6E6D               	movwf	LcGotoXY@Row^0,c
  3622  001888  ECE5  F006         	call	_LcGotoXY
  3623                           
  3624                           ;TMenu.c: 73:     LcPutChar(' ');
  3625  00188C  0E20               	movlw	32
  3626  00188E  ECE3  F00A         	call	_LcPutChar
  3627                           
  3628                           ;TMenu.c: 74:     LcGotoXY(2, 1);
  3629  001892  0E01               	movlw	1
  3630  001894  6E6D               	movwf	LcGotoXY@Row^0,c
  3631  001896  0E02               	movlw	2
  3632  001898  ECE5  F006         	call	_LcGotoXY
  3633                           
  3634                           ;TMenu.c: 75:     LcPutChar(' ');
  3635  00189C  0E20               	movlw	32
  3636  00189E  ECE3  F00A         	call	_LcPutChar
  3637                           
  3638                           ;TMenu.c: 76:     LcGotoXY(0, 1);
  3639  0018A2  D802               	call	PL96	;call to abstracted procedure
  3640  0018A4  EFE5  F006         	goto	_LcGotoXY
  3641  0018A8                     __end_of_cleanPortName:
  3642                           	callstack 0
  3643  0018A8                     PL96:
  3644                           	callstack 19
  3645  0018A8  0E01               	movlw	1
  3646  0018AA  6E6D               	movwf	LcGotoXY@Row^0,c
  3647  0018AC  0C00               	retlw	0
  3648  0018AE                     __end_ofPL96:
  3649                           	callstack 0
  3650                           
  3651 ;; *************** function _initSMS *****************
  3652 ;; Defined at:
  3653 ;;		line 21 in file "TSms.c"
  3654 ;; Parameters:    Size  Location     Type
  3655 ;;		None
  3656 ;; Auto vars:     Size  Location     Type
  3657 ;;		None
  3658 ;; Return value:  Size  Location     Type
  3659 ;;                  1    wreg      void 
  3660 ;; Registers used:
  3661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3662 ;; Tracked objects:
  3663 ;;		On entry : 0/0
  3664 ;;		On exit  : 0/0
  3665 ;;		Unchanged: 0/0
  3666 ;; Data sizes:     COMRAM   BANK0   BANK1
  3667 ;;      Params:         0       0       0
  3668 ;;      Locals:         0       0       0
  3669 ;;      Temps:          0       0       0
  3670 ;;      Totals:         0       0       0
  3671 ;;Total ram usage:        0 bytes
  3672 ;; Hardware stack levels used: 1
  3673 ;; Hardware stack levels required when called: 4
  3674 ;; This function calls:
  3675 ;;		_TiGetTimer
  3676 ;;		_TiResetTics
  3677 ;; This function is called by:
  3678 ;;		_main
  3679 ;;		_manageKeySMS
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           	psect	text22
  3684  001B82                     __ptext22:
  3685                           	callstack 0
  3686  001B82                     _initSMS:
  3687                           	callstack 24
  3688                           
  3689                           ;TSms.c: 22:     timer = TiGetTimer();
  3690                           
  3691                           ;incstack = 0
  3692  001B82  EC71  F00C         	call	_TiGetTimer	;wreg free
  3693  001B86  6E21               	movwf	_timer@TSms$F1539^0,c
  3694                           
  3695                           ;TSms.c: 23:     TiResetTics(timer);
  3696  001B88  5021               	movf	_timer@TSms$F1539^0,w,c
  3697  001B8A  EC1A  F00E         	call	_TiResetTics
  3698                           
  3699                           ;TSms.c: 24:     countChar = 0;
  3700  001B8E  6A20               	clrf	_countChar^0,c
  3701                           
  3702                           ;TSms.c: 25:     prevKey = 10;
  3703  001B90  0E0A               	movlw	10
  3704  001B92  6E1F               	movwf	_prevKey^0,c
  3705                           
  3706                           ;TSms.c: 26:     rep = 0;
  3707  001B94  6A1E               	clrf	_rep^0,c
  3708  001B96  0012               	return		;funcret
  3709  001B98                     __end_of_initSMS:
  3710                           	callstack 0
  3711                           
  3712 ;; *************** function _checkKey *****************
  3713 ;; Defined at:
  3714 ;;		line 84 in file "TTeclat.c"
  3715 ;; Parameters:    Size  Location     Type
  3716 ;;  D0              1    wreg     unsigned char 
  3717 ;;  D1              1   12[COMRAM] unsigned char 
  3718 ;;  D2              1   13[COMRAM] unsigned char 
  3719 ;;  stateAux        1   14[COMRAM] unsigned char 
  3720 ;;  column          1   15[COMRAM] unsigned char 
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;  D0              1   16[COMRAM] unsigned char 
  3723 ;; Return value:  Size  Location     Type
  3724 ;;                  1    wreg      unsigned char 
  3725 ;; Registers used:
  3726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3727 ;; Tracked objects:
  3728 ;;		On entry : 0/1
  3729 ;;		On exit  : 0/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMRAM   BANK0   BANK1
  3732 ;;      Params:         4       0       0
  3733 ;;      Locals:         1       0       0
  3734 ;;      Temps:          0       0       0
  3735 ;;      Totals:         5       0       0
  3736 ;;Total ram usage:        5 bytes
  3737 ;; Hardware stack levels used: 1
  3738 ;; Hardware stack levels required when called: 5
  3739 ;; This function calls:
  3740 ;;		_checkFila
  3741 ;; This function is called by:
  3742 ;;		_motorTeclat
  3743 ;; This function uses a non-reentrant model
  3744 ;;
  3745                           
  3746                           	psect	text23
  3747  001702                     __ptext23:
  3748                           	callstack 0
  3749  001702                     _checkKey:
  3750                           	callstack 24
  3751                           
  3752                           ;incstack = 0
  3753                           ;checkKey@D0 stored from wreg
  3754  001702  6E6A               	movwf	checkKey@D0^0,c
  3755                           
  3756                           ;TTeclat.c: 85:     if (!keyDetected){
  3757  001704  5013               	movf	_keyDetected^0,w,c
  3758  001706  E11C               	bnz	l8086
  3759                           
  3760                           ;TTeclat.c: 86:        if ((PORTD & 0x78) == 0x78) {
  3761  001708  5083               	movf	131,w,c	;volatile
  3762  00170A  0B78               	andlw	120
  3763  00170C  0A78               	xorlw	120
  3764  00170E  E114               	bnz	l8082
  3765                           
  3766                           ;TTeclat.c: 88:             LATDbits.LATD0 = D0;
  3767  001710  B06A               	btfsc	checkKey@D0^0,0,c
  3768  001712  D002               	bra	u7385
  3769  001714  908C               	bcf	140,0,c	;volatile
  3770  001716  D001               	bra	u7386
  3771  001718                     u7385:
  3772  001718  808C               	bsf	140,0,c	;volatile
  3773  00171A                     u7386:
  3774                           
  3775                           ;TTeclat.c: 89:             LATDbits.LATD1 = D1;
  3776  00171A  B066               	btfsc	checkKey@D1^0,0,c
  3777  00171C  D002               	bra	u7395
  3778  00171E  928C               	bcf	140,1,c	;volatile
  3779  001720  D001               	bra	u7396
  3780  001722                     u7395:
  3781  001722  828C               	bsf	140,1,c	;volatile
  3782  001724                     u7396:
  3783                           
  3784                           ;TTeclat.c: 90:             LATDbits.LATD2 = D2;
  3785  001724  B067               	btfsc	checkKey@D2^0,0,c
  3786  001726  D002               	bra	u7405
  3787  001728  948C               	bcf	140,2,c	;volatile
  3788  00172A  D001               	bra	u7406
  3789  00172C                     u7405:
  3790  00172C  848C               	bsf	140,2,c	;volatile
  3791  00172E                     u7406:
  3792                           
  3793                           ;TTeclat.c: 91:             columna = column;
  3794  00172E  C069  F011         	movff	checkKey@column,_columna
  3795                           
  3796                           ;TTeclat.c: 92:             state = stateAux;
  3797  001732  C068  F014         	movff	checkKey@stateAux,_state
  3798                           
  3799                           ;TTeclat.c: 93:         } else {
  3800  001736  D006               	goto	l1355
  3801  001738                     l8082:
  3802                           
  3803                           ;TTeclat.c: 95:             checkFila();
  3804  001738  ECD1  F00C         	call	_checkFila	;wreg free
  3805                           
  3806                           ;TTeclat.c: 96:             state = 3;
  3807  00173C  0E03               	movlw	3
  3808  00173E  D001               	goto	L1
  3809  001740                     l8086:
  3810                           
  3811                           ;TTeclat.c: 99:         state = 4;
  3812  001740  0E04               	movlw	4
  3813  001742                     L1:
  3814  001742  6E14               	movwf	_state^0,c
  3815  001744                     l1355:
  3816                           
  3817                           ;TTeclat.c: 101:     return state;
  3818  001744  5014               	movf	_state^0,w,c
  3819  001746  0012               	return		;funcret
  3820  001748                     __end_of_checkKey:
  3821                           	callstack 0
  3822                           
  3823 ;; *************** function _checkFila *****************
  3824 ;; Defined at:
  3825 ;;		line 32 in file "TTeclat.c"
  3826 ;; Parameters:    Size  Location     Type
  3827 ;;		None
  3828 ;; Auto vars:     Size  Location     Type
  3829 ;;		None
  3830 ;; Return value:  Size  Location     Type
  3831 ;;                  1    wreg      void 
  3832 ;; Registers used:
  3833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3834 ;; Tracked objects:
  3835 ;;		On entry : 0/1
  3836 ;;		On exit  : 0/0
  3837 ;;		Unchanged: 0/0
  3838 ;; Data sizes:     COMRAM   BANK0   BANK1
  3839 ;;      Params:         0       0       0
  3840 ;;      Locals:         0       0       0
  3841 ;;      Temps:          0       0       0
  3842 ;;      Totals:         0       0       0
  3843 ;;Total ram usage:        0 bytes
  3844 ;; Hardware stack levels used: 1
  3845 ;; Hardware stack levels required when called: 4
  3846 ;; This function calls:
  3847 ;;		_TiResetTics
  3848 ;; This function is called by:
  3849 ;;		_checkKey
  3850 ;; This function uses a non-reentrant model
  3851 ;;
  3852                           
  3853                           	psect	text24
  3854  0019A2                     __ptext24:
  3855                           	callstack 0
  3856  0019A2                     _checkFila:
  3857                           	callstack 24
  3858                           
  3859                           ;TTeclat.c: 33:     TiResetTics(timer);
  3860                           
  3861                           ;incstack = 0
  3862  0019A2  5015               	movf	_timer@TTeclat$F1784^0,w,c
  3863  0019A4  EC1A  F00E         	call	_TiResetTics
  3864                           
  3865                           ;TTeclat.c: 34:     keyDetected = 1;
  3866  0019A8  0E01               	movlw	1
  3867  0019AA  6E13               	movwf	_keyDetected^0,c
  3868                           
  3869                           ;TTeclat.c: 35:  if (PORTDbits.RD6 == 0) {
  3870  0019AC  BC83               	btfsc	131,6,c	;volatile
  3871  0019AE  D003               	goto	l1326
  3872                           
  3873                           ;TTeclat.c: 36:   fila = 4;
  3874  0019B0  0E04               	movlw	4
  3875  0019B2  6E12               	movwf	_fila^0,c
  3876                           
  3877                           ;TTeclat.c: 37:  } else if (PORTDbits.RD5 == 0) {
  3878  0019B4  0C04               	retlw	4
  3879  0019B6                     l1326:
  3880  0019B6  BA83               	btfsc	131,5,c	;volatile
  3881  0019B8  D003               	goto	l1328
  3882                           
  3883                           ;TTeclat.c: 38:   fila = 3;
  3884  0019BA  0E03               	movlw	3
  3885  0019BC  6E12               	movwf	_fila^0,c
  3886                           
  3887                           ;TTeclat.c: 39:  } else if (PORTDbits.RD4 == 0) {
  3888  0019BE  0C03               	retlw	3
  3889  0019C0                     l1328:
  3890  0019C0  B883               	btfsc	131,4,c	;volatile
  3891  0019C2  D003               	goto	l7762
  3892                           
  3893                           ;TTeclat.c: 40:   fila = 2;
  3894  0019C4  0E02               	movlw	2
  3895  0019C6  6E12               	movwf	_fila^0,c
  3896                           
  3897                           ;TTeclat.c: 41:  } else {
  3898  0019C8  0C02               	retlw	2
  3899  0019CA                     l7762:
  3900                           
  3901                           ;TTeclat.c: 42:   fila = 1;
  3902  0019CA  0E01               	movlw	1
  3903  0019CC  6E12               	movwf	_fila^0,c
  3904  0019CE  0C01               	retlw	1	;funcret
  3905  0019D0                     __end_of_checkFila:
  3906                           	callstack 0
  3907                           
  3908 ;; *************** function _motorTX *****************
  3909 ;; Defined at:
  3910 ;;		line 128 in file "TSIO.c"
  3911 ;; Parameters:    Size  Location     Type
  3912 ;;		None
  3913 ;; Auto vars:     Size  Location     Type
  3914 ;;  num             1    2[BANK1 ] unsigned char 
  3915 ;; Return value:  Size  Location     Type
  3916 ;;                  1    wreg      void 
  3917 ;; Registers used:
  3918 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3919 ;; Tracked objects:
  3920 ;;		On entry : 0/0
  3921 ;;		On exit  : 0/0
  3922 ;;		Unchanged: 0/0
  3923 ;; Data sizes:     COMRAM   BANK0   BANK1
  3924 ;;      Params:         0       0       0
  3925 ;;      Locals:         0       0       1
  3926 ;;      Temps:          0       0       2
  3927 ;;      Totals:         0       0       3
  3928 ;;Total ram usage:        3 bytes
  3929 ;; Hardware stack levels used: 1
  3930 ;; Hardware stack levels required when called: 9
  3931 ;; This function calls:
  3932 ;;		_changeMode
  3933 ;;		_getNT
  3934 ;; This function is called by:
  3935 ;;		_main
  3936 ;; This function uses a non-reentrant model
  3937 ;;
  3938                           
  3939                           	psect	text25
  3940  00050A                     __ptext25:
  3941                           	callstack 0
  3942  00050A                     _motorTX:
  3943                           	callstack 21
  3944                           
  3945                           ;TSIO.c: 129:     static unsigned char state = 0;;TSIO.c: 130:     unsigned char num;;TS
      +                          IO.c: 132:     switch (state){
  3946                           
  3947                           ;incstack = 0
  3948  00050A  D075               	goto	l8364
  3949  00050C                     l8298:
  3950                           
  3951                           ; BSR set to: 1
  3952                           ;TSIO.c: 134:             if (send){
  3953  00050C  502A               	movf	_send^0,w,c
  3954  00050E  B4D8               	btfsc	status,2,c
  3955  000510  0012               	return	
  3956                           
  3957                           ; BSR set to: 1
  3958                           ;TSIO.c: 135:                 state = 1;
  3959  000512  0E01               	movlw	1
  3960  000514  6E22               	movwf	motorTX@state^0,c
  3961  000516  0C01               	retlw	1
  3962  000518                     l1048:
  3963                           
  3964                           ; BSR set to: 1
  3965                           ;TSIO.c: 139:             send = 0;
  3966  000518  6A2A               	clrf	_send^0,c
  3967                           
  3968                           ;TSIO.c: 140:             switch (action){
  3969  00051A  D019               	goto	l8318
  3970  00051C                     l1050:
  3971                           
  3972                           ; BSR set to: 1
  3973                           ;TSIO.c: 142:                     if (TXSTAbits.TRMT == 1){
  3974  00051C  A2AC               	btfss	172,1,c	;volatile
  3975  00051E  D025               	goto	l8320
  3976                           
  3977                           ; BSR set to: 1
  3978                           ;TSIO.c: 143:                         TXREG = action;
  3979  000520  C029  FFAD         	movff	_action,4013	;volatile
  3980                           
  3981                           ; BSR set to: 1
  3982                           ;TSIO.c: 144:                         state = 2;
  3983  000524  0E02               	movlw	2
  3984  000526  D011               	goto	L3
  3985  000528                     l1053:
  3986                           
  3987                           ; BSR set to: 1
  3988                           ;TSIO.c: 148:                     if (TXSTAbits.TRMT == 1){
  3989  000528  A2AC               	btfss	172,1,c	;volatile
  3990  00052A  D01F               	goto	l8320
  3991                           
  3992                           ; BSR set to: 1
  3993                           ;TSIO.c: 149:                         TXREG = action;
  3994  00052C  C029  FFAD         	movff	_action,4013	;volatile
  3995                           
  3996                           ; BSR set to: 1
  3997                           ;TSIO.c: 150:                         state = 3;
  3998  000530  0E03               	movlw	3
  3999  000532  D00B               	goto	L3
  4000  000534                     l1055:
  4001                           
  4002                           ; BSR set to: 1
  4003                           ;TSIO.c: 154:                     if (TXSTAbits.TRMT == 1){
  4004  000534  A2AC               	btfss	172,1,c	;volatile
  4005  000536  D019               	goto	l8320
  4006                           
  4007                           ; BSR set to: 1
  4008                           ;TSIO.c: 155:                         TXREG = s;
  4009  000538  C026  FFAD         	movff	_s,4013	;volatile
  4010                           
  4011                           ;TSIO.c: 156:                         state = 0;
  4012  00053C  6A22               	clrf	motorTX@state^0,c
  4013  00053E  D015               	goto	l8320
  4014  000540                     l1057:
  4015                           
  4016                           ; BSR set to: 1
  4017                           ;TSIO.c: 160:                     if (TXSTAbits.TRMT == 1){
  4018  000540  A2AC               	btfss	172,1,c	;volatile
  4019  000542  D013               	goto	l8320
  4020                           
  4021                           ; BSR set to: 1
  4022                           ;TSIO.c: 161:                         TXREG = action;
  4023  000544  C029  FFAD         	movff	_action,4013	;volatile
  4024                           
  4025                           ; BSR set to: 1
  4026                           ;TSIO.c: 162:                         state = 4;
  4027  000548  0E04               	movlw	4
  4028  00054A                     L3:
  4029  00054A  6E22               	movwf	motorTX@state^0,c
  4030  00054C  D00E               	goto	l8320
  4031  00054E                     l8318:
  4032                           
  4033                           ; BSR set to: 1
  4034  00054E  5029               	movf	_action^0,w,c
  4035  000550  6FB0               	movwf	??_motorTX& (0+255),b
  4036  000552  6BB1               	clrf	(??_motorTX+1)& (0+255),b
  4037                           
  4038                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4039                           ; Switch size 1, requested type "space"
  4040                           ; Number of cases is 1, Range of values is 0 to 0
  4041                           ; switch strategies available:
  4042                           ; Name         Instructions Cycles
  4043                           ; simple_byte            4     3 (average)
  4044                           ;	Chosen strategy is simple_byte
  4045  000554  51B1               	movf	(??_motorTX+1)& (0+255),w,b
  4046  000556  E109               	bnz	l8320
  4047                           
  4048                           ; BSR set to: 1
  4049                           ; Switch size 1, requested type "space"
  4050                           ; Number of cases is 4, Range of values is 68 to 84
  4051                           ; switch strategies available:
  4052                           ; Name         Instructions Cycles
  4053                           ; simple_byte           13     7 (average)
  4054                           ;	Chosen strategy is simple_byte
  4055  000558  51B0               	movf	??_motorTX& (0+255),w,b
  4056  00055A  0A44               	xorlw	68	; case 68
  4057  00055C  E0E5               	bz	l1053
  4058  00055E  0A14               	xorlw	20	; case 80
  4059  000560  E0EF               	bz	l1057
  4060  000562  0A03               	xorlw	3	; case 83
  4061  000564  E0E7               	bz	l1055
  4062  000566  0A07               	xorlw	7	; case 84
  4063  000568  E0D9               	bz	l1050
  4064  00056A                     l8320:
  4065                           
  4066                           ; BSR set to: 1
  4067                           ;TSIO.c: 167:             if (enviaNom) {
  4068  00056A  5028               	movf	_enviaNom^0,w,c
  4069  00056C  B4D8               	btfsc	status,2,c
  4070  00056E  0012               	return	
  4071                           
  4072                           ; BSR set to: 1
  4073                           ;TSIO.c: 168:                 if (count < 5) {
  4074  000570  0E05               	movlw	5
  4075  000572  6046               	cpfslt	_count^0,c
  4076  000574  D00C               	goto	l8332
  4077                           
  4078                           ; BSR set to: 1
  4079                           ;TSIO.c: 169:                     if (TXSTAbits.TRMT == 1){
  4080  000576  A2AC               	btfss	172,1,c	;volatile
  4081  000578  0C05               	retlw	5
  4082                           
  4083                           ; BSR set to: 1
  4084                           ;TSIO.c: 170:                         if(count != 0){
  4085  00057A  5046               	movf	_count^0,w,c
  4086  00057C  E006               	bz	l8330
  4087                           
  4088                           ; BSR set to: 1
  4089                           ;TSIO.c: 171:                             TXREG = sendName[count];
  4090  00057E  5046               	movf	_count^0,w,c
  4091  000580  0FE4               	addlw	low _sendName
  4092  000582  6ED9               	movwf	fsr2l,c
  4093  000584  6ADA               	clrf	fsr2h,c
  4094  000586  50DF               	movf	indf2,w,c
  4095  000588  6EAD               	movwf	173,c	;volatile
  4096  00058A                     l8330:
  4097                           
  4098                           ; BSR set to: 1
  4099                           ;TSIO.c: 173:                         count++;
  4100  00058A  2A46               	incf	_count^0,f,c
  4101  00058C  0012               	return	
  4102  00058E                     l8332:
  4103                           
  4104                           ; BSR set to: 1
  4105                           ;TSIO.c: 176:                     changeMode(1);
  4106  00058E  0E01               	movlw	1
  4107  000590  EC08  F00E         	call	_changeMode
  4108                           
  4109                           ;TSIO.c: 177:                     count = 0;
  4110  000594  6A46               	clrf	_count^0,c
  4111                           
  4112                           ;TSIO.c: 178:                     enviaNom = 0;
  4113  000596  6A28               	clrf	_enviaNom^0,c
  4114                           
  4115                           ;TSIO.c: 179:                     state = 0;
  4116  000598  6A22               	clrf	motorTX@state^0,c
  4117  00059A  0012               	return	
  4118  00059C                     l8340:
  4119                           
  4120                           ; BSR set to: 1
  4121                           ;TSIO.c: 184:             if (count < 6) {
  4122  00059C  0E06               	movlw	6
  4123  00059E  6046               	cpfslt	_count^0,c
  4124  0005A0  D016               	goto	l1066
  4125                           
  4126                           ; BSR set to: 1
  4127                           ;TSIO.c: 185:                 if (TXSTAbits.TRMT == 1){
  4128  0005A2  A2AC               	btfss	172,1,c	;volatile
  4129  0005A4  0C06               	retlw	6
  4130                           
  4131                           ; BSR set to: 1
  4132                           ;TSIO.c: 186:                     TXREG = time[count];
  4133  0005A6  D848               	call	PL76	;call to abstracted procedure
  4134  0005A8  50DF               	movf	indf2,w,c
  4135  0005AA  6EAD               	movwf	173,c	;volatile
  4136                           
  4137                           ; BSR set to: 1
  4138                           ;TSIO.c: 187:                     num = getNT();
  4139  0005AC  EC5B  F00E         	call	_getNT	;wreg free
  4140  0005B0  0101               	movlb	1	; () banked
  4141  0005B2  6FB2               	movwf	motorTX@num& (0+255),b
  4142                           
  4143                           ; BSR set to: 1
  4144                           ;TSIO.c: 188:                     recordings[num].timestmp[count] = time[count];
  4145  0005B4  D841               	call	PL76	;call to abstracted procedure
  4146  0005B6  51B2               	movf	motorTX@num& (0+255),w,b
  4147  0005B8  D839               	call	PL64	;call to abstracted procedure
  4148  0005BA  0E04               	movlw	4
  4149  0005BC  27B0               	addwf	??_motorTX& (0+255),f,b
  4150  0005BE  D82D               	call	PL28	;call to abstracted procedure
  4151  0005C0  6EE1               	movwf	fsr1l,c
  4152  0005C2  0E00               	movlw	0
  4153  0005C4  21B1               	addwfc	(??_motorTX+1)& (0+255),w,b
  4154  0005C6  6EE2               	movwf	fsr1h,c
  4155  0005C8  CFDF FFE7          	movff	indf2,indf1
  4156  0005CC  D7DE               	goto	l8330
  4157  0005CE                     l1066:
  4158                           
  4159                           ; BSR set to: 1
  4160                           ;TSIO.c: 192:                 count = 0;
  4161  0005CE  6A46               	clrf	_count^0,c
  4162                           
  4163                           ;TSIO.c: 193:                 state = 0;
  4164  0005D0  6A22               	clrf	motorTX@state^0,c
  4165  0005D2  0012               	return	
  4166  0005D4                     l8352:
  4167                           
  4168                           ; BSR set to: 1
  4169                           ;TSIO.c: 197:             if (ok) {
  4170  0005D4  5025               	movf	_ok^0,w,c
  4171  0005D6  B4D8               	btfsc	status,2,c
  4172  0005D8  0012               	return	
  4173                           
  4174                           ; BSR set to: 1
  4175                           ;TSIO.c: 198:                 if (count < 3) {
  4176  0005DA  0E03               	movlw	3
  4177  0005DC  6046               	cpfslt	_count^0,c
  4178  0005DE  D7F7               	goto	l1066
  4179                           
  4180                           ; BSR set to: 1
  4181                           ;TSIO.c: 199:                     if (TXSTAbits.TRMT == 1){
  4182  0005E0  A2AC               	btfss	172,1,c	;volatile
  4183  0005E2  0C03               	retlw	3
  4184                           
  4185                           ; BSR set to: 1
  4186                           ;TSIO.c: 200:                         TXREG = recordings[s].index[count+1];
  4187  0005E4  5026               	movf	_s^0,w,c
  4188  0005E6  D822               	call	PL64	;call to abstracted procedure
  4189  0005E8  2BB0               	incf	??_motorTX& (0+255),f,b
  4190  0005EA  D817               	call	PL28	;call to abstracted procedure
  4191  0005EC  6ED9               	movwf	fsr2l,c
  4192  0005EE  0E00               	movlw	0
  4193  0005F0  21B1               	addwfc	(??_motorTX+1)& (0+255),w,b
  4194  0005F2  6EDA               	movwf	fsr2h,c
  4195  0005F4  D7C8               	goto	L4
  4196  0005F6                     l8364:
  4197  0005F6  5022               	movf	motorTX@state^0,w,c
  4198  0005F8  0101               	movlb	1	; () banked
  4199  0005FA  6FB0               	movwf	??_motorTX& (0+255),b
  4200  0005FC  6BB1               	clrf	(??_motorTX+1)& (0+255),b
  4201                           
  4202                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4203                           ; Switch size 1, requested type "space"
  4204                           ; Number of cases is 1, Range of values is 0 to 0
  4205                           ; switch strategies available:
  4206                           ; Name         Instructions Cycles
  4207                           ; simple_byte            4     3 (average)
  4208                           ;	Chosen strategy is simple_byte
  4209  0005FE  51B1               	movf	(??_motorTX+1)& (0+255),w,b
  4210  000600  A4D8               	btfss	status,2,c
  4211  000602  0012               	return	
  4212                           
  4213                           ; BSR set to: 1
  4214                           ; Switch size 1, requested type "space"
  4215                           ; Number of cases is 5, Range of values is 0 to 4
  4216                           ; switch strategies available:
  4217                           ; Name         Instructions Cycles
  4218                           ; simple_byte           16     9 (average)
  4219                           ;	Chosen strategy is simple_byte
  4220  000604  51B0               	movf	??_motorTX& (0+255),w,b
  4221  000606  E082               	bz	l8298
  4222  000608  0A01               	xorlw	1	; case 1
  4223  00060A  E086               	bz	l1048
  4224  00060C  0A03               	xorlw	3	; case 2
  4225  00060E  E0AD               	bz	l8320
  4226  000610  0A01               	xorlw	1	; case 3
  4227  000612  E0C4               	bz	l8340
  4228  000614  0A07               	xorlw	7	; case 4
  4229  000616  E0DE               	bz	l8352
  4230  000618  0012               	return		;funcret
  4231  00061A                     __end_of_motorTX:
  4232                           	callstack 0
  4233  00061A                     PL28:
  4234                           	callstack 21
  4235  00061A  0E00               	movlw	0
  4236  00061C  23B1               	addwfc	(??_motorTX+1)& (0+255),f,b
  4237  00061E  50F3               	movf	243,w,c
  4238  000620  27B0               	addwf	??_motorTX& (0+255),f,b
  4239  000622  50F4               	movf	244,w,c
  4240  000624  23B1               	addwfc	(??_motorTX+1)& (0+255),f,b
  4241  000626  5046               	movf	_count^0,w,c
  4242  000628  25B0               	addwf	??_motorTX& (0+255),w,b
  4243  00062A  0012               	return	
  4244  00062C                     __end_ofPL28:
  4245                           	callstack 0
  4246  00062C                     PL64:
  4247                           	callstack 21
  4248  00062C  0D0A               	mullw	10
  4249  00062E  0E60               	movlw	low _recordings
  4250  000630  6FB0               	movwf	??_motorTX& (0+255),b
  4251  000632  0E01               	movlw	high _recordings
  4252  000634  6FB1               	movwf	(??_motorTX+1)& (0+255),b
  4253  000636  0012               	return	
  4254  000638                     __end_ofPL64:
  4255                           	callstack 0
  4256  000638                     PL76:
  4257                           	callstack 21
  4258  000638  5046               	movf	_count^0,w,c
  4259  00063A  0F50               	addlw	low _time
  4260  00063C  6ED9               	movwf	fsr2l,c
  4261  00063E  6ADA               	clrf	fsr2h,c
  4262  000640  0012               	return	
  4263  000642                     __end_ofPL76:
  4264                           	callstack 0
  4265                           
  4266 ;; *************** function _motorSound *****************
  4267 ;; Defined at:
  4268 ;;		line 44 in file "TSound.c"
  4269 ;; Parameters:    Size  Location     Type
  4270 ;;		None
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;		None
  4273 ;; Return value:  Size  Location     Type
  4274 ;;                  1    wreg      void 
  4275 ;; Registers used:
  4276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4277 ;; Tracked objects:
  4278 ;;		On entry : 0/0
  4279 ;;		On exit  : 0/0
  4280 ;;		Unchanged: 0/0
  4281 ;; Data sizes:     COMRAM   BANK0   BANK1
  4282 ;;      Params:         0       0       0
  4283 ;;      Locals:         0       0       0
  4284 ;;      Temps:          2       0       0
  4285 ;;      Totals:         2       0       0
  4286 ;;Total ram usage:        2 bytes
  4287 ;; Hardware stack levels used: 1
  4288 ;; Hardware stack levels required when called: 4
  4289 ;; This function calls:
  4290 ;;		_TiGetTics
  4291 ;;		_TiResetTics
  4292 ;; This function is called by:
  4293 ;;		_main
  4294 ;; This function uses a non-reentrant model
  4295 ;;
  4296                           
  4297                           	psect	text26
  4298  0010C0                     __ptext26:
  4299                           	callstack 0
  4300  0010C0                     _motorSound:
  4301                           	callstack 26
  4302                           
  4303                           ;TSound.c: 45:     static unsigned char state = 0;;TSound.c: 48:     if (sound) {
  4304                           
  4305                           ;incstack = 0
  4306  0010C0  5019               	movf	_sound^0,w,c
  4307  0010C2  E11E               	bnz	l8284
  4308  0010C4  0012               	return	
  4309  0010C6                     l8266:
  4310                           
  4311                           ;TSound.c: 52:             if (TiGetTics(timer) >= (nota >> 1)){
  4312  0010C6  D830               	call	PL60	;call to abstracted procedure
  4313  0010C8  EC57  F00C         	call	_TiGetTics
  4314  0010CC  506C               	movf	??_motorSound^0,w,c
  4315  0010CE  5C65               	subwf	?_TiGetTics^0,w,c
  4316  0010D0  506D               	movf	(??_motorSound+1)^0,w,c
  4317  0010D2  5866               	subwfb	(?_TiGetTics+1)^0,w,c
  4318  0010D4  E31E               	bnc	l8286
  4319                           
  4320                           ;TSound.c: 53:               TiResetTics(timer);
  4321  0010D6  501D               	movf	_timer@TSound$F1621^0,w,c
  4322  0010D8  EC1A  F00E         	call	_TiResetTics
  4323                           
  4324                           ;TSound.c: 54:               LATAbits.LATA5 = 1;
  4325  0010DC  8A89               	bsf	137,5,c	;volatile
  4326                           
  4327                           ;TSound.c: 55:               state = 1;
  4328  0010DE  0E01               	movlw	1
  4329  0010E0  6E17               	movwf	motorSound@state^0,c
  4330  0010E2  D017               	goto	l8286
  4331  0010E4                     l8274:
  4332                           
  4333                           ;TSound.c: 59:             if (TiGetTics(timer) >= (nota >> 1)){
  4334  0010E4  D821               	call	PL60	;call to abstracted procedure
  4335  0010E6  EC57  F00C         	call	_TiGetTics
  4336  0010EA  506C               	movf	??_motorSound^0,w,c
  4337  0010EC  5C65               	subwf	?_TiGetTics^0,w,c
  4338  0010EE  506D               	movf	(??_motorSound+1)^0,w,c
  4339  0010F0  5866               	subwfb	(?_TiGetTics+1)^0,w,c
  4340  0010F2  E30F               	bnc	l8286
  4341                           
  4342                           ;TSound.c: 60:               TiResetTics(timer);
  4343  0010F4  501D               	movf	_timer@TSound$F1621^0,w,c
  4344  0010F6  EC1A  F00E         	call	_TiResetTics
  4345                           
  4346                           ;TSound.c: 61:               LATAbits.LATA5 = 0;
  4347  0010FA  9A89               	bcf	137,5,c	;volatile
  4348                           
  4349                           ;TSound.c: 62:               state = 0;
  4350  0010FC  6A17               	clrf	motorSound@state^0,c
  4351  0010FE  D009               	goto	l8286
  4352  001100                     l8284:
  4353  001100  5017               	movf	motorSound@state^0,w,c
  4354  001102  6E6C               	movwf	??_motorSound^0,c
  4355  001104  6A6D               	clrf	(??_motorSound+1)^0,c
  4356                           
  4357                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4358                           ; Switch size 1, requested type "space"
  4359                           ; Number of cases is 1, Range of values is 0 to 0
  4360                           ; switch strategies available:
  4361                           ; Name         Instructions Cycles
  4362                           ; simple_byte            4     3 (average)
  4363                           ;	Chosen strategy is simple_byte
  4364  001106  506D               	movf	(??_motorSound+1)^0,w,c
  4365  001108  E104               	bnz	l8286
  4366                           
  4367                           ; Switch size 1, requested type "space"
  4368                           ; Number of cases is 2, Range of values is 0 to 1
  4369                           ; switch strategies available:
  4370                           ; Name         Instructions Cycles
  4371                           ; simple_byte            7     4 (average)
  4372                           ;	Chosen strategy is simple_byte
  4373  00110A  506C               	movf	??_motorSound^0,w,c
  4374  00110C  E0DC               	bz	l8266
  4375  00110E  0A01               	xorlw	1	; case 1
  4376  001110  E0E9               	bz	l8274
  4377  001112                     l8286:
  4378                           
  4379                           ;TSound.c: 68:         if (TiGetTics(timer2) >= 400){
  4380  001112  501C               	movf	_timer2@TSound$F1622^0,w,c
  4381  001114  EC57  F00C         	call	_TiGetTics
  4382  001118  D80D               	call	PL88	;call to abstracted procedure
  4383  00111A  A0D8               	btfss	status,0,c
  4384  00111C  0012               	return	
  4385                           
  4386                           ;TSound.c: 69:             TiResetTics(timer2);
  4387  00111E  501C               	movf	_timer2@TSound$F1622^0,w,c
  4388  001120  EC1A  F00E         	call	_TiResetTics
  4389                           
  4390                           ;TSound.c: 70:             sound = 0;
  4391  001124  6A19               	clrf	_sound^0,c
  4392  001126  0012               	return		;funcret
  4393  001128                     __end_of_motorSound:
  4394                           	callstack 0
  4395  001128                     PL60:
  4396                           	callstack 26
  4397  001128  90D8               	bcf	status,0,c
  4398  00112A  301A               	rrcf	_nota^0,w,c
  4399  00112C  6E6C               	movwf	??_motorSound^0,c
  4400  00112E  6A6D               	clrf	(??_motorSound+1)^0,c
  4401  001130  501D               	movf	_timer@TSound$F1621^0,w,c
  4402  001132  0012               	return	
  4403  001134                     __end_ofPL60:
  4404                           	callstack 0
  4405  001134                     PL88:
  4406                           	callstack 22
  4407  001134  0E90               	movlw	144
  4408  001136  5C65               	subwf	?_TiGetTics^0,w,c
  4409  001138  0E01               	movlw	1
  4410  00113A  5866               	subwfb	(?_TiGetTics+1)^0,w,c
  4411  00113C  0012               	return	
  4412  00113E                     __end_ofPL88:
  4413                           	callstack 0
  4414                           
  4415 ;; *************** function _motorRX *****************
  4416 ;; Defined at:
  4417 ;;		line 83 in file "TSIO.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;		None
  4420 ;; Auto vars:     Size  Location     Type
  4421 ;;  num             1    2[BANK1 ] unsigned char 
  4422 ;; Return value:  Size  Location     Type
  4423 ;;                  1    wreg      void 
  4424 ;; Registers used:
  4425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMRAM   BANK0   BANK1
  4431 ;;      Params:         0       0       0
  4432 ;;      Locals:         0       0       1
  4433 ;;      Temps:          0       0       2
  4434 ;;      Totals:         0       0       3
  4435 ;;Total ram usage:        3 bytes
  4436 ;; Hardware stack levels used: 1
  4437 ;; Hardware stack levels required when called: 9
  4438 ;; This function calls:
  4439 ;;		_activeWritting
  4440 ;;		_changeMode
  4441 ;;		_cleanMarquesina
  4442 ;;		_getNT
  4443 ;;		_playMelody
  4444 ;;		_updateNT
  4445 ;;		_updatePT
  4446 ;; This function is called by:
  4447 ;;		_main
  4448 ;; This function uses a non-reentrant model
  4449 ;;
  4450                           
  4451                           	psect	text27
  4452  000AAC                     __ptext27:
  4453                           	callstack 0
  4454  000AAC                     _motorRX:
  4455                           	callstack 21
  4456                           
  4457                           ;TSIO.c: 84:     static char info;;TSIO.c: 85:     unsigned char num;;TSIO.c: 87:     if
      +                           (PIR1bits.RCIF == 1){
  4458                           
  4459                           ;incstack = 0
  4460  000AAC  AA9E               	btfss	158,5,c	;volatile
  4461  000AAE  0012               	return	
  4462                           
  4463                           ;TSIO.c: 88:         info = RCREG;
  4464  000AB0  CFAE F023          	movff	4014,motorRX@info	;volatile
  4465                           
  4466                           ;TSIO.c: 90:         if (info == 'K' && mode == 0) {
  4467  000AB4  0E4B               	movlw	75
  4468  000AB6  1823               	xorwf	motorRX@info^0,w,c
  4469  000AB8  E107               	bnz	l8440
  4470  000ABA  5045               	movf	_mode^0,w,c
  4471  000ABC  E105               	bnz	l8440
  4472                           
  4473                           ;TSIO.c: 91:             cleanMarquesina();
  4474  000ABE  EC11  F00E         	call	_cleanMarquesina	;wreg free
  4475                           
  4476                           ;TSIO.c: 92:             enviaNom = 1;
  4477  000AC2  0E01               	movlw	1
  4478  000AC4  6E28               	movwf	_enviaNom^0,c
  4479                           
  4480                           ;TSIO.c: 93:         } else if(info == 'J'){
  4481  000AC6  0C01               	retlw	1
  4482  000AC8                     l8440:
  4483  000AC8  0E4A               	movlw	74
  4484  000ACA  1823               	xorwf	motorRX@info^0,w,c
  4485  000ACC  E102               	bnz	l8444
  4486                           
  4487                           ;TSIO.c: 94:             playMelody();
  4488  000ACE  EF73  F00D         	goto	_playMelody	;wreg free
  4489  000AD2                     l8444:
  4490  000AD2  0E4B               	movlw	75
  4491  000AD4  1823               	xorwf	motorRX@info^0,w,c
  4492  000AD6  E106               	bnz	l8450
  4493  000AD8  0E03               	movlw	3
  4494  000ADA  1845               	xorwf	_mode^0,w,c
  4495  000ADC  E103               	bnz	l8450
  4496                           
  4497                           ;TSIO.c: 96:             ok = 1;
  4498  000ADE  0E01               	movlw	1
  4499  000AE0  6E25               	movwf	_ok^0,c
  4500                           
  4501                           ;TSIO.c: 97:         }else if(info == 'F'){
  4502  000AE2  0C01               	retlw	1
  4503  000AE4                     l8450:
  4504  000AE4  0E46               	movlw	70
  4505  000AE6  1823               	xorwf	motorRX@info^0,w,c
  4506  000AE8  E103               	bnz	l8454
  4507                           
  4508                           ;TSIO.c: 98:            changeMode(1);
  4509  000AEA  0E01               	movlw	1
  4510  000AEC  EF08  F00E         	goto	_changeMode
  4511  000AF0                     l8454:
  4512  000AF0  0E4F               	movlw	79
  4513  000AF2  1823               	xorwf	motorRX@info^0,w,c
  4514  000AF4  E107               	bnz	l8462
  4515                           
  4516                           ;TSIO.c: 100:            changeMode(1);
  4517  000AF6  0E01               	movlw	1
  4518  000AF8  EC08  F00E         	call	_changeMode
  4519                           
  4520                           ;TSIO.c: 101:            recording = 0;
  4521  000AFC  6A42               	clrf	_recording^0,c
  4522                           
  4523                           ;TSIO.c: 102:            flying = 0;
  4524  000AFE  6A24               	clrf	_flying^0,c
  4525                           
  4526                           ;TSIO.c: 103:            playMelody();
  4527  000B00  EF73  F00D         	goto	_playMelody	;wreg free
  4528  000B04                     l8462:
  4529                           
  4530                           ;TSIO.c: 105:             num = getNT();
  4531  000B04  EC5B  F00E         	call	_getNT	;wreg free
  4532                           
  4533                           ; BSR set to: 1
  4534                           ;TSIO.c: 106:             recordings[num].index[i] = info;
  4535  000B08  D839               	call	PL58	;call to abstracted procedure
  4536  000B0A  6FB0               	movwf	??_motorRX& (0+255),b
  4537  000B0C  0E01               	movlw	high _recordings
  4538  000B0E  6FB1               	movwf	(??_motorRX+1)& (0+255),b
  4539  000B10  50F3               	movf	243,w,c
  4540  000B12  27B0               	addwf	??_motorRX& (0+255),f,b
  4541  000B14  50F4               	movf	244,w,c
  4542  000B16  23B1               	addwfc	(??_motorRX+1)& (0+255),f,b
  4543  000B18  5027               	movf	_i^0,w,c
  4544  000B1A  25B0               	addwf	??_motorRX& (0+255),w,b
  4545  000B1C  6ED9               	movwf	fsr2l,c
  4546  000B1E  0E00               	movlw	0
  4547  000B20  21B1               	addwfc	(??_motorRX+1)& (0+255),w,b
  4548  000B22  6EDA               	movwf	fsr2h,c
  4549  000B24  C023  FFDF         	movff	motorRX@info,indf2
  4550                           
  4551                           ; BSR set to: 1
  4552                           ;TSIO.c: 107:             i++;
  4553  000B28  2A27               	incf	_i^0,f,c
  4554                           
  4555                           ; BSR set to: 1
  4556                           ;TSIO.c: 109:             if (i == 3) {
  4557  000B2A  0E03               	movlw	3
  4558  000B2C  1827               	xorwf	_i^0,w,c
  4559  000B2E  A4D8               	btfss	status,2,c
  4560  000B30  0012               	return	
  4561                           
  4562                           ; BSR set to: 1
  4563                           ;TSIO.c: 110:                 num = getNT();
  4564  000B32  EC5B  F00E         	call	_getNT	;wreg free
  4565                           
  4566                           ; BSR set to: 1
  4567                           ;TSIO.c: 111:                 recordings[num].index[0] = 'I';
  4568  000B36  D822               	call	PL58	;call to abstracted procedure
  4569  000B38  24F3               	addwf	243,w,c
  4570  000B3A  6ED9               	movwf	fsr2l,c
  4571  000B3C  0E01               	movlw	high _recordings
  4572  000B3E  20F4               	addwfc	prodh,w,c
  4573  000B40  6EDA               	movwf	fsr2h,c
  4574  000B42  0E49               	movlw	73
  4575  000B44  6EDF               	movwf	indf2,c
  4576                           
  4577                           ; BSR set to: 1
  4578                           ;TSIO.c: 112:                 recordings[num].index[3] = '\0';
  4579  000B46  51B2               	movf	motorRX@num& (0+255),w,b
  4580  000B48  0D0A               	mullw	10
  4581  000B4A  0E63               	movlw	low (_recordings+3)
  4582  000B4C  24F3               	addwf	243,w,c
  4583  000B4E  6ED9               	movwf	fsr2l,c
  4584  000B50  0E01               	movlw	high (_recordings+3)
  4585  000B52  20F4               	addwfc	prodh,w,c
  4586  000B54  6EDA               	movwf	fsr2h,c
  4587  000B56  0E00               	movlw	0
  4588  000B58  6ADF               	clrf	indf2,c
  4589                           
  4590                           ; BSR set to: 1
  4591                           ;TSIO.c: 113:                 updateNT();
  4592  000B5A  EC57  F00E         	call	_updateNT	;wreg free
  4593                           
  4594                           ; BSR set to: 1
  4595                           ;TSIO.c: 114:                 num = getNT();
  4596  000B5E  EC5B  F00E         	call	_getNT	;wreg free
  4597  000B62  0101               	movlb	1	; () banked
  4598  000B64  6FB2               	movwf	motorRX@num& (0+255),b
  4599                           
  4600                           ; BSR set to: 1
  4601                           ;TSIO.c: 115:                 if (num == 7) {
  4602  000B66  0E07               	movlw	7
  4603  000B68  19B2               	xorwf	motorRX@num& (0+255),w,b
  4604  000B6A  E102               	bnz	l1038
  4605                           
  4606                           ; BSR set to: 1
  4607                           ;TSIO.c: 116:                     updatePT();
  4608  000B6C  EC51  F00E         	call	_updatePT	;wreg free
  4609  000B70                     l1038:
  4610                           
  4611                           ; BSR set to: 1
  4612                           ;TSIO.c: 119:                 activeWritting();
  4613  000B70  EC54  F00E         	call	_activeWritting	;wreg free
  4614                           
  4615                           ; BSR set to: 1
  4616                           ;TSIO.c: 120:                 flying = 1;
  4617  000B74  0E01               	movlw	1
  4618  000B76  6E24               	movwf	_flying^0,c
  4619                           
  4620                           ; BSR set to: 1
  4621                           ;TSIO.c: 121:                 i = 1;
  4622  000B78  6E27               	movwf	_i^0,c
  4623  000B7A  0C01               	retlw	1
  4624  000B7C                     __end_of_motorRX:
  4625                           	callstack 0
  4626  000B7C                     PL58:
  4627                           	callstack 21
  4628  000B7C  0101               	movlb	1	; () banked
  4629  000B7E  6FB2               	movwf	motorRX@num& (0+255),b
  4630  000B80  51B2               	movf	motorRX@num& (0+255),w,b
  4631  000B82  0D0A               	mullw	10
  4632  000B84  0E60               	movlw	low _recordings
  4633  000B86  0012               	return	
  4634  000B88                     __end_ofPL58:
  4635                           	callstack 0
  4636                           
  4637 ;; *************** function _updatePT *****************
  4638 ;; Defined at:
  4639 ;;		line 69 in file "TRom.c"
  4640 ;; Parameters:    Size  Location     Type
  4641 ;;		None
  4642 ;; Auto vars:     Size  Location     Type
  4643 ;;		None
  4644 ;; Return value:  Size  Location     Type
  4645 ;;                  1    wreg      void 
  4646 ;; Registers used:
  4647 ;;		wreg, status,2
  4648 ;; Tracked objects:
  4649 ;;		On entry : 3F/1
  4650 ;;		On exit  : 3F/1
  4651 ;;		Unchanged: 3F/0
  4652 ;; Data sizes:     COMRAM   BANK0   BANK1
  4653 ;;      Params:         0       0       0
  4654 ;;      Locals:         0       0       0
  4655 ;;      Temps:          0       0       0
  4656 ;;      Totals:         0       0       0
  4657 ;;Total ram usage:        0 bytes
  4658 ;; Hardware stack levels used: 1
  4659 ;; Hardware stack levels required when called: 3
  4660 ;; This function calls:
  4661 ;;		Nothing
  4662 ;; This function is called by:
  4663 ;;		_motorRX
  4664 ;; This function uses a non-reentrant model
  4665 ;;
  4666                           
  4667                           	psect	text28
  4668  001CA2                     __ptext28:
  4669                           	callstack 0
  4670  001CA2                     _updatePT:
  4671                           	callstack 26
  4672                           
  4673                           ; BSR set to: 1
  4674                           ;TRom.c: 70:     pit = 8;
  4675                           
  4676                           ;incstack = 0
  4677  001CA2  0E08               	movlw	8
  4678  001CA4  6E2D               	movwf	_pit^0,c
  4679                           
  4680                           ; BSR set to: 1
  4681  001CA6  0C08               	retlw	8	;funcret
  4682  001CA8                     __end_of_updatePT:
  4683                           	callstack 0
  4684                           
  4685 ;; *************** function _updateNT *****************
  4686 ;; Defined at:
  4687 ;;		line 65 in file "TRom.c"
  4688 ;; Parameters:    Size  Location     Type
  4689 ;;		None
  4690 ;; Auto vars:     Size  Location     Type
  4691 ;;		None
  4692 ;; Return value:  Size  Location     Type
  4693 ;;                  1    wreg      void 
  4694 ;; Registers used:
  4695 ;;		status,2, status,0
  4696 ;; Tracked objects:
  4697 ;;		On entry : 3F/1
  4698 ;;		On exit  : 3F/1
  4699 ;;		Unchanged: 3F/0
  4700 ;; Data sizes:     COMRAM   BANK0   BANK1
  4701 ;;      Params:         0       0       0
  4702 ;;      Locals:         0       0       0
  4703 ;;      Temps:          0       0       0
  4704 ;;      Totals:         0       0       0
  4705 ;;Total ram usage:        0 bytes
  4706 ;; Hardware stack levels used: 1
  4707 ;; Hardware stack levels required when called: 3
  4708 ;; This function calls:
  4709 ;;		Nothing
  4710 ;; This function is called by:
  4711 ;;		_motorRX
  4712 ;; This function uses a non-reentrant model
  4713 ;;
  4714                           
  4715                           	psect	text29
  4716  001CAE                     __ptext29:
  4717                           	callstack 0
  4718  001CAE                     _updateNT:
  4719                           	callstack 26
  4720                           
  4721                           ; BSR set to: 1
  4722                           ;TRom.c: 66:     nTotal++;
  4723                           
  4724                           ; BSR set to: 1
  4725                           ;incstack = 0
  4726  001CAE  2A2E               	incf	_nTotal^0,f,c
  4727                           
  4728                           ; BSR set to: 1
  4729  001CB0  0012               	return		;funcret
  4730  001CB2                     __end_of_updateNT:
  4731                           	callstack 0
  4732                           
  4733 ;; *************** function _playMelody *****************
  4734 ;; Defined at:
  4735 ;;		line 35 in file "TSound.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;		None
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;		None
  4740 ;; Return value:  Size  Location     Type
  4741 ;;                  1    wreg      void 
  4742 ;; Registers used:
  4743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4744 ;; Tracked objects:
  4745 ;;		On entry : 0/0
  4746 ;;		On exit  : 0/0
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMRAM   BANK0   BANK1
  4749 ;;      Params:         0       0       0
  4750 ;;      Locals:         0       0       0
  4751 ;;      Temps:          0       0       0
  4752 ;;      Totals:         0       0       0
  4753 ;;Total ram usage:        0 bytes
  4754 ;; Hardware stack levels used: 1
  4755 ;; Hardware stack levels required when called: 4
  4756 ;; This function calls:
  4757 ;;		_TiResetTics
  4758 ;; This function is called by:
  4759 ;;		_motorRX
  4760 ;; This function uses a non-reentrant model
  4761 ;;
  4762                           
  4763                           	psect	text30
  4764  001AE6                     __ptext30:
  4765                           	callstack 0
  4766  001AE6                     _playMelody:
  4767                           	callstack 25
  4768                           
  4769                           ;TSound.c: 36:     nota = 5;
  4770                           
  4771                           ; BSR set to: 1
  4772                           ;incstack = 0
  4773  001AE6  0E05               	movlw	5
  4774  001AE8  6E1A               	movwf	_nota^0,c
  4775                           
  4776                           ;TSound.c: 37:     TiResetTics(timer);
  4777  001AEA  501D               	movf	_timer@TSound$F1621^0,w,c
  4778  001AEC  EC1A  F00E         	call	_TiResetTics
  4779                           
  4780                           ;TSound.c: 38:     TiResetTics(timer2);
  4781  001AF0  501C               	movf	_timer2@TSound$F1622^0,w,c
  4782  001AF2  EC1A  F00E         	call	_TiResetTics
  4783                           
  4784                           ;TSound.c: 39:     TiResetTics(timer3);
  4785  001AF6  501B               	movf	_timer3^0,w,c
  4786  001AF8  EC1A  F00E         	call	_TiResetTics
  4787                           
  4788                           ;TSound.c: 40:     melody = 1;
  4789  001AFC  0E01               	movlw	1
  4790  001AFE  6E18               	movwf	_melody^0,c
  4791  001B00  0C01               	retlw	1	;funcret
  4792  001B02                     __end_of_playMelody:
  4793                           	callstack 0
  4794                           
  4795 ;; *************** function _changeMode *****************
  4796 ;; Defined at:
  4797 ;;		line 170 in file "TCentral.c"
  4798 ;; Parameters:    Size  Location     Type
  4799 ;;  u               1    wreg     unsigned char 
  4800 ;; Auto vars:     Size  Location     Type
  4801 ;;  u               1   25[COMRAM] unsigned char 
  4802 ;; Return value:  Size  Location     Type
  4803 ;;                  1    wreg      void 
  4804 ;; Registers used:
  4805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4806 ;; Tracked objects:
  4807 ;;		On entry : 0/1
  4808 ;;		On exit  : 0/0
  4809 ;;		Unchanged: 0/0
  4810 ;; Data sizes:     COMRAM   BANK0   BANK1
  4811 ;;      Params:         0       0       0
  4812 ;;      Locals:         1       0       0
  4813 ;;      Temps:          0       0       0
  4814 ;;      Totals:         1       0       0
  4815 ;;Total ram usage:        1 bytes
  4816 ;; Hardware stack levels used: 1
  4817 ;; Hardware stack levels required when called: 8
  4818 ;; This function calls:
  4819 ;;		_changeMenu
  4820 ;;		_setMode
  4821 ;; This function is called by:
  4822 ;;		_modifyHora
  4823 ;;		_enterMode
  4824 ;;		_manageKey
  4825 ;;		_motorRX
  4826 ;;		_motorTX
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830                           	psect	text31
  4831  001C10                     __ptext31:
  4832                           	callstack 0
  4833  001C10                     _changeMode:
  4834                           	callstack 19
  4835                           
  4836                           ;incstack = 0
  4837                           ;changeMode@u stored from wreg
  4838  001C10  6E73               	movwf	changeMode@u^0,c
  4839                           
  4840                           ;TCentral.c: 171:     mode = u;
  4841  001C12  C073  F045         	movff	changeMode@u,_mode
  4842                           
  4843                           ;TCentral.c: 172:     changeMenu(u);
  4844  001C16  5073               	movf	changeMode@u^0,w,c
  4845  001C18  ECE2  F00D         	call	_changeMenu
  4846                           
  4847                           ;TCentral.c: 173:     setMode(u);
  4848  001C1C  5073               	movf	changeMode@u^0,w,c
  4849  001C1E  EF47  F00E         	goto	_setMode
  4850  001C22                     __end_of_changeMode:
  4851                           	callstack 0
  4852                           
  4853 ;; *************** function _setMode *****************
  4854 ;; Defined at:
  4855 ;;		line 78 in file "TSIO.c"
  4856 ;; Parameters:    Size  Location     Type
  4857 ;;  m               1    wreg     unsigned char 
  4858 ;; Auto vars:     Size  Location     Type
  4859 ;;  m               1   11[COMRAM] unsigned char 
  4860 ;; Return value:  Size  Location     Type
  4861 ;;                  1    wreg      void 
  4862 ;; Registers used:
  4863 ;;		wreg
  4864 ;; Tracked objects:
  4865 ;;		On entry : 0/1
  4866 ;;		On exit  : 0/0
  4867 ;;		Unchanged: 0/0
  4868 ;; Data sizes:     COMRAM   BANK0   BANK1
  4869 ;;      Params:         0       0       0
  4870 ;;      Locals:         1       0       0
  4871 ;;      Temps:          0       0       0
  4872 ;;      Totals:         1       0       0
  4873 ;;Total ram usage:        1 bytes
  4874 ;; Hardware stack levels used: 1
  4875 ;; Hardware stack levels required when called: 3
  4876 ;; This function calls:
  4877 ;;		Nothing
  4878 ;; This function is called by:
  4879 ;;		_changeMode
  4880 ;; This function uses a non-reentrant model
  4881 ;;
  4882                           
  4883                           	psect	text32
  4884  001C8E                     __ptext32:
  4885                           	callstack 0
  4886  001C8E                     _setMode:
  4887                           	callstack 23
  4888                           
  4889                           ;incstack = 0
  4890                           ;setMode@m stored from wreg
  4891  001C8E  6E65               	movwf	setMode@m^0,c
  4892                           
  4893                           ;TSIO.c: 79:     mode = m;
  4894  001C90  C065  F045         	movff	setMode@m,_mode
  4895  001C94  0012               	return		;funcret
  4896  001C96                     __end_of_setMode:
  4897                           	callstack 0
  4898                           
  4899 ;; *************** function _changeMenu *****************
  4900 ;; Defined at:
  4901 ;;		line 61 in file "TMenu.c"
  4902 ;; Parameters:    Size  Location     Type
  4903 ;;  mode            1    wreg     unsigned char 
  4904 ;; Auto vars:     Size  Location     Type
  4905 ;;  mode            1   24[COMRAM] unsigned char 
  4906 ;; Return value:  Size  Location     Type
  4907 ;;                  1    wreg      void 
  4908 ;; Registers used:
  4909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4910 ;; Tracked objects:
  4911 ;;		On entry : 0/1
  4912 ;;		On exit  : 0/0
  4913 ;;		Unchanged: 0/0
  4914 ;; Data sizes:     COMRAM   BANK0   BANK1
  4915 ;;      Params:         0       0       0
  4916 ;;      Locals:         1       0       0
  4917 ;;      Temps:          0       0       0
  4918 ;;      Totals:         1       0       0
  4919 ;;Total ram usage:        1 bytes
  4920 ;; Hardware stack levels used: 1
  4921 ;; Hardware stack levels required when called: 7
  4922 ;; This function calls:
  4923 ;;		_TiResetTics
  4924 ;;		_cleanMarquesina
  4925 ;; This function is called by:
  4926 ;;		_changeMode
  4927 ;; This function uses a non-reentrant model
  4928 ;;
  4929                           
  4930                           	psect	text33
  4931  001BC4                     __ptext33:
  4932                           	callstack 0
  4933  001BC4                     _changeMenu:
  4934                           	callstack 19
  4935                           
  4936                           ;incstack = 0
  4937                           ;changeMenu@mode stored from wreg
  4938  001BC4  6E72               	movwf	changeMenu@mode^0,c
  4939                           
  4940                           ;TMenu.c: 62:     cleanMarquesina();
  4941  001BC6  EC11  F00E         	call	_cleanMarquesina	;wreg free
  4942                           
  4943                           ;TMenu.c: 63:     n = 0;
  4944  001BCA  6A43               	clrf	_n^0,c
  4945                           
  4946                           ;TMenu.c: 64:     TiResetTics(timer2);
  4947  001BCC  503C               	movf	_timer2^0,w,c
  4948  001BCE  EC1A  F00E         	call	_TiResetTics
  4949                           
  4950                           ;TMenu.c: 65:     caseMenu = mode;
  4951  001BD2  C072  F03B         	movff	changeMenu@mode,_caseMenu
  4952  001BD6  0012               	return		;funcret
  4953  001BD8                     __end_of_changeMenu:
  4954                           	callstack 0
  4955                           
  4956 ;; *************** function _activeWritting *****************
  4957 ;; Defined at:
  4958 ;;		line 73 in file "TRom.c"
  4959 ;; Parameters:    Size  Location     Type
  4960 ;;		None
  4961 ;; Auto vars:     Size  Location     Type
  4962 ;;		None
  4963 ;; Return value:  Size  Location     Type
  4964 ;;                  1    wreg      void 
  4965 ;; Registers used:
  4966 ;;		wreg, status,2
  4967 ;; Tracked objects:
  4968 ;;		On entry : 3F/1
  4969 ;;		On exit  : 3F/1
  4970 ;;		Unchanged: 3F/0
  4971 ;; Data sizes:     COMRAM   BANK0   BANK1
  4972 ;;      Params:         0       0       0
  4973 ;;      Locals:         0       0       0
  4974 ;;      Temps:          0       0       0
  4975 ;;      Totals:         0       0       0
  4976 ;;Total ram usage:        0 bytes
  4977 ;; Hardware stack levels used: 1
  4978 ;; Hardware stack levels required when called: 3
  4979 ;; This function calls:
  4980 ;;		Nothing
  4981 ;; This function is called by:
  4982 ;;		_motorRX
  4983 ;; This function uses a non-reentrant model
  4984 ;;
  4985                           
  4986                           	psect	text34
  4987  001CA8                     __ptext34:
  4988                           	callstack 0
  4989  001CA8                     _activeWritting:
  4990                           	callstack 26
  4991                           
  4992                           ; BSR set to: 1
  4993                           ;TRom.c: 74:     writting = 1;
  4994                           
  4995                           ;incstack = 0
  4996  001CA8  0E01               	movlw	1
  4997  001CAA  6E2F               	movwf	_writting^0,c
  4998                           
  4999                           ; BSR set to: 1
  5000  001CAC  0C01               	retlw	1	;funcret
  5001  001CAE                     __end_of_activeWritting:
  5002                           	callstack 0
  5003                           
  5004 ;; *************** function _motorROM *****************
  5005 ;; Defined at:
  5006 ;;		line 99 in file "TRom.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;		None
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;		None
  5011 ;; Return value:  Size  Location     Type
  5012 ;;                  1    wreg      void 
  5013 ;; Registers used:
  5014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMRAM   BANK0   BANK1
  5020 ;;      Params:         0       0       0
  5021 ;;      Locals:         0       0       0
  5022 ;;      Temps:          4       0       0
  5023 ;;      Totals:         4       0       0
  5024 ;;Total ram usage:        4 bytes
  5025 ;; Hardware stack levels used: 1
  5026 ;; Hardware stack levels required when called: 4
  5027 ;; This function calls:
  5028 ;;		_writeEEPROM
  5029 ;; This function is called by:
  5030 ;;		_main
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           	psect	text35
  5035  00089C                     __ptext35:
  5036                           	callstack 0
  5037  00089C                     _motorROM:
  5038                           	callstack 26
  5039                           
  5040                           ;TRom.c: 100:     static unsigned char stateROM = 0;;TRom.c: 102:     switch(stateROM){
  5041                           
  5042                           ; BSR set to: 1
  5043                           ;incstack = 0
  5044  00089C  D053               	goto	l5192
  5045  00089E                     l5124:
  5046                           
  5047                           ;TRom.c: 104:             if(writting){
  5048  00089E  502F               	movf	_writting^0,w,c
  5049  0008A0  B4D8               	btfsc	status,2,c
  5050  0008A2  0012               	return	
  5051                           
  5052                           ;TRom.c: 105:                 stateROM = 1;
  5053  0008A4  0E01               	movlw	1
  5054  0008A6  6E2B               	movwf	motorROM@stateROM^0,c
  5055  0008A8  0C01               	retlw	1
  5056  0008AA                     l891:
  5057                           
  5058                           ;TRom.c: 109:             writting = 0;
  5059  0008AA  6A2F               	clrf	_writting^0,c
  5060                           
  5061                           ;TRom.c: 110:             if(!EECON1bits.WR){
  5062  0008AC  B2A6               	btfsc	166,1,c	;volsfr
  5063  0008AE  0012               	return	
  5064                           
  5065                           ;TRom.c: 111:                 stateROM = 2;
  5066  0008B0  0E02               	movlw	2
  5067  0008B2  6E2B               	movwf	motorROM@stateROM^0,c
  5068  0008B4  0C02               	retlw	2
  5069  0008B6                     l5130:
  5070                           
  5071                           ;TRom.c: 115:             writeEEPROM(0, pit);
  5072  0008B6  C02D  F065         	movff	_pit,writeEEPROM@data
  5073  0008BA  0E00               	movlw	0
  5074  0008BC  EC55  F00D         	call	_writeEEPROM
  5075                           
  5076                           ;TRom.c: 116:             INTCONbits.GIE = 1;
  5077  0008C0  8EF2               	bsf	242,7,c	;volatile
  5078                           
  5079                           ;TRom.c: 117:             EECON1bits.WREN = 0;
  5080  0008C2  94A6               	bcf	166,2,c	;volsfr
  5081                           
  5082                           ;TRom.c: 118:             stateROM = 3;
  5083  0008C4  0E03               	movlw	3
  5084  0008C6  6E2B               	movwf	motorROM@stateROM^0,c
  5085                           
  5086                           ;TRom.c: 119:             break;
  5087  0008C8  0C03               	retlw	3
  5088  0008CA                     l894:
  5089                           
  5090                           ;TRom.c: 121:             if(!EECON1bits.WR){
  5091  0008CA  B2A6               	btfsc	166,1,c	;volsfr
  5092  0008CC  0012               	return	
  5093                           
  5094                           ;TRom.c: 122:                 stateROM = 4;
  5095  0008CE  0E04               	movlw	4
  5096  0008D0  6E2B               	movwf	motorROM@stateROM^0,c
  5097  0008D2  0C04               	retlw	4
  5098  0008D4                     l5140:
  5099                           
  5100                           ;TRom.c: 126:             writeEEPROM(1, nTotal);
  5101  0008D4  C02E  F065         	movff	_nTotal,writeEEPROM@data
  5102  0008D8  0E01               	movlw	1
  5103  0008DA  EC55  F00D         	call	_writeEEPROM
  5104                           
  5105                           ;TRom.c: 127:             INTCONbits.GIE = 1;
  5106  0008DE  8EF2               	bsf	242,7,c	;volatile
  5107                           
  5108                           ;TRom.c: 128:             EECON1bits.WREN = 0;
  5109  0008E0  94A6               	bcf	166,2,c	;volsfr
  5110  0008E2                     l5146:
  5111                           
  5112                           ;TRom.c: 129:             stateROM = 5;
  5113  0008E2  0E05               	movlw	5
  5114  0008E4  6E2B               	movwf	motorROM@stateROM^0,c
  5115                           
  5116                           ;TRom.c: 130:             break;
  5117  0008E6  0C05               	retlw	5
  5118  0008E8                     l897:
  5119                           
  5120                           ;TRom.c: 132:             if(!EECON1bits.WR){
  5121  0008E8  B2A6               	btfsc	166,1,c	;volsfr
  5122  0008EA  0012               	return	
  5123                           
  5124                           ;TRom.c: 133:                 stateROM = 6;
  5125  0008EC  0E06               	movlw	6
  5126  0008EE  6E2B               	movwf	motorROM@stateROM^0,c
  5127  0008F0  0C06               	retlw	6
  5128  0008F2                     l5150:
  5129                           
  5130                           ;TRom.c: 137:             if (counter < 6) {
  5131  0008F2  0E06               	movlw	6
  5132  0008F4  6032               	cpfslt	_counter^0,c
  5133  0008F6  D00B               	goto	l5164
  5134                           
  5135                           ;TRom.c: 138:                 writeEEPROM(addr, recordings[nTotal-1].timestmp[counter]);
  5136  0008F8  502E               	movf	_nTotal^0,w,c
  5137  0008FA  0D0A               	mullw	10
  5138  0008FC  0EFA               	movlw	250
  5139  0008FE  D83B               	call	PL12	;call to abstracted procedure
  5140  000900  EC55  F00D         	call	_writeEEPROM
  5141  000904                     
  5142                           ;TRom.c: 139:                 INTCONbits.GIE = 1;
  5143  000904  8EF2               	bsf	242,7,c	;volatile
  5144                           
  5145                           ;TRom.c: 140:                 EECON1bits.WREN = 0;
  5146  000906  94A6               	bcf	166,2,c	;volsfr
  5147                           
  5148                           ;TRom.c: 141:                 counter++;
  5149  000908  2A32               	incf	_counter^0,f,c
  5150                           
  5151                           ;TRom.c: 142:                 addr++;
  5152  00090A  2A31               	incf	_addr^0,f,c
  5153  00090C  D7EA               	goto	l5146
  5154  00090E                     l5164:
  5155                           
  5156                           ;TRom.c: 145:                 stateROM = 7;
  5157  00090E  0E07               	movlw	7
  5158  000910  6E2B               	movwf	motorROM@stateROM^0,c
  5159  000912  0C07               	retlw	7
  5160  000914                     l5166:
  5161                           
  5162                           ;TRom.c: 149:             if (counter < 10) {
  5163  000914  0E0A               	movlw	10
  5164  000916  6032               	cpfslt	_counter^0,c
  5165  000918  D007               	goto	l5180
  5166                           
  5167                           ;TRom.c: 150:                 writeEEPROM(addr, recordings[nTotal-1].index[counter-6]);
  5168  00091A  502E               	movf	_nTotal^0,w,c
  5169  00091C  0D0A               	mullw	10
  5170  00091E  0EF0               	movlw	240
  5171  000920  D82A               	call	PL12	;call to abstracted procedure
  5172  000922  EC55  F00D         	call	_writeEEPROM
  5173  000926  D7EE               	goto	L17
  5174  000928                     l5180:
  5175                           
  5176                           ;TRom.c: 157:                 stateROM = 8;
  5177  000928  0E08               	movlw	8
  5178  00092A  6E2B               	movwf	motorROM@stateROM^0,c
  5179  00092C  0C08               	retlw	8
  5180  00092E                     l905:
  5181                           
  5182                           ;TRom.c: 161:             counter = 0;
  5183  00092E  6A32               	clrf	_counter^0,c
  5184                           
  5185                           ;TRom.c: 162:             if (nTotal == 8) {
  5186  000930  0E08               	movlw	8
  5187  000932  182E               	xorwf	_nTotal^0,w,c
  5188  000934  E105               	bnz	l5188
  5189                           
  5190                           ;TRom.c: 163:                 addr = 2;
  5191  000936  0E02               	movlw	2
  5192  000938  6E31               	movwf	_addr^0,c
  5193                           
  5194                           ;TRom.c: 164:                 nTotal = 0;
  5195  00093A  6A2E               	clrf	_nTotal^0,c
  5196                           
  5197                           ;TRom.c: 165:                 pit = 8;
  5198  00093C  0E08               	movlw	8
  5199  00093E  6E2D               	movwf	_pit^0,c
  5200  000940                     l5188:
  5201                           
  5202                           ;TRom.c: 167:             stateROM = 0;
  5203  000940  6A2B               	clrf	motorROM@stateROM^0,c
  5204                           
  5205                           ;TRom.c: 168:             break;
  5206  000942  0012               	return	
  5207  000944                     l5192:
  5208  000944  502B               	movf	motorROM@stateROM^0,w,c
  5209  000946  6E67               	movwf	??_motorROM^0,c
  5210  000948  6A68               	clrf	(??_motorROM+1)^0,c
  5211                           
  5212                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5213                           ; Switch size 1, requested type "space"
  5214                           ; Number of cases is 1, Range of values is 0 to 0
  5215                           ; switch strategies available:
  5216                           ; Name         Instructions Cycles
  5217                           ; simple_byte            4     3 (average)
  5218                           ;	Chosen strategy is simple_byte
  5219  00094A  5068               	movf	(??_motorROM+1)^0,w,c
  5220  00094C  A4D8               	btfss	status,2,c
  5221  00094E  0012               	return	
  5222                           
  5223                           ; Switch size 1, requested type "space"
  5224                           ; Number of cases is 9, Range of values is 0 to 8
  5225                           ; switch strategies available:
  5226                           ; Name         Instructions Cycles
  5227                           ; simple_byte           28    15 (average)
  5228                           ;	Chosen strategy is simple_byte
  5229  000950  5067               	movf	??_motorROM^0,w,c
  5230  000952  E0A5               	bz	l5124
  5231  000954  0A01               	xorlw	1	; case 1
  5232  000956  E0A9               	bz	l891
  5233  000958  0A03               	xorlw	3	; case 2
  5234  00095A  E0AD               	bz	l5130
  5235  00095C  0A01               	xorlw	1	; case 3
  5236  00095E  E0B5               	bz	l894
  5237  000960  0A07               	xorlw	7	; case 4
  5238  000962  E0B8               	bz	l5140
  5239  000964  0A01               	xorlw	1	; case 5
  5240  000966  E0C0               	bz	l897
  5241  000968  0A03               	xorlw	3	; case 6
  5242  00096A  E0C3               	bz	l5150
  5243  00096C  0A01               	xorlw	1	; case 7
  5244  00096E  E0D2               	bz	l5166
  5245  000970  0A0F               	xorlw	15	; case 8
  5246  000972  E0DD               	bz	l905
  5247  000974  0012               	return		;funcret
  5248  000976                     __end_of_motorROM:
  5249                           	callstack 0
  5250  000976                     PL12:
  5251                           	callstack 26
  5252  000976  6E67               	movwf	??_motorROM^0,c
  5253  000978  6868               	setf	(??_motorROM+1)^0,c
  5254  00097A  0E60               	movlw	low _recordings
  5255  00097C  6E69               	movwf	(??_motorROM+2)^0,c
  5256  00097E  0E01               	movlw	high _recordings
  5257  000980  6E6A               	movwf	(??_motorROM+3)^0,c
  5258  000982  5067               	movf	??_motorROM^0,w,c
  5259  000984  2669               	addwf	(??_motorROM+2)^0,f,c
  5260  000986  5068               	movf	(??_motorROM+1)^0,w,c
  5261  000988  226A               	addwfc	(??_motorROM+3)^0,f,c
  5262  00098A  50F3               	movf	243,w,c
  5263  00098C  2669               	addwf	(??_motorROM+2)^0,f,c
  5264  00098E  50F4               	movf	244,w,c
  5265  000990  226A               	addwfc	(??_motorROM+3)^0,f,c
  5266  000992  5032               	movf	_counter^0,w,c
  5267  000994  2469               	addwf	(??_motorROM+2)^0,w,c
  5268  000996  6ED9               	movwf	fsr2l,c
  5269  000998  0E00               	movlw	0
  5270  00099A  206A               	addwfc	(??_motorROM+3)^0,w,c
  5271  00099C  6EDA               	movwf	fsr2h,c
  5272  00099E  50DF               	movf	indf2,w,c
  5273  0009A0  6E65               	movwf	writeEEPROM@data^0,c
  5274  0009A2  5031               	movf	_addr^0,w,c
  5275  0009A4  0012               	return	
  5276  0009A6                     __end_ofPL12:
  5277                           	callstack 0
  5278                           
  5279 ;; *************** function _writeEEPROM *****************
  5280 ;; Defined at:
  5281 ;;		line 77 in file "TRom.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;  addr            1    wreg     unsigned char 
  5284 ;;  data            1   11[COMRAM] unsigned char 
  5285 ;; Auto vars:     Size  Location     Type
  5286 ;;  addr            1   12[COMRAM] unsigned char 
  5287 ;; Return value:  Size  Location     Type
  5288 ;;                  1    wreg      void 
  5289 ;; Registers used:
  5290 ;;		wreg, status,2
  5291 ;; Tracked objects:
  5292 ;;		On entry : 0/0
  5293 ;;		On exit  : 0/0
  5294 ;;		Unchanged: 0/0
  5295 ;; Data sizes:     COMRAM   BANK0   BANK1
  5296 ;;      Params:         1       0       0
  5297 ;;      Locals:         1       0       0
  5298 ;;      Temps:          0       0       0
  5299 ;;      Totals:         2       0       0
  5300 ;;Total ram usage:        2 bytes
  5301 ;; Hardware stack levels used: 1
  5302 ;; Hardware stack levels required when called: 3
  5303 ;; This function calls:
  5304 ;;		Nothing
  5305 ;; This function is called by:
  5306 ;;		_motorROM
  5307 ;; This function uses a non-reentrant model
  5308 ;;
  5309                           
  5310                           	psect	text36
  5311  001AAA                     __ptext36:
  5312                           	callstack 0
  5313  001AAA                     _writeEEPROM:
  5314                           	callstack 26
  5315                           
  5316                           ;incstack = 0
  5317                           ;writeEEPROM@addr stored from wreg
  5318  001AAA  6E66               	movwf	writeEEPROM@addr^0,c
  5319                           
  5320                           ;TRom.c: 78:     EEADR = addr;
  5321  001AAC  C066  FFA9         	movff	writeEEPROM@addr,4009	;volatile
  5322                           
  5323                           ;TRom.c: 79:     EEDATA = data;
  5324  001AB0  C065  FFA8         	movff	writeEEPROM@data,4008	;volatile
  5325                           
  5326                           ;TRom.c: 81:     EECON1bits.EEPGD = 0;
  5327  001AB4  9EA6               	bcf	166,7,c	;volsfr
  5328                           
  5329                           ;TRom.c: 82:     EECON1bits.CFGS = 0;
  5330  001AB6  9CA6               	bcf	166,6,c	;volsfr
  5331                           
  5332                           ;TRom.c: 83:     EECON1bits.WREN = 1;
  5333  001AB8  84A6               	bsf	166,2,c	;volsfr
  5334                           
  5335                           ;TRom.c: 84:     INTCONbits.GIE = 0;
  5336  001ABA  9EF2               	bcf	242,7,c	;volatile
  5337                           
  5338                           ;TRom.c: 85:     EECON2 = 0x55;
  5339  001ABC  0E55               	movlw	85
  5340  001ABE  6EA7               	movwf	167,c	;volsfr
  5341                           
  5342                           ;TRom.c: 86:     EECON2 = 0xAA;
  5343  001AC0  0EAA               	movlw	170
  5344  001AC2  6EA7               	movwf	167,c	;volsfr
  5345                           
  5346                           ;TRom.c: 87:     EECON1bits.WR = 1;
  5347  001AC4  82A6               	bsf	166,1,c	;volsfr
  5348  001AC6  0CAA               	retlw	170	;funcret
  5349  001AC8                     __end_of_writeEEPROM:
  5350                           	callstack 0
  5351                           
  5352 ;; *************** function _motorMicro *****************
  5353 ;; Defined at:
  5354 ;;		line 65 in file "TADC.c"
  5355 ;; Parameters:    Size  Location     Type
  5356 ;;		None
  5357 ;; Auto vars:     Size  Location     Type
  5358 ;;		None
  5359 ;; Return value:  Size  Location     Type
  5360 ;;                  1    wreg      void 
  5361 ;; Registers used:
  5362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5363 ;; Tracked objects:
  5364 ;;		On entry : 0/0
  5365 ;;		On exit  : 0/0
  5366 ;;		Unchanged: 0/0
  5367 ;; Data sizes:     COMRAM   BANK0   BANK1
  5368 ;;      Params:         0       0       0
  5369 ;;      Locals:         0       0       0
  5370 ;;      Temps:          2       0       0
  5371 ;;      Totals:         2       0       0
  5372 ;;Total ram usage:        2 bytes
  5373 ;; Hardware stack levels used: 1
  5374 ;; Hardware stack levels required when called: 5
  5375 ;; This function calls:
  5376 ;;		_TiGetTics
  5377 ;;		_TiResetTics
  5378 ;;		_sendSound
  5379 ;; This function is called by:
  5380 ;;		_main
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           	psect	text37
  5385  00166C                     __ptext37:
  5386                           	callstack 0
  5387  00166C                     _motorMicro:
  5388                           	callstack 25
  5389                           
  5390                           ;TADC.c: 66:     static unsigned char states = 0;;TADC.c: 68:     switch(states){
  5391                           
  5392                           ;incstack = 0
  5393  00166C  D01C               	goto	l8582
  5394  00166E                     l303:
  5395                           
  5396                           ;TADC.c: 70:             ADCON0bits.ADON = 0;
  5397  00166E  90C2               	bcf	194,0,c	;volatile
  5398                           
  5399                           ;TADC.c: 71:             ADCON0bits.CHS = 1;
  5400  001670  50C2               	movf	194,w,c	;volatile
  5401  001672  0BC3               	andlw	-61
  5402  001674  0904               	iorlw	4
  5403  001676  6EC2               	movwf	194,c	;volatile
  5404                           
  5405                           ;TADC.c: 72:             ADCON0bits.ADON = 1;
  5406  001678  80C2               	bsf	194,0,c	;volatile
  5407                           
  5408                           ;TADC.c: 73:             if (TiGetTics(timerMicro) >= 1) {
  5409  00167A  504A               	movf	_timerMicro^0,w,c
  5410  00167C  EC57  F00C         	call	_TiGetTics
  5411  001680  5065               	movf	?_TiGetTics^0,w,c
  5412  001682  1066               	iorwf	(?_TiGetTics+1)^0,w,c
  5413  001684  B4D8               	btfsc	status,2,c
  5414  001686  0012               	return	
  5415                           
  5416                           ;TADC.c: 74:                 ADCON0bits.GODONE = 1;
  5417  001688  82C2               	bsf	194,1,c	;volatile
  5418                           
  5419                           ;TADC.c: 75:                 states = 1;
  5420  00168A  0E01               	movlw	1
  5421  00168C  6E47               	movwf	motorMicro@states^0,c
  5422  00168E  0C01               	retlw	1
  5423  001690                     l306:
  5424                           
  5425                           ;TADC.c: 79:             if (ADCON0bits.GODONE == 0) {
  5426  001690  B2C2               	btfsc	194,1,c	;volatile
  5427  001692  0012               	return	
  5428                           
  5429                           ;TADC.c: 80:                 ADCON0bits.ADON = 0;
  5430  001694  90C2               	bcf	194,0,c	;volatile
  5431                           
  5432                           ;TADC.c: 81:                 sendSound(ADRESH);
  5433  001696  50C4               	movf	196,w,c	;volatile
  5434  001698  EC3B  F00E         	call	_sendSound
  5435                           
  5436                           ;TADC.c: 82:                 TiResetTics(timerMicro);
  5437  00169C  504A               	movf	_timerMicro^0,w,c
  5438  00169E  EC1A  F00E         	call	_TiResetTics
  5439                           
  5440                           ;TADC.c: 83:                 states = 0;
  5441  0016A2  6A47               	clrf	motorMicro@states^0,c
  5442  0016A4  0012               	return	
  5443  0016A6                     l8582:
  5444  0016A6  5047               	movf	motorMicro@states^0,w,c
  5445  0016A8  6E6C               	movwf	??_motorMicro^0,c
  5446  0016AA  6A6D               	clrf	(??_motorMicro+1)^0,c
  5447                           
  5448                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5449                           ; Switch size 1, requested type "space"
  5450                           ; Number of cases is 1, Range of values is 0 to 0
  5451                           ; switch strategies available:
  5452                           ; Name         Instructions Cycles
  5453                           ; simple_byte            4     3 (average)
  5454                           ;	Chosen strategy is simple_byte
  5455  0016AC  506D               	movf	(??_motorMicro+1)^0,w,c
  5456  0016AE  A4D8               	btfss	status,2,c
  5457  0016B0  0012               	return	
  5458                           
  5459                           ; Switch size 1, requested type "space"
  5460                           ; Number of cases is 2, Range of values is 0 to 1
  5461                           ; switch strategies available:
  5462                           ; Name         Instructions Cycles
  5463                           ; simple_byte            7     4 (average)
  5464                           ;	Chosen strategy is simple_byte
  5465  0016B2  506C               	movf	??_motorMicro^0,w,c
  5466  0016B4  E0DC               	bz	l303
  5467  0016B6  0A01               	xorlw	1	; case 1
  5468  0016B8  E0EB               	bz	l306
  5469  0016BA  0012               	return		;funcret
  5470  0016BC                     __end_of_motorMicro:
  5471                           	callstack 0
  5472                           
  5473 ;; *************** function _sendSound *****************
  5474 ;; Defined at:
  5475 ;;		line 164 in file "TCentral.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;  sound           1    wreg     unsigned char 
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;  sound           1   12[COMRAM] unsigned char 
  5480 ;; Return value:  Size  Location     Type
  5481 ;;                  1    wreg      void 
  5482 ;; Registers used:
  5483 ;;		wreg, status,2, cstack
  5484 ;; Tracked objects:
  5485 ;;		On entry : 0/0
  5486 ;;		On exit  : 0/0
  5487 ;;		Unchanged: 0/0
  5488 ;; Data sizes:     COMRAM   BANK0   BANK1
  5489 ;;      Params:         0       0       0
  5490 ;;      Locals:         1       0       0
  5491 ;;      Temps:          0       0       0
  5492 ;;      Totals:         1       0       0
  5493 ;;Total ram usage:        1 bytes
  5494 ;; Hardware stack levels used: 1
  5495 ;; Hardware stack levels required when called: 4
  5496 ;; This function calls:
  5497 ;;		_enviaMostra
  5498 ;; This function is called by:
  5499 ;;		_motorMicro
  5500 ;; This function uses a non-reentrant model
  5501 ;;
  5502                           
  5503                           	psect	text38
  5504  001C76                     __ptext38:
  5505                           	callstack 0
  5506  001C76                     _sendSound:
  5507                           	callstack 25
  5508                           
  5509                           ;incstack = 0
  5510                           ;sendSound@sound stored from wreg
  5511  001C76  6E66               	movwf	sendSound@sound^0,c
  5512                           
  5513                           ;TCentral.c: 165:     if (recording) {
  5514  001C78  5042               	movf	_recording^0,w,c
  5515  001C7A  B4D8               	btfsc	status,2,c
  5516  001C7C  0012               	return	
  5517                           
  5518                           ;TCentral.c: 166:         enviaMostra(sound);
  5519  001C7E  5066               	movf	sendSound@sound^0,w,c
  5520  001C80  EFEC  F00D         	goto	_enviaMostra
  5521  001C84                     __end_of_sendSound:
  5522                           	callstack 0
  5523                           
  5524 ;; *************** function _enviaMostra *****************
  5525 ;; Defined at:
  5526 ;;		line 36 in file "TSIO.c"
  5527 ;; Parameters:    Size  Location     Type
  5528 ;;  sound           1    wreg     unsigned char 
  5529 ;; Auto vars:     Size  Location     Type
  5530 ;;  sound           1   11[COMRAM] unsigned char 
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  1    wreg      void 
  5533 ;; Registers used:
  5534 ;;		wreg, status,2
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMRAM   BANK0   BANK1
  5540 ;;      Params:         0       0       0
  5541 ;;      Locals:         1       0       0
  5542 ;;      Temps:          0       0       0
  5543 ;;      Totals:         1       0       0
  5544 ;;Total ram usage:        1 bytes
  5545 ;; Hardware stack levels used: 1
  5546 ;; Hardware stack levels required when called: 3
  5547 ;; This function calls:
  5548 ;;		Nothing
  5549 ;; This function is called by:
  5550 ;;		_sendSound
  5551 ;; This function uses a non-reentrant model
  5552 ;;
  5553                           
  5554                           	psect	text39
  5555  001BD8                     __ptext39:
  5556                           	callstack 0
  5557  001BD8                     _enviaMostra:
  5558                           	callstack 25
  5559                           
  5560                           ;incstack = 0
  5561                           ;enviaMostra@sound stored from wreg
  5562  001BD8  6E65               	movwf	enviaMostra@sound^0,c
  5563                           
  5564                           ;TSIO.c: 37:     if (flying) {
  5565  001BDA  5024               	movf	_flying^0,w,c
  5566  001BDC  B4D8               	btfsc	status,2,c
  5567  001BDE  0012               	return	
  5568                           
  5569                           ;TSIO.c: 38:         action = 'S';
  5570  001BE0  0E53               	movlw	83
  5571  001BE2  6E29               	movwf	_action^0,c
  5572                           
  5573                           ;TSIO.c: 39:         s = sound;
  5574  001BE4  C065  F026         	movff	enviaMostra@sound,_s
  5575                           
  5576                           ;TSIO.c: 40:         send = 1;
  5577  001BE8  EFFC  F00D         	goto	PL94	;call to abstracted procedure
  5578  001BEC                     __end_of_enviaMostra:
  5579                           	callstack 0
  5580                           
  5581 ;; *************** function _motorMenu *****************
  5582 ;; Defined at:
  5583 ;;		line 234 in file "TMenu.c"
  5584 ;; Parameters:    Size  Location     Type
  5585 ;;		None
  5586 ;; Auto vars:     Size  Location     Type
  5587 ;;		None
  5588 ;; Return value:  Size  Location     Type
  5589 ;;                  1    wreg      void 
  5590 ;; Registers used:
  5591 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5592 ;; Tracked objects:
  5593 ;;		On entry : 0/0
  5594 ;;		On exit  : 0/0
  5595 ;;		Unchanged: 0/0
  5596 ;; Data sizes:     COMRAM   BANK0   BANK1
  5597 ;;      Params:         0       0       0
  5598 ;;      Locals:         0       0       0
  5599 ;;      Temps:          0       0       2
  5600 ;;      Totals:         0       0       2
  5601 ;;Total ram usage:        2 bytes
  5602 ;; Hardware stack levels used: 1
  5603 ;; Hardware stack levels required when called: 8
  5604 ;; This function calls:
  5605 ;;		_TiGetTics
  5606 ;;		_cleanMarquesina
  5607 ;;		_showLCD
  5608 ;;		_showLCD_Marq
  5609 ;;		_showLCD_Records
  5610 ;; This function is called by:
  5611 ;;		_main
  5612 ;; This function uses a non-reentrant model
  5613 ;;
  5614                           
  5615                           	psect	text40
  5616  00037A                     __ptext40:
  5617                           	callstack 0
  5618  00037A                     _motorMenu:
  5619                           	callstack 22
  5620                           
  5621                           ;TMenu.c: 235:     switch(caseMenu){
  5622                           
  5623                           ;incstack = 0
  5624  00037A  D095               	goto	l8218
  5625  00037C                     l8174:
  5626                           
  5627                           ; BSR set to: 1
  5628                           ;TMenu.c: 237:             showLCD(MENU1_LOG, NOTHING2);
  5629  00037C  0EDE               	movlw	low _MENU1_LOG
  5630  00037E  6FB5               	movwf	showLCD@message1& (0+255),b
  5631  000380  0E1F               	movlw	high _MENU1_LOG
  5632  000382  D03D               	goto	L5
  5633  000384                     l8176:
  5634                           
  5635                           ; BSR set to: 1
  5636                           ;TMenu.c: 242:                     showLCD_Marq(MENU2_START, MENU2_PLAY);
  5637  000384  0EC7               	movlw	low _MENU2_START
  5638  000386  6FB5               	movwf	showLCD_Marq@message1& (0+255),b
  5639  000388  0E1F               	movlw	high _MENU2_START
  5640  00038A  6FB6               	movwf	(showLCD_Marq@message1+1)& (0+255),b
  5641  00038C  0EB0               	movlw	low _MENU2_PLAY
  5642  00038E  6FB7               	movwf	showLCD_Marq@message2& (0+255),b
  5643  000390  0E1F               	movlw	high _MENU2_PLAY
  5644  000392  D01F               	goto	L9
  5645  000394                     l8178:
  5646                           
  5647                           ; BSR set to: 1
  5648                           ;TMenu.c: 245:                     showLCD_Marq(MENU2_PLAY, MENU2_MODIFY);
  5649  000394  0EB0               	movlw	low _MENU2_PLAY
  5650  000396  6FB5               	movwf	showLCD_Marq@message1& (0+255),b
  5651  000398  0E1F               	movlw	high _MENU2_PLAY
  5652  00039A  6FB6               	movwf	(showLCD_Marq@message1+1)& (0+255),b
  5653  00039C  0E99               	movlw	low _MENU2_MODIFY
  5654  00039E  6FB7               	movwf	showLCD_Marq@message2& (0+255),b
  5655  0003A0  0E1F               	movlw	high _MENU2_MODIFY
  5656  0003A2  D017               	goto	L9
  5657  0003A4                     l8180:
  5658                           
  5659                           ; BSR set to: 1
  5660                           ;TMenu.c: 248:                     showLCD_Marq(MENU2_MODIFY, MENU2_TIME);
  5661  0003A4  0E99               	movlw	low _MENU2_MODIFY
  5662  0003A6  6FB5               	movwf	showLCD_Marq@message1& (0+255),b
  5663  0003A8  0E1F               	movlw	high _MENU2_MODIFY
  5664  0003AA  6FB6               	movwf	(showLCD_Marq@message1+1)& (0+255),b
  5665  0003AC  0E82               	movlw	low _MENU2_TIME
  5666  0003AE  6FB7               	movwf	showLCD_Marq@message2& (0+255),b
  5667  0003B0  0E1F               	movlw	high _MENU2_TIME
  5668  0003B2  D00F               	goto	L9
  5669  0003B4                     l8182:
  5670                           
  5671                           ; BSR set to: 1
  5672                           ;TMenu.c: 251:                     showLCD_Marq(MENU2_TIME, MENU2_END);
  5673  0003B4  0E82               	movlw	low _MENU2_TIME
  5674  0003B6  6FB5               	movwf	showLCD_Marq@message1& (0+255),b
  5675  0003B8  0E1F               	movlw	high _MENU2_TIME
  5676  0003BA  6FB6               	movwf	(showLCD_Marq@message1+1)& (0+255),b
  5677  0003BC  0E6B               	movlw	low _MENU2_END
  5678  0003BE  6FB7               	movwf	showLCD_Marq@message2& (0+255),b
  5679  0003C0  0E1F               	movlw	high _MENU2_END
  5680  0003C2  D007               	goto	L9
  5681  0003C4                     l8184:
  5682                           
  5683                           ; BSR set to: 1
  5684                           ;TMenu.c: 254:                     showLCD_Marq(MENU2_END, NOTHING);
  5685  0003C4  0E6B               	movlw	low _MENU2_END
  5686  0003C6  6FB5               	movwf	showLCD_Marq@message1& (0+255),b
  5687  0003C8  0E1F               	movlw	high _MENU2_END
  5688  0003CA  6FB6               	movwf	(showLCD_Marq@message1+1)& (0+255),b
  5689  0003CC  0E54               	movlw	low _NOTHING
  5690  0003CE  6FB7               	movwf	showLCD_Marq@message2& (0+255),b
  5691  0003D0  0E1F               	movlw	high _NOTHING
  5692  0003D2                     L9:
  5693  0003D2  6FB8               	movwf	(showLCD_Marq@message2+1)& (0+255),b
  5694  0003D4  EF21  F003         	goto	_showLCD_Marq	;wreg free
  5695  0003D8                     l8188:
  5696                           
  5697                           ; BSR set to: 1
  5698  0003D8  5044               	movf	_posJoystick^0,w,c
  5699                           
  5700                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5701                           ; Switch size 1, requested type "space"
  5702                           ; Number of cases is 1, Range of values is 0 to 0
  5703                           ; switch strategies available:
  5704                           ; Name         Instructions Cycles
  5705                           ; simple_byte            4     3 (average)
  5706                           ;	Chosen strategy is simple_byte
  5707  0003DA  D893               	call	PL104	;call to abstracted procedure
  5708  0003DC  A4D8               	btfss	status,2,c
  5709  0003DE  0012               	return	
  5710                           
  5711                           ; BSR set to: 1
  5712                           ; Switch size 1, requested type "space"
  5713                           ; Number of cases is 5, Range of values is 0 to 4
  5714                           ; switch strategies available:
  5715                           ; Name         Instructions Cycles
  5716                           ; simple_byte           16     9 (average)
  5717                           ;	Chosen strategy is simple_byte
  5718  0003E0  51C1               	movf	??_motorMenu& (0+255),w,b
  5719  0003E2  E0D0               	bz	l8176
  5720  0003E4  0A01               	xorlw	1	; case 1
  5721  0003E6  E0D6               	bz	l8178
  5722  0003E8  0A03               	xorlw	3	; case 2
  5723  0003EA  E0DC               	bz	l8180
  5724  0003EC  0A01               	xorlw	1	; case 3
  5725  0003EE  E0E2               	bz	l8182
  5726  0003F0  0A07               	xorlw	7	; case 4
  5727  0003F2  A4D8               	btfss	status,2,c
  5728  0003F4  0012               	return	
  5729  0003F6  D7E6               	goto	l8184
  5730  0003F8                     l8190:
  5731                           
  5732                           ; BSR set to: 1
  5733                           ;TMenu.c: 259:             showLCD(SHOW_RECORDING, NOTHING2);
  5734  0003F8  0E3D               	movlw	low _SHOW_RECORDING
  5735  0003FA  6FB5               	movwf	showLCD@message1& (0+255),b
  5736  0003FC  0E1F               	movlw	high _SHOW_RECORDING
  5737  0003FE                     L5:
  5738  0003FE  6FB6               	movwf	(showLCD@message1+1)& (0+255),b
  5739  000400  0ECD               	movlw	low _NOTHING2
  5740  000402  D035               	goto	L11
  5741  000404                     l8192:
  5742                           
  5743                           ; BSR set to: 1
  5744                           ;TMenu.c: 262:             if(empty == 0){
  5745  000404  5039               	movf	_empty^0,w,c
  5746  000406  E105               	bnz	l8196
  5747                           
  5748                           ; BSR set to: 1
  5749                           ;TMenu.c: 263:                 showLCD(EMPTY, EMPTY2);
  5750  000408  0EB6               	movlw	low _EMPTY
  5751  00040A  6FB5               	movwf	showLCD@message1& (0+255),b
  5752  00040C  6BB6               	clrf	(showLCD@message1+1)& (0+255),b
  5753  00040E  0E9F               	movlw	low _EMPTY2
  5754  000410  D02E               	goto	L11
  5755  000412                     l8196:
  5756                           
  5757                           ; BSR set to: 1
  5758                           ;TMenu.c: 265:               if (n == 7) {
  5759  000412  0E07               	movlw	7
  5760  000414  1843               	xorwf	_n^0,w,c
  5761  000416  E109               	bnz	l8200
  5762                           
  5763                           ; BSR set to: 1
  5764                           ;TMenu.c: 266:                   showLCD_Records(recordings[n].index, recordings[n].time
      +                          stmp, "        ", "        ");
  5765  000418  D85B               	call	PL22	;call to abstracted procedure
  5766  00041A  0EF5               	movlw	low STR_1
  5767  00041C  6FB9               	movwf	showLCD_Records@message21& (0+255),b
  5768  00041E  0E1F               	movlw	high STR_1
  5769  000420  6FBA               	movwf	(showLCD_Records@message21+1)& (0+255),b
  5770  000422  0EF5               	movlw	low STR_1
  5771  000424  6FBB               	movwf	showLCD_Records@message22& (0+255),b
  5772  000426  0E1F               	movlw	high STR_1
  5773  000428  D010               	goto	L12
  5774  00042A                     l8200:
  5775                           
  5776                           ; BSR set to: 1
  5777                           ;TMenu.c: 268:                   showLCD_Records(recordings[n].index, recordings[n].time
      +                          stmp, recordings[n+1].index, recordings[n+1].timestmp);
  5778  00042A  D852               	call	PL22	;call to abstracted procedure
  5779  00042C  5043               	movf	_n^0,w,c
  5780  00042E  0D0A               	mullw	10
  5781  000430  0E6A               	movlw	low (_recordings+10)
  5782  000432  24F3               	addwf	243,w,c
  5783  000434  6FB9               	movwf	showLCD_Records@message21& (0+255),b
  5784  000436  0E01               	movlw	high (_recordings+10)
  5785  000438  20F4               	addwfc	prodh,w,c
  5786  00043A  6FBA               	movwf	(showLCD_Records@message21+1)& (0+255),b
  5787  00043C  5043               	movf	_n^0,w,c
  5788  00043E  0D0A               	mullw	10
  5789  000440  0E6E               	movlw	low (_recordings+14)
  5790  000442  24F3               	addwf	243,w,c
  5791  000444  6FBB               	movwf	showLCD_Records@message22& (0+255),b
  5792  000446  0E01               	movlw	high (_recordings+14)
  5793  000448  20F4               	addwfc	prodh,w,c
  5794  00044A                     L12:
  5795  00044A  6FBC               	movwf	(showLCD_Records@message22+1)& (0+255),b
  5796  00044C  EFEE  F000         	goto	_showLCD_Records	;wreg free
  5797  000450                     l8202:
  5798                           
  5799                           ; BSR set to: 1
  5800                           ;TMenu.c: 273:             showLCD(SHOW_MODY_TIME, "");
  5801  000450  0E26               	movlw	low _SHOW_MODY_TIME
  5802  000452  6FB5               	movwf	showLCD@message1& (0+255),b
  5803  000454  0E1F               	movlw	high _SHOW_MODY_TIME
  5804  000456  6FB6               	movwf	(showLCD@message1+1)& (0+255),b
  5805  000458  0EFD               	movlw	low (STR_1+8)
  5806  00045A  6FB7               	movwf	showLCD@message2& (0+255),b
  5807  00045C  0E1F               	movlw	high (STR_1+8)
  5808  00045E  6FB8               	movwf	(showLCD@message2+1)& (0+255),b
  5809  000460  EFD3  F004         	goto	_showLCD	;wreg free
  5810  000464                     l8204:
  5811                           
  5812                           ; BSR set to: 1
  5813                           ;TMenu.c: 276:             showLCD(SHOW_CURR_TIME, showTime);
  5814  000464  0E0F               	movlw	low _SHOW_CURR_TIME
  5815  000466  6FB5               	movwf	showLCD@message1& (0+255),b
  5816  000468  0E1F               	movlw	high _SHOW_CURR_TIME
  5817  00046A  6FB6               	movwf	(showLCD@message1+1)& (0+255),b
  5818  00046C  0EE9               	movlw	low _showTime
  5819  00046E                     L11:
  5820  00046E  6FB7               	movwf	showLCD@message2& (0+255),b
  5821  000470  6BB8               	clrf	(showLCD@message2+1)& (0+255),b
  5822  000472  EFD3  F004         	goto	_showLCD	;wreg free
  5823  000476                     l8206:
  5824                           
  5825                           ; BSR set to: 1
  5826                           ;TMenu.c: 279:             showLCD(END_MSG, NOTHING2);
  5827  000476  0E88               	movlw	low _END_MSG
  5828  000478  6FB5               	movwf	showLCD@message1& (0+255),b
  5829  00047A  6BB6               	clrf	(showLCD@message1+1)& (0+255),b
  5830  00047C  0ECD               	movlw	low _NOTHING2
  5831  00047E  6FB7               	movwf	showLCD@message2& (0+255),b
  5832  000480  6BB8               	clrf	(showLCD@message2+1)& (0+255),b
  5833  000482  ECD3  F004         	call	_showLCD	;wreg free
  5834                           
  5835                           ;TMenu.c: 280:             if (TiGetTics(timer2) >= 8000) {
  5836  000486  503C               	movf	_timer2^0,w,c
  5837  000488  EC57  F00C         	call	_TiGetTics
  5838  00048C  0E40               	movlw	64
  5839  00048E  5C65               	subwf	?_TiGetTics^0,w,c
  5840  000490  0E1F               	movlw	31
  5841  000492  5866               	subwfb	(?_TiGetTics+1)^0,w,c
  5842  000494  A0D8               	btfss	status,0,c
  5843  000496  0012               	return	
  5844                           
  5845                           ;TMenu.c: 281:                 cleanMarquesina();
  5846  000498  EC11  F00E         	call	_cleanMarquesina	;wreg free
  5847                           
  5848                           ;TMenu.c: 282:                 showTime[0] = showTime[1] = showTime[3] = showTime[4]= '0
      +                          ';
  5849  00049C  0E30               	movlw	48
  5850  00049E  0100               	movlb	0	; () banked
  5851  0004A0  D828               	call	PL38	;call to abstracted procedure
  5852                           
  5853                           ; BSR set to: 0
  5854                           ;TMenu.c: 283:                 caseMenu = 0;
  5855  0004A2  6A3B               	clrf	_caseMenu^0,c
  5856  0004A4  0012               	return	
  5857  0004A6                     l8218:
  5858  0004A6  503B               	movf	_caseMenu^0,w,c
  5859  0004A8  0101               	movlb	1	; () banked
  5860                           
  5861                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5862                           ; Switch size 1, requested type "space"
  5863                           ; Number of cases is 1, Range of values is 0 to 0
  5864                           ; switch strategies available:
  5865                           ; Name         Instructions Cycles
  5866                           ; simple_byte            4     3 (average)
  5867                           ;	Chosen strategy is simple_byte
  5868  0004AA  D82B               	call	PL104	;call to abstracted procedure
  5869  0004AC  A4D8               	btfss	status,2,c
  5870  0004AE  0012               	return	
  5871                           
  5872                           ; BSR set to: 1
  5873                           ; Switch size 1, requested type "space"
  5874                           ; Number of cases is 7, Range of values is 0 to 6
  5875                           ; switch strategies available:
  5876                           ; Name         Instructions Cycles
  5877                           ; simple_byte           22    12 (average)
  5878                           ;	Chosen strategy is simple_byte
  5879  0004B0  51C1               	movf	??_motorMenu& (0+255),w,b
  5880  0004B2  E101 D763          	bz	l8174
  5881  0004B6  0A01               	xorlw	1	; case 1
  5882  0004B8  E08F               	bz	l8188
  5883  0004BA  0A03               	xorlw	3	; case 2
  5884  0004BC  E09D               	bz	l8190
  5885  0004BE  0A01               	xorlw	1	; case 3
  5886  0004C0  E0A1               	bz	l8192
  5887  0004C2  0A07               	xorlw	7	; case 4
  5888  0004C4  E0C5               	bz	l8202
  5889  0004C6  0A01               	xorlw	1	; case 5
  5890  0004C8  E0CD               	bz	l8204
  5891  0004CA  0A03               	xorlw	3	; case 6
  5892  0004CC  E0D4               	bz	l8206
  5893  0004CE  0012               	return		;funcret
  5894  0004D0                     __end_of_motorMenu:
  5895                           	callstack 0
  5896  0004D0                     PL22:
  5897                           	callstack 22
  5898  0004D0  5043               	movf	_n^0,w,c
  5899  0004D2  0D0A               	mullw	10
  5900  0004D4  0E60               	movlw	low _recordings
  5901  0004D6  24F3               	addwf	243,w,c
  5902  0004D8  6FB5               	movwf	showLCD_Records@message11& (0+255),b
  5903  0004DA  0E01               	movlw	high _recordings
  5904  0004DC  20F4               	addwfc	prodh,w,c
  5905  0004DE  6FB6               	movwf	(showLCD_Records@message11+1)& (0+255),b
  5906  0004E0  5043               	movf	_n^0,w,c
  5907  0004E2  0D0A               	mullw	10
  5908  0004E4  0E64               	movlw	low (_recordings+4)
  5909  0004E6  24F3               	addwf	243,w,c
  5910  0004E8  6FB7               	movwf	showLCD_Records@message12& (0+255),b
  5911  0004EA  0E01               	movlw	high (_recordings+4)
  5912  0004EC  20F4               	addwfc	prodh,w,c
  5913  0004EE  6FB8               	movwf	(showLCD_Records@message12+1)& (0+255),b
  5914  0004F0  0012               	return	
  5915  0004F2                     __end_ofPL22:
  5916                           	callstack 0
  5917  0004F2                     PL38:
  5918                           	callstack 23
  5919  0004F2  6FED               	movwf	(_showTime+4)& (0+255),b
  5920  0004F4  C0ED  F0EC         	movff	_showTime+4,_showTime+3
  5921  0004F8  C0EC  F0EA         	movff	_showTime+3,_showTime+1
  5922  0004FC  C0EA  F0E9         	movff	_showTime+1,_showTime
  5923  000500  0012               	return	
  5924  000502                     __end_ofPL38:
  5925                           	callstack 0
  5926  000502                     PL104:
  5927                           	callstack 22
  5928  000502  6FC1               	movwf	??_motorMenu& (0+255),b
  5929  000504  6BC2               	clrf	(??_motorMenu+1)& (0+255),b
  5930  000506  51C2               	movf	(??_motorMenu+1)& (0+255),w,b
  5931  000508  0012               	return	
  5932  00050A                     __end_ofPL104:
  5933                           	callstack 0
  5934                           
  5935 ;; *************** function _showLCD_Records *****************
  5936 ;; Defined at:
  5937 ;;		line 103 in file "TMenu.c"
  5938 ;; Parameters:    Size  Location     Type
  5939 ;;  message11       2    5[BANK1 ] PTR const unsigned char 
  5940 ;;		 -> recordings.index(4), recordings(80), 
  5941 ;;  message12       2    7[BANK1 ] PTR const unsigned char 
  5942 ;;		 -> recordings.timestmp(6), recordings(80), 
  5943 ;;  message21       2    9[BANK1 ] PTR const unsigned char 
  5944 ;;		 -> STR_1(9), recordings.index(4), recordings(80), 
  5945 ;;  message22       2   11[BANK1 ] PTR const unsigned char 
  5946 ;;		 -> STR_2(9), recordings.timestmp(6), recordings(80), 
  5947 ;; Auto vars:     Size  Location     Type
  5948 ;;		None
  5949 ;; Return value:  Size  Location     Type
  5950 ;;                  1    wreg      void 
  5951 ;; Registers used:
  5952 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5953 ;; Tracked objects:
  5954 ;;		On entry : 3F/1
  5955 ;;		On exit  : 0/0
  5956 ;;		Unchanged: 0/0
  5957 ;; Data sizes:     COMRAM   BANK0   BANK1
  5958 ;;      Params:         0       0       8
  5959 ;;      Locals:         0       0       0
  5960 ;;      Temps:          0       0       4
  5961 ;;      Totals:         0       0      12
  5962 ;;Total ram usage:       12 bytes
  5963 ;; Hardware stack levels used: 1
  5964 ;; Hardware stack levels required when called: 7
  5965 ;; This function calls:
  5966 ;;		_LcGotoXY
  5967 ;;		_LcPutChar
  5968 ;; This function is called by:
  5969 ;;		_motorMenu
  5970 ;; This function uses a non-reentrant model
  5971 ;;
  5972                           
  5973                           	psect	text41
  5974  0001DC                     __ptext41:
  5975                           	callstack 0
  5976  0001DC                     _showLCD_Records:
  5977                           	callstack 22
  5978                           
  5979                           ; BSR set to: 1
  5980                           ;TMenu.c: 105:     if (posLCD < 16) {
  5981                           
  5982                           ;incstack = 0
  5983  0001DC  0E10               	movlw	16
  5984  0001DE  603A               	cpfslt	_posLCD^0,c
  5985  0001E0  0C10               	retlw	16
  5986                           
  5987                           ; BSR set to: 1
  5988                           ;TMenu.c: 106:         if(posLCD < 3){
  5989  0001E2  0E03               	movlw	3
  5990  0001E4  603A               	cpfslt	_posLCD^0,c
  5991  0001E6  D00F               	goto	l7900
  5992                           
  5993                           ; BSR set to: 1
  5994                           ;TMenu.c: 107:             LcGotoXY(posLCD, 0);
  5995  0001E8  6A6D               	clrf	LcGotoXY@Row^0,c
  5996  0001EA  503A               	movf	_posLCD^0,w,c
  5997  0001EC  ECE5  F006         	call	_LcGotoXY
  5998                           
  5999                           ;TMenu.c: 108:             LcPutChar(message11[posLCD]);
  6000  0001F0  503A               	movf	_posLCD^0,w,c
  6001  0001F2  0101               	movlb	1	; () banked
  6002  0001F4  25B5               	addwf	showLCD_Records@message11& (0+255),w,b
  6003  0001F6  6ED9               	movwf	fsr2l,c
  6004  0001F8  0E00               	movlw	0
  6005  0001FA  21B6               	addwfc	(showLCD_Records@message11+1)& (0+255),w,b
  6006  0001FC  6EDA               	movwf	fsr2h,c
  6007  0001FE  50DF               	movf	indf2,w,c
  6008  000200  ECE3  F00A         	call	_LcPutChar
  6009                           
  6010                           ;TMenu.c: 109:         }else if(posLCD == 3){
  6011  000204  D040               	goto	l7918
  6012  000206                     l7900:
  6013                           
  6014                           ; BSR set to: 1
  6015  000206  0E03               	movlw	3
  6016  000208  183A               	xorwf	_posLCD^0,w,c
  6017  00020A  E108               	bnz	l7904
  6018                           
  6019                           ; BSR set to: 1
  6020                           ;TMenu.c: 110:             LcGotoXY(posLCD, 0);
  6021  00020C  6A6D               	clrf	LcGotoXY@Row^0,c
  6022  00020E  503A               	movf	_posLCD^0,w,c
  6023  000210  ECE5  F006         	call	_LcGotoXY
  6024                           
  6025                           ;TMenu.c: 111:             LcPutChar(' ');
  6026  000214  0E20               	movlw	32
  6027  000216  ECE3  F00A         	call	_LcPutChar
  6028                           
  6029                           ;TMenu.c: 112:         }else if(posLCD == 4){
  6030  00021A  D035               	goto	l7918
  6031  00021C                     l7904:
  6032                           
  6033                           ; BSR set to: 1
  6034  00021C  0E04               	movlw	4
  6035  00021E  183A               	xorwf	_posLCD^0,w,c
  6036  000220  E108               	bnz	l7908
  6037                           
  6038                           ; BSR set to: 1
  6039                           ;TMenu.c: 113:             LcGotoXY(posLCD, 0);
  6040  000222  6A6D               	clrf	LcGotoXY@Row^0,c
  6041  000224  503A               	movf	_posLCD^0,w,c
  6042  000226  ECE5  F006         	call	_LcGotoXY
  6043                           
  6044                           ;TMenu.c: 114:             LcPutChar('-');
  6045  00022A  0E2D               	movlw	45
  6046  00022C  ECE3  F00A         	call	_LcPutChar
  6047                           
  6048                           ;TMenu.c: 115:         }else if(posLCD == 5){
  6049  000230  D02A               	goto	l7918
  6050  000232                     l7908:
  6051                           
  6052                           ; BSR set to: 1
  6053  000232  0E05               	movlw	5
  6054  000234  183A               	xorwf	_posLCD^0,w,c
  6055  000236  E108               	bnz	l7912
  6056                           
  6057                           ; BSR set to: 1
  6058                           ;TMenu.c: 116:             LcGotoXY(posLCD, 0);
  6059  000238  6A6D               	clrf	LcGotoXY@Row^0,c
  6060  00023A  503A               	movf	_posLCD^0,w,c
  6061  00023C  ECE5  F006         	call	_LcGotoXY
  6062                           
  6063                           ;TMenu.c: 117:             LcPutChar(' ');
  6064  000240  0E20               	movlw	32
  6065  000242  ECE3  F00A         	call	_LcPutChar
  6066                           
  6067                           ;TMenu.c: 118:         }else if(posLCD < 11){
  6068  000246  D01F               	goto	l7918
  6069  000248                     l7912:
  6070                           
  6071                           ; BSR set to: 1
  6072  000248  0E0B               	movlw	11
  6073  00024A  603A               	cpfslt	_posLCD^0,c
  6074  00024C  D015               	goto	l7916
  6075                           
  6076                           ; BSR set to: 1
  6077                           ;TMenu.c: 119:             LcGotoXY(posLCD, 0);
  6078  00024E  6A6D               	clrf	LcGotoXY@Row^0,c
  6079  000250  503A               	movf	_posLCD^0,w,c
  6080  000252  ECE5  F006         	call	_LcGotoXY
  6081                           
  6082                           ;TMenu.c: 120:             LcPutChar(message12[posLCD - 6]);
  6083  000256  503A               	movf	_posLCD^0,w,c
  6084  000258  0101               	movlb	1	; () banked
  6085  00025A  25B7               	addwf	showLCD_Records@message12& (0+255),w,b
  6086  00025C  6FBD               	movwf	??_showLCD_Records& (0+255),b
  6087  00025E  0E00               	movlw	0
  6088  000260  21B8               	addwfc	(showLCD_Records@message12+1)& (0+255),w,b
  6089  000262  6FBE               	movwf	(??_showLCD_Records+1)& (0+255),b
  6090  000264  0EFA               	movlw	250
  6091  000266  25BD               	addwf	??_showLCD_Records& (0+255),w,b
  6092  000268  6ED9               	movwf	fsr2l,c
  6093  00026A  0EFF               	movlw	255
  6094  00026C  21BE               	addwfc	(??_showLCD_Records+1)& (0+255),w,b
  6095  00026E  6EDA               	movwf	fsr2h,c
  6096  000270  50DF               	movf	indf2,w,c
  6097  000272  ECE3  F00A         	call	_LcPutChar
  6098                           
  6099                           ;TMenu.c: 121:         }else{
  6100  000276  D007               	goto	l7918
  6101  000278                     l7916:
  6102                           
  6103                           ; BSR set to: 1
  6104                           ;TMenu.c: 122:             LcGotoXY(posLCD, 0);
  6105  000278  6A6D               	clrf	LcGotoXY@Row^0,c
  6106  00027A  503A               	movf	_posLCD^0,w,c
  6107  00027C  ECE5  F006         	call	_LcGotoXY
  6108                           
  6109                           ;TMenu.c: 123:             LcPutChar(' ');
  6110  000280  0E20               	movlw	32
  6111  000282  ECE3  F00A         	call	_LcPutChar
  6112  000286                     l7918:
  6113                           
  6114                           ;TMenu.c: 125:         if(message21[0] == 'I'){
  6115  000286  C1B9  FFF6         	movff	showLCD_Records@message21,tblptrl
  6116  00028A  C1BA  FFF7         	movff	showLCD_Records@message21+1,tblptrh
  6117  00028E  6AF8               	clrf	tblptru,c
  6118  000290  0E01               	movlw	(high __ramtop+-1)
  6119  000292  64F7               	cpfsgt	tblptrh,c
  6120  000294  D003               	bra	u7127
  6121  000296  0008               	tblrd		*
  6122  000298  50F5               	movf	tablat,w,c
  6123  00029A  D002               	bra	u7120
  6124  00029C                     u7127:
  6125  00029C  EC45  F005         	call	PL14	;call to abstracted procedure
  6126  0002A0                     u7120:
  6127  0002A0  0A49               	xorlw	73
  6128  0002A2  E165               	bnz	l7946
  6129                           
  6130                           ;TMenu.c: 126:             if(posLCD < 3){
  6131  0002A4  0E03               	movlw	3
  6132  0002A6  603A               	cpfslt	_posLCD^0,c
  6133  0002A8  D01A               	goto	l7926
  6134                           
  6135                           ;TMenu.c: 127:                 LcGotoXY(posLCD, 1);
  6136  0002AA  D863               	call	PL44	;call to abstracted procedure
  6137  0002AC  ECE5  F006         	call	_LcGotoXY
  6138                           
  6139                           ;TMenu.c: 128:                 LcPutChar(message21[posLCD]);
  6140  0002B0  503A               	movf	_posLCD^0,w,c
  6141  0002B2  0101               	movlb	1	; () banked
  6142  0002B4  25B9               	addwf	showLCD_Records@message21& (0+255),w,b
  6143  0002B6  6FBD               	movwf	??_showLCD_Records& (0+255),b
  6144  0002B8  0E00               	movlw	0
  6145  0002BA  21BA               	addwfc	(showLCD_Records@message21+1)& (0+255),w,b
  6146  0002BC  6FBE               	movwf	(??_showLCD_Records+1)& (0+255),b
  6147  0002BE  C1BD  FFF6         	movff	??_showLCD_Records,tblptrl
  6148  0002C2  C1BE  FFF7         	movff	??_showLCD_Records+1,tblptrh
  6149  0002C6  6AF8               	clrf	tblptru,c
  6150  0002C8  0E01               	movlw	(high __ramtop+-1)
  6151  0002CA  64F7               	cpfsgt	tblptrh,c
  6152  0002CC  D003               	bra	u7157
  6153  0002CE  0008               	tblrd		*
  6154  0002D0  50F5               	movf	tablat,w,c
  6155  0002D2  D002               	bra	u7150
  6156  0002D4                     u7157:
  6157  0002D4  EC45  F005         	call	PL14	;call to abstracted procedure
  6158  0002D8                     u7150:
  6159  0002D8  ECE3  F00A         	call	_LcPutChar
  6160                           
  6161                           ;TMenu.c: 129:             }else if(posLCD == 3){
  6162  0002DC  D048               	goto	l7946
  6163  0002DE                     l7926:
  6164  0002DE  0E03               	movlw	3
  6165  0002E0  183A               	xorwf	_posLCD^0,w,c
  6166  0002E2  E107               	bnz	l7930
  6167                           
  6168                           ;TMenu.c: 130:                 LcGotoXY(posLCD, 1);
  6169  0002E4  D846               	call	PL44	;call to abstracted procedure
  6170  0002E6  ECE5  F006         	call	_LcGotoXY
  6171                           
  6172                           ;TMenu.c: 131:                 LcPutChar(' ');
  6173  0002EA  0E20               	movlw	32
  6174  0002EC  ECE3  F00A         	call	_LcPutChar
  6175                           
  6176                           ;TMenu.c: 132:             }else if(posLCD == 4){
  6177  0002F0  D03E               	goto	l7946
  6178  0002F2                     l7930:
  6179  0002F2  0E04               	movlw	4
  6180  0002F4  183A               	xorwf	_posLCD^0,w,c
  6181  0002F6  E107               	bnz	l7934
  6182                           
  6183                           ;TMenu.c: 133:                 LcGotoXY(posLCD, 1);
  6184  0002F8  D83C               	call	PL44	;call to abstracted procedure
  6185  0002FA  ECE5  F006         	call	_LcGotoXY
  6186                           
  6187                           ;TMenu.c: 134:                 LcPutChar('-');
  6188  0002FE  0E2D               	movlw	45
  6189  000300  ECE3  F00A         	call	_LcPutChar
  6190                           
  6191                           ;TMenu.c: 135:             }else if(posLCD == 5){
  6192  000304  D034               	goto	l7946
  6193  000306                     l7934:
  6194  000306  0E05               	movlw	5
  6195  000308  183A               	xorwf	_posLCD^0,w,c
  6196  00030A  E107               	bnz	l7938
  6197                           
  6198                           ;TMenu.c: 136:                 LcGotoXY(posLCD, 1);
  6199  00030C  D832               	call	PL44	;call to abstracted procedure
  6200  00030E  ECE5  F006         	call	_LcGotoXY
  6201                           
  6202                           ;TMenu.c: 137:                 LcPutChar(' ');
  6203  000312  0E20               	movlw	32
  6204  000314  ECE3  F00A         	call	_LcPutChar
  6205                           
  6206                           ;TMenu.c: 138:             }else if(posLCD < 11){
  6207  000318  D02A               	goto	l7946
  6208  00031A                     l7938:
  6209  00031A  0E0B               	movlw	11
  6210  00031C  603A               	cpfslt	_posLCD^0,c
  6211  00031E  D021               	goto	l7944
  6212                           
  6213                           ;TMenu.c: 139:                 LcGotoXY(posLCD, 1);
  6214  000320  D828               	call	PL44	;call to abstracted procedure
  6215  000322  ECE5  F006         	call	_LcGotoXY
  6216                           
  6217                           ;TMenu.c: 140:                 LcPutChar(message22[posLCD - 6]);
  6218  000326  0EFA               	movlw	250
  6219  000328  0101               	movlb	1	; () banked
  6220  00032A  6FBD               	movwf	??_showLCD_Records& (0+255),b
  6221  00032C  69BE               	setf	(??_showLCD_Records+1)& (0+255),b
  6222  00032E  503A               	movf	_posLCD^0,w,c
  6223  000330  25BB               	addwf	showLCD_Records@message22& (0+255),w,b
  6224  000332  6FBF               	movwf	(??_showLCD_Records+2)& (0+255),b
  6225  000334  0E00               	movlw	0
  6226  000336  21BC               	addwfc	(showLCD_Records@message22+1)& (0+255),w,b
  6227  000338  6FC0               	movwf	(??_showLCD_Records+3)& (0+255),b
  6228  00033A  51BD               	movf	??_showLCD_Records& (0+255),w,b
  6229  00033C  27BF               	addwf	(??_showLCD_Records+2)& (0+255),f,b
  6230  00033E  51BE               	movf	(??_showLCD_Records+1)& (0+255),w,b
  6231  000340  23C0               	addwfc	(??_showLCD_Records+3)& (0+255),f,b
  6232  000342  C1BF  FFF6         	movff	??_showLCD_Records+2,tblptrl
  6233  000346  C1C0  FFF7         	movff	??_showLCD_Records+3,tblptrh
  6234  00034A  6AF8               	clrf	tblptru,c
  6235  00034C  0E01               	movlw	(high __ramtop+-1)
  6236  00034E  64F7               	cpfsgt	tblptrh,c
  6237  000350  D003               	bra	u7207
  6238  000352  0008               	tblrd		*
  6239  000354  50F5               	movf	tablat,w,c
  6240  000356  D002               	bra	u7200
  6241  000358                     u7207:
  6242  000358  EC45  F005         	call	PL14	;call to abstracted procedure
  6243  00035C                     u7200:
  6244  00035C  ECE3  F00A         	call	_LcPutChar
  6245                           
  6246                           ;TMenu.c: 141:             }else{
  6247  000360  D006               	goto	l7946
  6248  000362                     l7944:
  6249                           
  6250                           ;TMenu.c: 142:                 LcGotoXY(posLCD, 1);
  6251  000362  D807               	call	PL44	;call to abstracted procedure
  6252  000364  ECE5  F006         	call	_LcGotoXY
  6253                           
  6254                           ;TMenu.c: 143:                 LcPutChar(' ');
  6255  000368  0E20               	movlw	32
  6256  00036A  ECE3  F00A         	call	_LcPutChar
  6257  00036E                     l7946:
  6258                           
  6259                           ;TMenu.c: 146:         posLCD++;
  6260  00036E  2A3A               	incf	_posLCD^0,f,c
  6261  000370  0012               	return		;funcret
  6262  000372                     __end_of_showLCD_Records:
  6263                           	callstack 0
  6264  000372                     PL44:
  6265                           	callstack 22
  6266  000372  0E01               	movlw	1
  6267  000374  6E6D               	movwf	LcGotoXY@Row^0,c
  6268  000376  503A               	movf	_posLCD^0,w,c
  6269  000378  0012               	return	
  6270  00037A                     __end_ofPL44:
  6271                           	callstack 0
  6272                           
  6273 ;; *************** function _showLCD_Marq *****************
  6274 ;; Defined at:
  6275 ;;		line 153 in file "TMenu.c"
  6276 ;; Parameters:    Size  Location     Type
  6277 ;;  message1        2    5[BANK1 ] PTR const unsigned char 
  6278 ;;		 -> MENU2_END(23), MENU2_TIME(23), MENU2_MODIFY(23), MENU2_PLAY(23), 
  6279 ;;		 -> MENU2_START(23), 
  6280 ;;  message2        2    7[BANK1 ] PTR const unsigned char 
  6281 ;;		 -> NOTHING(23), MENU2_END(23), MENU2_TIME(23), MENU2_MODIFY(23), 
  6282 ;;		 -> MENU2_PLAY(23), 
  6283 ;; Auto vars:     Size  Location     Type
  6284 ;;		None
  6285 ;; Return value:  Size  Location     Type
  6286 ;;                  1    wreg      void 
  6287 ;; Registers used:
  6288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6289 ;; Tracked objects:
  6290 ;;		On entry : 3F/1
  6291 ;;		On exit  : 0/0
  6292 ;;		Unchanged: 0/0
  6293 ;; Data sizes:     COMRAM   BANK0   BANK1
  6294 ;;      Params:         0       0       4
  6295 ;;      Locals:         0       0       0
  6296 ;;      Temps:          2       0       0
  6297 ;;      Totals:         2       0       4
  6298 ;;Total ram usage:        6 bytes
  6299 ;; Hardware stack levels used: 1
  6300 ;; Hardware stack levels required when called: 7
  6301 ;; This function calls:
  6302 ;;		_LcGotoXY
  6303 ;;		_LcPutChar
  6304 ;;		_TiGetTics
  6305 ;;		_TiResetTics
  6306 ;; This function is called by:
  6307 ;;		_motorMenu
  6308 ;; This function uses a non-reentrant model
  6309 ;;
  6310                           
  6311                           	psect	text42
  6312  000642                     __ptext42:
  6313                           	callstack 0
  6314  000642                     _showLCD_Marq:
  6315                           	callstack 22
  6316                           
  6317                           ; BSR set to: 1
  6318                           ;TMenu.c: 155:     if (TiGetTics(timer) >= 252){
  6319                           
  6320                           ;incstack = 0
  6321  000642  503D               	movf	_timer@TMenu$F1082^0,w,c
  6322  000644  EC57  F00C         	call	_TiGetTics
  6323  000648  5066               	movf	(?_TiGetTics+1)^0,w,c
  6324  00064A  E104               	bnz	u7210
  6325  00064C  0EFC               	movlw	252
  6326  00064E  5C65               	subwf	?_TiGetTics^0,w,c
  6327  000650  A0D8               	btfss	status,0,c
  6328  000652  0012               	return	
  6329  000654                     u7210:
  6330                           
  6331                           ;TMenu.c: 157:         if(posLCD < 16){
  6332  000654  0E10               	movlw	16
  6333  000656  603A               	cpfslt	_posLCD^0,c
  6334  000658  D063               	goto	l8004
  6335                           
  6336                           ;TMenu.c: 159:             LcGotoXY(posLCD, 0);
  6337  00065A  6A6D               	clrf	LcGotoXY@Row^0,c
  6338  00065C  503A               	movf	_posLCD^0,w,c
  6339  00065E  ECE5  F006         	call	_LcGotoXY
  6340                           
  6341                           ;TMenu.c: 161:             if(message1[posLCD + extraPos] != '\0' && !finalMarq){
  6342  000662  503A               	movf	_posLCD^0,w,c
  6343  000664  0101               	movlb	1	; () banked
  6344  000666  D874               	call	PL6	;call to abstracted procedure
  6345  000668  D862               	call	PL2	;call to abstracted procedure
  6346  00066A  E008               	bz	l7960
  6347                           
  6348                           ; BSR set to: 1
  6349  00066C  5034               	movf	_finalMarq^0,w,c
  6350  00066E  E106               	bnz	l7960
  6351                           
  6352                           ; BSR set to: 1
  6353                           ;TMenu.c: 162:                 LcPutChar(message1[posLCD + extraPos]);
  6354  000670  503A               	movf	_posLCD^0,w,c
  6355  000672  D86E               	call	PL6	;call to abstracted procedure
  6356  000674  D85C               	call	PL2	;call to abstracted procedure
  6357  000676  ECE3  F00A         	call	_LcPutChar
  6358                           
  6359                           ;TMenu.c: 163:             } else{
  6360  00067A  D019               	goto	l7974
  6361  00067C                     l7960:
  6362                           
  6363                           ; BSR set to: 1
  6364                           ;TMenu.c: 165:                 if (!finalMarq) {
  6365  00067C  5034               	movf	_finalMarq^0,w,c
  6366  00067E  E105               	bnz	l7966
  6367                           
  6368                           ; BSR set to: 1
  6369                           ;TMenu.c: 166:                     finalMarq = 1;
  6370  000680  0E01               	movlw	1
  6371  000682  6E34               	movwf	_finalMarq^0,c
  6372                           
  6373                           ; BSR set to: 1
  6374                           ;TMenu.c: 167:                     LcPutChar(' ');
  6375  000684  0E20               	movlw	32
  6376  000686  ECE3  F00A         	call	_LcPutChar
  6377  00068A                     l7966:
  6378                           
  6379                           ;TMenu.c: 171:                 if (posLCD < posMax){
  6380  00068A  5037               	movf	_posMax^0,w,c
  6381  00068C  5C3A               	subwf	_posLCD^0,w,c
  6382  00068E  E207               	bc	l7970
  6383                           
  6384                           ;TMenu.c: 173:                     LcPutChar(message1[posLCD + extraPos]);
  6385  000690  503A               	movf	_posLCD^0,w,c
  6386  000692  0101               	movlb	1	; () banked
  6387  000694  D85D               	call	PL6	;call to abstracted procedure
  6388  000696  D84B               	call	PL2	;call to abstracted procedure
  6389  000698  ECE3  F00A         	call	_LcPutChar
  6390                           
  6391                           ;TMenu.c: 174:                 } else {
  6392  00069C  D008               	goto	l7974
  6393  00069E                     l7970:
  6394                           
  6395                           ;TMenu.c: 176:                     LcPutChar(message1[posMin]);
  6396  00069E  5036               	movf	_posMin^0,w,c
  6397  0006A0  0101               	movlb	1	; () banked
  6398  0006A2  D856               	call	PL6	;call to abstracted procedure
  6399  0006A4  6E72               	movwf	(??_showLCD_Marq+1)^0,c
  6400  0006A6  D859               	call	PL8	;call to abstracted procedure
  6401  0006A8  ECE3  F00A         	call	_LcPutChar
  6402                           
  6403                           ;TMenu.c: 177:                     posMin++;
  6404  0006AC  2A36               	incf	_posMin^0,f,c
  6405  0006AE                     l7974:
  6406                           
  6407                           ;TMenu.c: 182:             LcGotoXY(posLCD, 1);
  6408  0006AE  ECB9  F001         	call	PL44	;call to abstracted procedure
  6409  0006B2  ECE5  F006         	call	_LcGotoXY
  6410                           
  6411                           ;TMenu.c: 183:             if(message2[posLCD + extraPos] != '\0' && !finalMarq2){
  6412  0006B6  503A               	movf	_posLCD^0,w,c
  6413  0006B8  0101               	movlb	1	; () banked
  6414  0006BA  D845               	call	PL4	;call to abstracted procedure
  6415  0006BC  D838               	call	PL2	;call to abstracted procedure
  6416  0006BE  E008               	bz	l7982
  6417                           
  6418                           ; BSR set to: 1
  6419  0006C0  5033               	movf	_finalMarq2^0,w,c
  6420  0006C2  E106               	bnz	l7982
  6421                           
  6422                           ; BSR set to: 1
  6423                           ;TMenu.c: 184:                 LcPutChar(message2[posLCD + extraPos]);
  6424  0006C4  503A               	movf	_posLCD^0,w,c
  6425  0006C6  D83F               	call	PL4	;call to abstracted procedure
  6426  0006C8  D832               	call	PL2	;call to abstracted procedure
  6427  0006CA  ECE3  F00A         	call	_LcPutChar
  6428                           
  6429                           ;TMenu.c: 185:             } else{
  6430  0006CE  D019               	goto	l7996
  6431  0006D0                     l7982:
  6432                           
  6433                           ; BSR set to: 1
  6434                           ;TMenu.c: 186:                 if (!finalMarq2) {
  6435  0006D0  5033               	movf	_finalMarq2^0,w,c
  6436  0006D2  E105               	bnz	l7988
  6437                           
  6438                           ; BSR set to: 1
  6439                           ;TMenu.c: 187:                     finalMarq2 = 1;
  6440  0006D4  0E01               	movlw	1
  6441  0006D6  6E33               	movwf	_finalMarq2^0,c
  6442                           
  6443                           ; BSR set to: 1
  6444                           ;TMenu.c: 188:                     LcPutChar(' ');
  6445  0006D8  0E20               	movlw	32
  6446  0006DA  ECE3  F00A         	call	_LcPutChar
  6447  0006DE                     l7988:
  6448                           
  6449                           ;TMenu.c: 190:                 if (posLCD < posMax){
  6450  0006DE  5037               	movf	_posMax^0,w,c
  6451  0006E0  5C3A               	subwf	_posLCD^0,w,c
  6452  0006E2  E207               	bc	l7992
  6453                           
  6454                           ;TMenu.c: 191:                     LcPutChar(message2[posLCD + extraPos]);
  6455  0006E4  503A               	movf	_posLCD^0,w,c
  6456  0006E6  0101               	movlb	1	; () banked
  6457  0006E8  D82E               	call	PL4	;call to abstracted procedure
  6458  0006EA  D821               	call	PL2	;call to abstracted procedure
  6459  0006EC  ECE3  F00A         	call	_LcPutChar
  6460                           
  6461                           ;TMenu.c: 192:                 } else {
  6462  0006F0  D008               	goto	l7996
  6463  0006F2                     l7992:
  6464                           
  6465                           ;TMenu.c: 193:                     LcPutChar(message2[posMin2]);
  6466  0006F2  5035               	movf	_posMin2^0,w,c
  6467  0006F4  0101               	movlb	1	; () banked
  6468  0006F6  D827               	call	PL4	;call to abstracted procedure
  6469  0006F8  6E72               	movwf	(??_showLCD_Marq+1)^0,c
  6470  0006FA  D82F               	call	PL8	;call to abstracted procedure
  6471  0006FC  ECE3  F00A         	call	_LcPutChar
  6472                           
  6473                           ;TMenu.c: 194:                     posMin2++;
  6474  000700  2A35               	incf	_posMin2^0,f,c
  6475  000702                     l7996:
  6476                           
  6477                           ;TMenu.c: 199:             if (extraPos+1 == 23) {
  6478  000702  5038               	movf	_extraPos^0,w,c
  6479  000704  6E71               	movwf	??_showLCD_Marq^0,c
  6480  000706  6A72               	clrf	(??_showLCD_Marq+1)^0,c
  6481  000708  2A71               	incf	??_showLCD_Marq^0,f,c
  6482  00070A  0E00               	movlw	0
  6483  00070C  2272               	addwfc	(??_showLCD_Marq+1)^0,f,c
  6484  00070E  0E17               	movlw	23
  6485  000710  1871               	xorwf	??_showLCD_Marq^0,w,c
  6486  000712  1072               	iorwf	(??_showLCD_Marq+1)^0,w,c
  6487  000714  E103               	bnz	l8002
  6488                           
  6489                           ;TMenu.c: 200:                 extraPos = 0;
  6490  000716  6A38               	clrf	_extraPos^0,c
  6491                           
  6492                           ;TMenu.c: 201:                 posMax = 23;
  6493  000718  0E17               	movlw	23
  6494  00071A  6E37               	movwf	_posMax^0,c
  6495  00071C                     l8002:
  6496                           
  6497                           ;TMenu.c: 204:             posLCD++;
  6498  00071C  2A3A               	incf	_posLCD^0,f,c
  6499                           
  6500                           ;TMenu.c: 207:         } else {
  6501  00071E  D004               	goto	l8008
  6502  000720                     l8004:
  6503                           
  6504                           ;TMenu.c: 208:             extraPos++;
  6505  000720  2A38               	incf	_extraPos^0,f,c
  6506                           
  6507                           ;TMenu.c: 210:             posLCD = posMin = posMin2 = finalMarq = finalMarq2 = 0;
  6508  000722  D822               	call	PL56	;call to abstracted procedure
  6509  000724  6A3A               	clrf	_posLCD^0,c
  6510                           
  6511                           ;TMenu.c: 212:             posMax--;
  6512  000726  0637               	decf	_posMax^0,f,c
  6513  000728                     l8008:
  6514                           
  6515                           ;TMenu.c: 214:         TiResetTics(timer);
  6516  000728  503D               	movf	_timer@TMenu$F1082^0,w,c
  6517  00072A  EF1A  F00E         	goto	_TiResetTics
  6518  00072E                     __end_of_showLCD_Marq:
  6519                           	callstack 0
  6520  00072E                     PL2:
  6521                           	callstack 22
  6522  00072E  6E72               	movwf	(??_showLCD_Marq+1)^0,c
  6523  000730  5038               	movf	_extraPos^0,w,c
  6524  000732  2671               	addwf	??_showLCD_Marq^0,f,c
  6525  000734  0E00               	movlw	0
  6526  000736  2272               	addwfc	(??_showLCD_Marq+1)^0,f,c
  6527  000738  C071  FFF6         	movff	??_showLCD_Marq,tblptrl
  6528  00073C  C072  FFF7         	movff	??_showLCD_Marq+1,tblptrh
  6529  000740                     	if	0	;tblptru may be non-zero
  6530  000740                     	endif
  6531  000740                     	if	0	;tblptru may be non-zero
  6532  000740                     	endif
  6533  000740  0008               	tblrd		*
  6534  000742  50F5               	movf	tablat,w,c
  6535  000744  0012               	return	
  6536  000746                     __end_ofPL2:
  6537                           	callstack 0
  6538  000746                     PL4:
  6539                           	callstack 22
  6540  000746  25B7               	addwf	showLCD_Marq@message2& (0+255),w,b
  6541  000748  6E71               	movwf	??_showLCD_Marq^0,c
  6542  00074A  0E00               	movlw	0
  6543  00074C  21B8               	addwfc	(showLCD_Marq@message2+1)& (0+255),w,b
  6544  00074E  0012               	return	
  6545  000750                     __end_ofPL4:
  6546                           	callstack 0
  6547  000750                     PL6:
  6548                           	callstack 22
  6549  000750  25B5               	addwf	showLCD_Marq@message1& (0+255),w,b
  6550  000752  6E71               	movwf	??_showLCD_Marq^0,c
  6551  000754  0E00               	movlw	0
  6552  000756  21B6               	addwfc	(showLCD_Marq@message1+1)& (0+255),w,b
  6553  000758  0012               	return	
  6554  00075A                     __end_ofPL6:
  6555                           	callstack 0
  6556  00075A                     PL8:
  6557                           	callstack 22
  6558  00075A  C071  FFF6         	movff	??_showLCD_Marq,tblptrl
  6559  00075E  C072  FFF7         	movff	??_showLCD_Marq+1,tblptrh
  6560  000762                     	if	0	;tblptru may be non-zero
  6561  000762                     	endif
  6562  000762                     	if	0	;tblptru may be non-zero
  6563  000762                     	endif
  6564  000762  0008               	tblrd		*
  6565  000764  50F5               	movf	tablat,w,c
  6566  000766  0012               	return	
  6567  000768                     __end_ofPL8:
  6568                           	callstack 0
  6569  000768                     PL56:
  6570                           	callstack 23
  6571  000768  6A33               	clrf	_finalMarq2^0,c
  6572  00076A  6A34               	clrf	_finalMarq^0,c
  6573  00076C  6A35               	clrf	_posMin2^0,c
  6574  00076E  6A36               	clrf	_posMin^0,c
  6575  000770  0012               	return	
  6576  000772                     __end_ofPL56:
  6577                           	callstack 0
  6578                           
  6579 ;; *************** function _showLCD *****************
  6580 ;; Defined at:
  6581 ;;		line 86 in file "TMenu.c"
  6582 ;; Parameters:    Size  Location     Type
  6583 ;;  message1        2    5[BANK1 ] PTR const unsigned char 
  6584 ;;		 -> SHOW_CURR_TIME(23), SHOW_MODY_TIME(23), EMPTY(23), SHOW_RECORDING(23), 
  6585 ;;		 -> MENU1_LOG(23), END_MSG(23), 
  6586 ;;  message2        2    7[BANK1 ] PTR const unsigned char 
  6587 ;;		 -> STR_3(1), EMPTY2(23), NOTHING2(23), showTime(23), 
  6588 ;; Auto vars:     Size  Location     Type
  6589 ;;		None
  6590 ;; Return value:  Size  Location     Type
  6591 ;;                  1    wreg      void 
  6592 ;; Registers used:
  6593 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6594 ;; Tracked objects:
  6595 ;;		On entry : 3F/1
  6596 ;;		On exit  : 0/0
  6597 ;;		Unchanged: 0/0
  6598 ;; Data sizes:     COMRAM   BANK0   BANK1
  6599 ;;      Params:         0       0       4
  6600 ;;      Locals:         0       0       4
  6601 ;;      Temps:          2       0       0
  6602 ;;      Totals:         2       0       8
  6603 ;;Total ram usage:       10 bytes
  6604 ;; Hardware stack levels used: 1
  6605 ;; Hardware stack levels required when called: 7
  6606 ;; This function calls:
  6607 ;;		_LcGotoXY
  6608 ;;		_LcPutChar
  6609 ;; This function is called by:
  6610 ;;		_motorMenu
  6611 ;; This function uses a non-reentrant model
  6612 ;;
  6613                           
  6614                           	psect	text43
  6615  0009A6                     __ptext43:
  6616                           	callstack 0
  6617  0009A6                     _showLCD:
  6618                           	callstack 22
  6619                           
  6620                           ; BSR set to: 1
  6621                           ;TMenu.c: 88:     if ((message1[16] == '\0') && (message2[16] == '\0')) {
  6622                           
  6623                           ;incstack = 0
  6624  0009A6  0E10               	movlw	16
  6625  0009A8  D87C               	call	PL18	;call to abstracted procedure
  6626  0009AA  D867               	call	PL10	;call to abstracted procedure
  6627  0009AC  64F7               	cpfsgt	tblptrh,c
  6628  0009AE  D003               	bra	u6947
  6629  0009B0  0008               	tblrd		*
  6630  0009B2  50F5               	movf	tablat,w,c
  6631  0009B4  D001               	bra	u6940
  6632  0009B6                     u6947:
  6633  0009B6  D869               	call	PL14	;call to abstracted procedure
  6634  0009B8                     u6940:
  6635  0009B8  0900               	iorlw	0
  6636  0009BA  A4D8               	btfss	status,2,c
  6637  0009BC  0012               	return	
  6638  0009BE  0E10               	movlw	16
  6639  0009C0  D86A               	call	PL16	;call to abstracted procedure
  6640  0009C2  D85B               	call	PL10	;call to abstracted procedure
  6641  0009C4  64F7               	cpfsgt	tblptrh,c
  6642  0009C6  D003               	bra	u6967
  6643  0009C8  0008               	tblrd		*
  6644  0009CA  50F5               	movf	tablat,w,c
  6645  0009CC  D001               	bra	u6960
  6646  0009CE                     u6967:
  6647  0009CE  D85D               	call	PL14	;call to abstracted procedure
  6648  0009D0                     u6960:
  6649  0009D0  0900               	iorlw	0
  6650  0009D2  A4D8               	btfss	status,2,c
  6651  0009D4  0012               	return	
  6652                           
  6653                           ;TMenu.c: 89:         if (posLCD < 16) {
  6654  0009D6  0E10               	movlw	16
  6655  0009D8  603A               	cpfslt	_posLCD^0,c
  6656  0009DA  D04A               	goto	l7890
  6657                           
  6658                           ;TMenu.c: 90:             LcGotoXY(posLCD, 0);
  6659  0009DC  6A6D               	clrf	LcGotoXY@Row^0,c
  6660  0009DE  503A               	movf	_posLCD^0,w,c
  6661  0009E0  ECE5  F006         	call	_LcGotoXY
  6662                           
  6663                           ;TMenu.c: 91:             LcPutChar((message1[posLCD] != '\0') ? message1[posLCD] : ' ')
      +                          ;
  6664  0009E4  503A               	movf	_posLCD^0,w,c
  6665  0009E6  0101               	movlb	1	; () banked
  6666  0009E8  D85C               	call	PL18	;call to abstracted procedure
  6667  0009EA  D847               	call	PL10	;call to abstracted procedure
  6668  0009EC  64F7               	cpfsgt	tblptrh,c
  6669  0009EE  D003               	bra	u6997
  6670  0009F0  0008               	tblrd		*
  6671  0009F2  50F5               	movf	tablat,w,c
  6672  0009F4  D001               	bra	u6990
  6673  0009F6                     u6997:
  6674  0009F6  D849               	call	PL14	;call to abstracted procedure
  6675  0009F8                     u6990:
  6676  0009F8  0900               	iorlw	0
  6677  0009FA  E105               	bnz	l7876
  6678  0009FC  0101               	movlb	1	; () banked
  6679  0009FE  6BBA               	clrf	(_showLCD$1118+1)& (0+255),b
  6680  000A00  0E20               	movlw	32
  6681  000A02  6FB9               	movwf	_showLCD$1118& (0+255),b
  6682  000A04  D00D               	goto	l7878
  6683  000A06                     l7876:
  6684  000A06  503A               	movf	_posLCD^0,w,c
  6685  000A08  0101               	movlb	1	; () banked
  6686  000A0A  D84B               	call	PL18	;call to abstracted procedure
  6687  000A0C  D836               	call	PL10	;call to abstracted procedure
  6688  000A0E  64F7               	cpfsgt	tblptrh,c
  6689  000A10  D003               	bra	u7017
  6690  000A12  0008               	tblrd		*
  6691  000A14  50F5               	movf	tablat,w,c
  6692  000A16  D001               	bra	u7010
  6693  000A18                     u7017:
  6694  000A18  D838               	call	PL14	;call to abstracted procedure
  6695  000A1A                     u7010:
  6696  000A1A  0101               	movlb	1	; () banked
  6697  000A1C  6FB9               	movwf	_showLCD$1118& (0+255),b
  6698  000A1E  6BBA               	clrf	(_showLCD$1118+1)& (0+255),b
  6699  000A20                     l7878:
  6700                           
  6701                           ; BSR set to: 1
  6702  000A20  51B9               	movf	_showLCD$1118& (0+255),w,b
  6703  000A22  ECE3  F00A         	call	_LcPutChar
  6704                           
  6705                           ;TMenu.c: 92:             LcGotoXY(posLCD, 1);
  6706  000A26  ECB9  F001         	call	PL44	;call to abstracted procedure
  6707  000A2A  ECE5  F006         	call	_LcGotoXY
  6708                           
  6709                           ;TMenu.c: 93:             LcPutChar((message2[posLCD] != '\0') ? message2[posLCD] : ' ')
      +                          ;
  6710  000A2E  503A               	movf	_posLCD^0,w,c
  6711  000A30  D832               	call	PL16	;call to abstracted procedure
  6712  000A32  D823               	call	PL10	;call to abstracted procedure
  6713  000A34  64F7               	cpfsgt	tblptrh,c
  6714  000A36  D003               	bra	u7027
  6715  000A38  0008               	tblrd		*
  6716  000A3A  50F5               	movf	tablat,w,c
  6717  000A3C  D001               	bra	u7020
  6718  000A3E                     u7027:
  6719  000A3E  D825               	call	PL14	;call to abstracted procedure
  6720  000A40                     u7020:
  6721  000A40  0900               	iorlw	0
  6722  000A42  E105               	bnz	l7884
  6723  000A44  0101               	movlb	1	; () banked
  6724  000A46  6BBC               	clrf	(_showLCD$1119+1)& (0+255),b
  6725  000A48  0E20               	movlw	32
  6726  000A4A  6FBB               	movwf	_showLCD$1119& (0+255),b
  6727  000A4C  D00C               	goto	l7886
  6728  000A4E                     l7884:
  6729  000A4E  503A               	movf	_posLCD^0,w,c
  6730  000A50  D822               	call	PL16	;call to abstracted procedure
  6731  000A52  D813               	call	PL10	;call to abstracted procedure
  6732  000A54  64F7               	cpfsgt	tblptrh,c
  6733  000A56  D003               	bra	u7047
  6734  000A58  0008               	tblrd		*
  6735  000A5A  50F5               	movf	tablat,w,c
  6736  000A5C  D001               	bra	u7040
  6737  000A5E                     u7047:
  6738  000A5E  D815               	call	PL14	;call to abstracted procedure
  6739  000A60                     u7040:
  6740  000A60  0101               	movlb	1	; () banked
  6741  000A62  6FBB               	movwf	_showLCD$1119& (0+255),b
  6742  000A64  6BBC               	clrf	(_showLCD$1119+1)& (0+255),b
  6743  000A66                     l7886:
  6744                           
  6745                           ; BSR set to: 1
  6746  000A66  51BB               	movf	_showLCD$1119& (0+255),w,b
  6747  000A68  ECE3  F00A         	call	_LcPutChar
  6748                           
  6749                           ;TMenu.c: 94:             posLCD++;
  6750  000A6C  2A3A               	incf	_posLCD^0,f,c
  6751                           
  6752                           ;TMenu.c: 95:         } else {
  6753  000A6E  0012               	return	
  6754  000A70                     l7890:
  6755                           
  6756                           ;TMenu.c: 96:             if (caseMenu == 5) {
  6757  000A70  0E05               	movlw	5
  6758  000A72  183B               	xorwf	_caseMenu^0,w,c
  6759  000A74  B4D8               	btfsc	status,2,c
  6760                           
  6761                           ;TMenu.c: 97:                 posLCD = 0;
  6762  000A76  6A3A               	clrf	_posLCD^0,c
  6763  000A78  0012               	return		;funcret
  6764  000A7A                     __end_of_showLCD:
  6765                           	callstack 0
  6766  000A7A                     PL10:
  6767                           	callstack 22
  6768  000A7A  6E72               	movwf	(??_showLCD+1)^0,c
  6769  000A7C  C071  FFF6         	movff	??_showLCD,tblptrl
  6770  000A80  C072  FFF7         	movff	??_showLCD+1,tblptrh
  6771  000A84  6AF8               	clrf	tblptru,c
  6772  000A86  0E01               	movlw	(high __ramtop+-1)
  6773  000A88  0012               	return	
  6774  000A8A                     __end_ofPL10:
  6775                           	callstack 0
  6776  000A8A                     PL14:
  6777                           	callstack 22
  6778  000A8A  CFF6 FFE9          	movff	tblptrl,fsr0l
  6779  000A8E  CFF7 FFEA          	movff	tblptrh,fsr0h
  6780  000A92  50EF               	movf	indf0,w,c
  6781  000A94  0012               	return	
  6782  000A96                     __end_ofPL14:
  6783                           	callstack 0
  6784  000A96                     PL16:
  6785                           	callstack 22
  6786  000A96  0101               	movlb	1	; () banked
  6787  000A98  25B7               	addwf	showLCD@message2& (0+255),w,b
  6788  000A9A  6E71               	movwf	??_showLCD^0,c
  6789  000A9C  0E00               	movlw	0
  6790  000A9E  21B8               	addwfc	(showLCD@message2+1)& (0+255),w,b
  6791  000AA0  0012               	return	
  6792  000AA2                     __end_ofPL16:
  6793                           	callstack 0
  6794  000AA2                     PL18:
  6795                           	callstack 22
  6796  000AA2  25B5               	addwf	showLCD@message1& (0+255),w,b
  6797  000AA4  6E71               	movwf	??_showLCD^0,c
  6798  000AA6  0E00               	movlw	0
  6799  000AA8  21B6               	addwfc	(showLCD@message1+1)& (0+255),w,b
  6800  000AAA  0012               	return	
  6801  000AAC                     __end_ofPL18:
  6802                           	callstack 0
  6803                           
  6804 ;; *************** function _LcPutChar *****************
  6805 ;; Defined at:
  6806 ;;		line 142 in file "LcTLCD.c"
  6807 ;; Parameters:    Size  Location     Type
  6808 ;;  c               1    wreg     unsigned char 
  6809 ;; Auto vars:     Size  Location     Type
  6810 ;;  c               1   22[COMRAM] unsigned char 
  6811 ;; Return value:  Size  Location     Type
  6812 ;;                  1    wreg      void 
  6813 ;; Registers used:
  6814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6815 ;; Tracked objects:
  6816 ;;		On entry : 0/1
  6817 ;;		On exit  : 0/0
  6818 ;;		Unchanged: 0/0
  6819 ;; Data sizes:     COMRAM   BANK0   BANK1
  6820 ;;      Params:         0       0       0
  6821 ;;      Locals:         1       0       0
  6822 ;;      Temps:          0       0       0
  6823 ;;      Totals:         1       0       0
  6824 ;;Total ram usage:        1 bytes
  6825 ;; Hardware stack levels used: 1
  6826 ;; Hardware stack levels required when called: 6
  6827 ;; This function calls:
  6828 ;;		_CantaData
  6829 ;;		_LcGotoXY
  6830 ;;		_WaitForBusy
  6831 ;; This function is called by:
  6832 ;;		_cleanPortName
  6833 ;;		_printLetter
  6834 ;;		_showLCD
  6835 ;;		_showLCD_Records
  6836 ;;		_showLCD_Marq
  6837 ;; This function uses a non-reentrant model
  6838 ;;
  6839                           
  6840                           	psect	text44
  6841  0015C6                     __ptext44:
  6842                           	callstack 0
  6843  0015C6                     _LcPutChar:
  6844                           	callstack 20
  6845                           
  6846                           ;incstack = 0
  6847                           ;LcPutChar@c stored from wreg
  6848  0015C6  6E70               	movwf	LcPutChar@c^0,c
  6849                           
  6850                           ;LcTLCD.c: 152:  WaitForBusy(); CantaData(c);
  6851  0015C8  ECE5  F00B         	call	_WaitForBusy	;wreg free
  6852  0015CC  5070               	movf	LcPutChar@c^0,w,c
  6853  0015CE  EC04  F00C         	call	_CantaData
  6854                           
  6855                           ;LcTLCD.c: 154:  ++ColumnAct;
  6856  0015D2  2A4C               	incf	_ColumnAct^0,f,c
  6857                           
  6858                           ;LcTLCD.c: 155:  if (Rows == 3) {
  6859  0015D4  0E03               	movlw	3
  6860  0015D6  184F               	xorwf	_Rows^0,w,c
  6861  0015D8  E107               	bnz	l7454
  6862                           
  6863                           ;LcTLCD.c: 156:   if (ColumnAct >= 20) {
  6864  0015DA  0E13               	movlw	19
  6865  0015DC  644C               	cpfsgt	_ColumnAct^0,c
  6866  0015DE  0C13               	retlw	19
  6867                           
  6868                           ;LcTLCD.c: 157:    ColumnAct = 0;
  6869  0015E0  6A4C               	clrf	_ColumnAct^0,c
  6870                           
  6871                           ;LcTLCD.c: 158:    if (++RowAct >= 4) RowAct = 0;
  6872  0015E2  2A4D               	incf	_RowAct^0,f,c
  6873  0015E4  0E03               	movlw	3
  6874  0015E6  D009               	goto	L13
  6875  0015E8                     l7454:
  6876                           
  6877                           ;LcTLCD.c: 162:  if (Rows == 2) {
  6878  0015E8  0E02               	movlw	2
  6879  0015EA  184F               	xorwf	_Rows^0,w,c
  6880  0015EC  E10A               	bnz	l7466
  6881                           
  6882                           ;LcTLCD.c: 163:   if (ColumnAct >= 40) {
  6883  0015EE  0E27               	movlw	39
  6884  0015F0  644C               	cpfsgt	_ColumnAct^0,c
  6885  0015F2  0C27               	retlw	39
  6886                           
  6887                           ;LcTLCD.c: 164:    ColumnAct = 0;
  6888  0015F4  6A4C               	clrf	_ColumnAct^0,c
  6889                           
  6890                           ;LcTLCD.c: 165:    if (++RowAct >= 2) RowAct = 0;
  6891  0015F6  2A4D               	incf	_RowAct^0,f,c
  6892  0015F8  0E01               	movlw	1
  6893  0015FA                     L13:
  6894  0015FA  644D               	cpfsgt	_RowAct^0,c
  6895  0015FC  D009               	goto	l7472
  6896  0015FE  6A4D               	clrf	_RowAct^0,c
  6897  001600  D007               	goto	l7472
  6898  001602                     l7466:
  6899                           
  6900                           ;LcTLCD.c: 169:  if (RowAct == 1) {
  6901  001602  044D               	decf	_RowAct^0,w,c
  6902  001604  A4D8               	btfss	status,2,c
  6903  001606  0012               	return	
  6904                           
  6905                           ;LcTLCD.c: 170:   if (ColumnAct >= 40) ColumnAct = 0;
  6906  001608  0E27               	movlw	39
  6907  00160A  644C               	cpfsgt	_ColumnAct^0,c
  6908  00160C  D001               	goto	l7472
  6909  00160E  6A4C               	clrf	_ColumnAct^0,c
  6910  001610                     l7472:
  6911                           
  6912                           ;LcTLCD.c: 171:   LcGotoXY(ColumnAct, RowAct);
  6913  001610  C04D  F06D         	movff	_RowAct,LcGotoXY@Row
  6914  001614  504C               	movf	_ColumnAct^0,w,c
  6915  001616  EFE5  F006         	goto	_LcGotoXY
  6916  00161A                     __end_of_LcPutChar:
  6917                           	callstack 0
  6918                           
  6919 ;; *************** function _LcGotoXY *****************
  6920 ;; Defined at:
  6921 ;;		line 115 in file "LcTLCD.c"
  6922 ;; Parameters:    Size  Location     Type
  6923 ;;  Column          1    wreg     unsigned char 
  6924 ;;  Row             1   19[COMRAM] unsigned char 
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;  Column          1    4[BANK1 ] unsigned char 
  6927 ;;  Fisics          2    2[BANK1 ] int 
  6928 ;; Return value:  Size  Location     Type
  6929 ;;                  1    wreg      void 
  6930 ;; Registers used:
  6931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6932 ;; Tracked objects:
  6933 ;;		On entry : 0/1
  6934 ;;		On exit  : 0/0
  6935 ;;		Unchanged: 0/0
  6936 ;; Data sizes:     COMRAM   BANK0   BANK1
  6937 ;;      Params:         1       0       0
  6938 ;;      Locals:         0       0       5
  6939 ;;      Temps:          2       0       0
  6940 ;;      Totals:         3       0       5
  6941 ;;Total ram usage:        8 bytes
  6942 ;; Hardware stack levels used: 1
  6943 ;; Hardware stack levels required when called: 5
  6944 ;; This function calls:
  6945 ;;		_CantaIR
  6946 ;;		_WaitForBusy
  6947 ;; This function is called by:
  6948 ;;		_LcPutChar
  6949 ;;		_modifyHora
  6950 ;;		_cleanPortName
  6951 ;;		_printLetter
  6952 ;;		_showLCD
  6953 ;;		_showLCD_Records
  6954 ;;		_showLCD_Marq
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           	psect	text45
  6959  000DCA                     __ptext45:
  6960                           	callstack 0
  6961  000DCA                     _LcGotoXY:
  6962                           	callstack 20
  6963                           
  6964                           ;incstack = 0
  6965                           ;LcGotoXY@Column stored from wreg
  6966  000DCA  0101               	movlb	1	; () banked
  6967  000DCC  6FB4               	movwf	LcGotoXY@Column& (0+255),b
  6968                           
  6969                           ;LcTLCD.c: 119:  int Fisics;;LcTLCD.c: 121:  switch (Rows) {
  6970  000DCE  D02E               	goto	l7384
  6971  000DD0                     l7364:
  6972                           
  6973                           ;LcTLCD.c: 123:    Fisics = Column + (!Row ? 0 : 0x40); break;
  6974  000DD0  506D               	movf	LcGotoXY@Row^0,w,c
  6975  000DD2  E005               	bz	l56
  6976  000DD4  0101               	movlb	1	; () banked
  6977  000DD6  6BB1               	clrf	(_LcGotoXY$320+1)& (0+255),b
  6978  000DD8  0E40               	movlw	64
  6979  000DDA  6FB0               	movwf	_LcGotoXY$320& (0+255),b
  6980  000DDC  D003               	goto	l7368
  6981  000DDE                     l56:
  6982  000DDE  0101               	movlb	1	; () banked
  6983  000DE0  6BB0               	clrf	_LcGotoXY$320& (0+255),b
  6984  000DE2  6BB1               	clrf	(_LcGotoXY$320+1)& (0+255),b
  6985  000DE4                     l7368:
  6986                           
  6987                           ; BSR set to: 1
  6988  000DE4  51B4               	movf	LcGotoXY@Column& (0+255),w,b
  6989  000DE6  25B0               	addwf	_LcGotoXY$320& (0+255),w,b
  6990  000DE8  6FB2               	movwf	LcGotoXY@Fisics& (0+255),b
  6991  000DEA  0E00               	movlw	0
  6992  000DEC  21B1               	addwfc	(_LcGotoXY$320+1)& (0+255),w,b
  6993  000DEE  6FB3               	movwf	(LcGotoXY@Fisics+1)& (0+255),b
  6994  000DF0  D02A               	goto	l7386
  6995  000DF2                     l60:
  6996                           
  6997                           ;LcTLCD.c: 125:    Fisics = Column;
  6998  000DF2  D835               	call	PL72	;call to abstracted procedure
  6999                           
  7000                           ; BSR set to: 1
  7001                           ;LcTLCD.c: 126:    if (Row == 1) Fisics += 0x40; else
  7002  000DF4  046D               	decf	LcGotoXY@Row^0,w,c
  7003  000DF6  E102               	bnz	l7374
  7004                           
  7005                           ; BSR set to: 1
  7006  000DF8  0E40               	movlw	64
  7007  000DFA  D004               	goto	L14
  7008  000DFC                     l7374:
  7009                           
  7010                           ; BSR set to: 1
  7011                           ;LcTLCD.c: 127:    if (Row == 2) Fisics += Columns; else
  7012  000DFC  0E02               	movlw	2
  7013  000DFE  186D               	xorwf	LcGotoXY@Row^0,w,c
  7014  000E00  E104               	bnz	l7378
  7015                           
  7016                           ; BSR set to: 1
  7017  000E02  504E               	movf	_Columns^0,w,c
  7018  000E04                     L14:
  7019  000E04  27B2               	addwf	LcGotoXY@Fisics& (0+255),f,b
  7020  000E06  0E00               	movlw	0
  7021  000E08  D00D               	goto	L15
  7022  000E0A                     l7378:
  7023                           
  7024                           ; BSR set to: 1
  7025                           ;LcTLCD.c: 128:    if (Row == 3) Fisics += 0x40+Columns;
  7026  000E0A  0E03               	movlw	3
  7027  000E0C  186D               	xorwf	LcGotoXY@Row^0,w,c
  7028  000E0E  E11B               	bnz	l7386
  7029                           
  7030                           ; BSR set to: 1
  7031  000E10  504E               	movf	_Columns^0,w,c
  7032  000E12  6E6E               	movwf	??_LcGotoXY^0,c
  7033  000E14  6A6F               	clrf	(??_LcGotoXY+1)^0,c
  7034  000E16  0E40               	movlw	64
  7035  000E18  266E               	addwf	??_LcGotoXY^0,f,c
  7036  000E1A  0E00               	movlw	0
  7037  000E1C  226F               	addwfc	(??_LcGotoXY+1)^0,f,c
  7038  000E1E  506E               	movf	??_LcGotoXY^0,w,c
  7039  000E20  27B2               	addwf	LcGotoXY@Fisics& (0+255),f,b
  7040  000E22  506F               	movf	(??_LcGotoXY+1)^0,w,c
  7041  000E24                     L15:
  7042  000E24  23B3               	addwfc	(LcGotoXY@Fisics+1)& (0+255),f,b
  7043                           
  7044                           ; BSR set to: 1
  7045                           ;LcTLCD.c: 129:    break;
  7046  000E26  D00F               	goto	l7386
  7047  000E28                     l67:
  7048                           
  7049                           ;LcTLCD.c: 132:    Fisics = Column; break;
  7050  000E28  D81A               	call	PL72	;call to abstracted procedure
  7051  000E2A  D00D               	goto	l7386
  7052  000E2C                     l7384:
  7053  000E2C  504F               	movf	_Rows^0,w,c
  7054  000E2E  6E6E               	movwf	??_LcGotoXY^0,c
  7055  000E30  6A6F               	clrf	(??_LcGotoXY+1)^0,c
  7056                           
  7057                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7058                           ; Switch size 1, requested type "space"
  7059                           ; Number of cases is 1, Range of values is 0 to 0
  7060                           ; switch strategies available:
  7061                           ; Name         Instructions Cycles
  7062                           ; simple_byte            4     3 (average)
  7063                           ;	Chosen strategy is simple_byte
  7064  000E32  506F               	movf	(??_LcGotoXY+1)^0,w,c
  7065  000E34  E1F9               	bnz	l67
  7066                           
  7067                           ; Switch size 1, requested type "space"
  7068                           ; Number of cases is 3, Range of values is 1 to 4
  7069                           ; switch strategies available:
  7070                           ; Name         Instructions Cycles
  7071                           ; simple_byte           10     6 (average)
  7072                           ;	Chosen strategy is simple_byte
  7073  000E36  506E               	movf	??_LcGotoXY^0,w,c
  7074  000E38  0A01               	xorlw	1	; case 1
  7075  000E3A  E0F6               	bz	l67
  7076  000E3C  0A03               	xorlw	3	; case 2
  7077  000E3E  E0C8               	bz	l7364
  7078  000E40  0A06               	xorlw	6	; case 4
  7079  000E42  E0D7               	bz	l60
  7080  000E44  D7F1               	goto	l67
  7081  000E46                     l7386:
  7082                           
  7083                           ; BSR set to: 1
  7084                           ;LcTLCD.c: 135:  WaitForBusy();
  7085  000E46  ECE5  F00B         	call	_WaitForBusy	;wreg free
  7086                           
  7087                           ;LcTLCD.c: 136:  CantaIR(0x80 | Fisics);
  7088  000E4A  0101               	movlb	1	; () banked
  7089  000E4C  51B2               	movf	LcGotoXY@Fisics& (0+255),w,b
  7090  000E4E  0980               	iorlw	128
  7091  000E50  EC8F  F00D         	call	_CantaIR
  7092                           
  7093                           ;LcTLCD.c: 138:  RowAct = Row;
  7094  000E54  C06D  F04D         	movff	LcGotoXY@Row,_RowAct
  7095                           
  7096                           ;LcTLCD.c: 139:  ColumnAct = Column;
  7097  000E58  C1B4  F04C         	movff	LcGotoXY@Column,_ColumnAct
  7098  000E5C  0012               	return		;funcret
  7099  000E5E                     __end_of_LcGotoXY:
  7100                           	callstack 0
  7101  000E5E                     PL72:
  7102                           	callstack 20
  7103  000E5E  C1B4  F1B2         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  7104  000E62  0101               	movlb	1	; () banked
  7105  000E64  6BB3               	clrf	(LcGotoXY@Fisics+1)& (0+255),b
  7106  000E66  0012               	return	
  7107  000E68                     __end_ofPL72:
  7108                           	callstack 0
  7109                           
  7110 ;; *************** function _CantaData *****************
  7111 ;; Defined at:
  7112 ;;		line 218 in file "LcTLCD.c"
  7113 ;; Parameters:    Size  Location     Type
  7114 ;;  Data            1    wreg     unsigned char 
  7115 ;; Auto vars:     Size  Location     Type
  7116 ;;  Data            1   13[COMRAM] unsigned char 
  7117 ;; Return value:  Size  Location     Type
  7118 ;;                  1    wreg      void 
  7119 ;; Registers used:
  7120 ;;		wreg, status,2, status,0, cstack
  7121 ;; Tracked objects:
  7122 ;;		On entry : 0/1
  7123 ;;		On exit  : 0/0
  7124 ;;		Unchanged: 0/0
  7125 ;; Data sizes:     COMRAM   BANK0   BANK1
  7126 ;;      Params:         0       0       0
  7127 ;;      Locals:         1       0       0
  7128 ;;      Temps:          0       0       0
  7129 ;;      Totals:         1       0       0
  7130 ;;Total ram usage:        1 bytes
  7131 ;; Hardware stack levels used: 1
  7132 ;; Hardware stack levels required when called: 4
  7133 ;; This function calls:
  7134 ;;		_CantaPartAlta
  7135 ;;		_CantaPartBaixa
  7136 ;; This function is called by:
  7137 ;;		_LcPutChar
  7138 ;; This function uses a non-reentrant model
  7139 ;;
  7140                           
  7141                           	psect	text46
  7142  001808                     __ptext46:
  7143                           	callstack 0
  7144  001808                     _CantaData:
  7145                           	callstack 21
  7146                           
  7147                           ;incstack = 0
  7148                           ;CantaData@Data stored from wreg
  7149  001808  6E67               	movwf	CantaData@Data^0,c
  7150                           
  7151                           ;LcTLCD.c: 219:  (TRISCbits.RC0 = TRISCbits.RC1 = TRISCbits.RC2 = TRISCbits.RC3 = 0);
  7152  00180A  9694               	bcf	148,3,c	;volatile
  7153  00180C  9494               	bcf	148,2,c	;volatile
  7154  00180E  9294               	bcf	148,1,c	;volatile
  7155  001810  9094               	bcf	148,0,c	;volatile
  7156                           
  7157                           ;LcTLCD.c: 220:  (LATBbits.LATB3 = 1);
  7158  001812  868A               	bsf	138,3,c	;volatile
  7159                           
  7160                           ;LcTLCD.c: 221:  (LATBbits.LATB4 = 0);
  7161  001814  988A               	bcf	138,4,c	;volatile
  7162                           
  7163                           ;LcTLCD.c: 222:  (LATBbits.LATB5 = 1);
  7164  001816  8A8A               	bsf	138,5,c	;volatile
  7165                           
  7166                           ;LcTLCD.c: 223:  CantaPartAlta(Data);
  7167  001818  5067               	movf	CantaData@Data^0,w,c
  7168  00181A  EC25  F00A         	call	_CantaPartAlta
  7169                           
  7170                           ;LcTLCD.c: 224:  (LATBbits.LATB5 = 1);
  7171                           
  7172                           ;LcTLCD.c: 225:  (LATBbits.LATB5 = 0);
  7173                           
  7174                           ;LcTLCD.c: 226:  (LATBbits.LATB5 = 0);
  7175                           
  7176                           ;LcTLCD.c: 227:  (LATBbits.LATB5 = 1);
  7177  00181E  D80B               	call	PL84	;call to abstracted procedure
  7178                           
  7179                           ;LcTLCD.c: 228:  CantaPartBaixa(Data);
  7180  001820  5067               	movf	CantaData@Data^0,w,c
  7181  001822  ECF2  F009         	call	_CantaPartBaixa
  7182                           
  7183                           ;LcTLCD.c: 229:  (LATBbits.LATB5 = 1);
  7184                           
  7185                           ;LcTLCD.c: 230:  (LATBbits.LATB5 = 0);
  7186                           
  7187                           ;LcTLCD.c: 231:  (TRISCbits.RC0 = TRISCbits.RC1 = TRISCbits.RC2 = TRISCbits.RC3 = 1);
  7188  001826  D000               	goto	PL42	;call to abstracted procedure
  7189  001828                     __end_of_CantaData:
  7190                           	callstack 0
  7191  001828                     PL42:
  7192                           	callstack 20
  7193  001828  8A8A               	bsf	138,5,c	;volatile
  7194  00182A  9A8A               	bcf	138,5,c	;volatile
  7195  00182C  8694               	bsf	148,3,c	;volatile
  7196  00182E  8494               	bsf	148,2,c	;volatile
  7197  001830  8294               	bsf	148,1,c	;volatile
  7198  001832  8094               	bsf	148,0,c	;volatile
  7199  001834  0012               	return		;funcret
  7200  001836                     __end_ofPL42:
  7201                           	callstack 0
  7202  001836                     PL84:
  7203                           	callstack 20
  7204  001836  8A8A               	bsf	138,5,c	;volatile
  7205  001838  9A8A               	bcf	138,5,c	;volatile
  7206  00183A  9A8A               	bcf	138,5,c	;volatile
  7207  00183C  8A8A               	bsf	138,5,c	;volatile
  7208  00183E  0012               	return	
  7209  001840                     __end_ofPL84:
  7210                           	callstack 0
  7211                           
  7212 ;; *************** function _motorMelody *****************
  7213 ;; Defined at:
  7214 ;;		line 75 in file "TSound.c"
  7215 ;; Parameters:    Size  Location     Type
  7216 ;;		None
  7217 ;; Auto vars:     Size  Location     Type
  7218 ;;		None
  7219 ;; Return value:  Size  Location     Type
  7220 ;;                  1    wreg      void 
  7221 ;; Registers used:
  7222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7223 ;; Tracked objects:
  7224 ;;		On entry : 0/0
  7225 ;;		On exit  : 0/0
  7226 ;;		Unchanged: 0/0
  7227 ;; Data sizes:     COMRAM   BANK0   BANK1
  7228 ;;      Params:         0       0       0
  7229 ;;      Locals:         0       0       0
  7230 ;;      Temps:          2       0       0
  7231 ;;      Totals:         2       0       0
  7232 ;;Total ram usage:        2 bytes
  7233 ;; Hardware stack levels used: 1
  7234 ;; Hardware stack levels required when called: 4
  7235 ;; This function calls:
  7236 ;;		_TiGetTics
  7237 ;;		_TiResetTics
  7238 ;; This function is called by:
  7239 ;;		_main
  7240 ;; This function uses a non-reentrant model
  7241 ;;
  7242                           
  7243                           	psect	text47
  7244  000F9A                     __ptext47:
  7245                           	callstack 0
  7246  000F9A                     _motorMelody:
  7247                           	callstack 26
  7248                           
  7249                           ;TSound.c: 76:     static unsigned char state2 = 0;;TSound.c: 78:     if(melody){
  7250                           
  7251                           ;incstack = 0
  7252  000F9A  5018               	movf	_melody^0,w,c
  7253  000F9C  E11E               	bnz	l8542
  7254  000F9E  0012               	return	
  7255  000FA0                     l8524:
  7256                           
  7257                           ;TSound.c: 83:                     if (TiGetTics(timer) >= (nota >> 1)){
  7258  000FA0  D83D               	call	PL66	;call to abstracted procedure
  7259  000FA2  EC57  F00C         	call	_TiGetTics
  7260  000FA6  506C               	movf	??_motorMelody^0,w,c
  7261  000FA8  5C65               	subwf	?_TiGetTics^0,w,c
  7262  000FAA  506D               	movf	(??_motorMelody+1)^0,w,c
  7263  000FAC  5866               	subwfb	(?_TiGetTics+1)^0,w,c
  7264  000FAE  E31E               	bnc	l8544
  7265                           
  7266                           ;TSound.c: 84:                        TiResetTics(timer);
  7267  000FB0  501D               	movf	_timer@TSound$F1621^0,w,c
  7268  000FB2  EC1A  F00E         	call	_TiResetTics
  7269                           
  7270                           ;TSound.c: 85:                        LATAbits.LATA5 = 1;
  7271  000FB6  8A89               	bsf	137,5,c	;volatile
  7272                           
  7273                           ;TSound.c: 86:                        state2 = 1;
  7274  000FB8  0E01               	movlw	1
  7275  000FBA  6E16               	movwf	motorMelody@state2^0,c
  7276  000FBC  D017               	goto	l8544
  7277  000FBE                     l8532:
  7278                           
  7279                           ;TSound.c: 90:                     if (TiGetTics(timer) >= (nota >> 1)){
  7280  000FBE  D82E               	call	PL66	;call to abstracted procedure
  7281  000FC0  EC57  F00C         	call	_TiGetTics
  7282  000FC4  506C               	movf	??_motorMelody^0,w,c
  7283  000FC6  5C65               	subwf	?_TiGetTics^0,w,c
  7284  000FC8  506D               	movf	(??_motorMelody+1)^0,w,c
  7285  000FCA  5866               	subwfb	(?_TiGetTics+1)^0,w,c
  7286  000FCC  E30F               	bnc	l8544
  7287                           
  7288                           ;TSound.c: 91:                       TiResetTics(timer);
  7289  000FCE  501D               	movf	_timer@TSound$F1621^0,w,c
  7290  000FD0  EC1A  F00E         	call	_TiResetTics
  7291                           
  7292                           ;TSound.c: 92:                       LATAbits.LATA5 = 0;
  7293  000FD4  9A89               	bcf	137,5,c	;volatile
  7294                           
  7295                           ;TSound.c: 93:                       state2 = 0;
  7296  000FD6  6A16               	clrf	motorMelody@state2^0,c
  7297  000FD8  D009               	goto	l8544
  7298  000FDA                     l8542:
  7299  000FDA  5016               	movf	motorMelody@state2^0,w,c
  7300  000FDC  6E6C               	movwf	??_motorMelody^0,c
  7301  000FDE  6A6D               	clrf	(??_motorMelody+1)^0,c
  7302                           
  7303                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7304                           ; Switch size 1, requested type "space"
  7305                           ; Number of cases is 1, Range of values is 0 to 0
  7306                           ; switch strategies available:
  7307                           ; Name         Instructions Cycles
  7308                           ; simple_byte            4     3 (average)
  7309                           ;	Chosen strategy is simple_byte
  7310  000FE0  506D               	movf	(??_motorMelody+1)^0,w,c
  7311  000FE2  E104               	bnz	l8544
  7312                           
  7313                           ; Switch size 1, requested type "space"
  7314                           ; Number of cases is 2, Range of values is 0 to 1
  7315                           ; switch strategies available:
  7316                           ; Name         Instructions Cycles
  7317                           ; simple_byte            7     4 (average)
  7318                           ;	Chosen strategy is simple_byte
  7319  000FE4  506C               	movf	??_motorMelody^0,w,c
  7320  000FE6  E0DC               	bz	l8524
  7321  000FE8  0A01               	xorlw	1	; case 1
  7322  000FEA  E0E9               	bz	l8532
  7323  000FEC                     l8544:
  7324                           
  7325                           ;TSound.c: 99:         if(TiGetTics(timer2) >= 4000){
  7326  000FEC  501C               	movf	_timer2@TSound$F1622^0,w,c
  7327  000FEE  EC57  F00C         	call	_TiGetTics
  7328  000FF2  D81A               	call	PL90	;call to abstracted procedure
  7329  000FF4  E305               	bnc	l8550
  7330                           
  7331                           ;TSound.c: 100:             TiResetTics(timer2);
  7332  000FF6  501C               	movf	_timer2@TSound$F1622^0,w,c
  7333  000FF8  EC1A  F00E         	call	_TiResetTics
  7334                           
  7335                           ;TSound.c: 101:             nota += 2;
  7336  000FFC  0E02               	movlw	2
  7337  000FFE  261A               	addwf	_nota^0,f,c
  7338  001000                     l8550:
  7339                           
  7340                           ;TSound.c: 105:         if (TiGetTics(timer3) >= 20000){
  7341  001000  501B               	movf	_timer3^0,w,c
  7342  001002  EC57  F00C         	call	_TiGetTics
  7343  001006  0E20               	movlw	32
  7344  001008  5C65               	subwf	?_TiGetTics^0,w,c
  7345  00100A  0E4E               	movlw	78
  7346  00100C  5866               	subwfb	(?_TiGetTics+1)^0,w,c
  7347  00100E  A0D8               	btfss	status,0,c
  7348  001010  0012               	return	
  7349                           
  7350                           ;TSound.c: 106:             TiResetTics(timer3);
  7351  001012  501B               	movf	_timer3^0,w,c
  7352  001014  EC1A  F00E         	call	_TiResetTics
  7353                           
  7354                           ;TSound.c: 107:             melody = 0;
  7355  001018  6A18               	clrf	_melody^0,c
  7356  00101A  0012               	return		;funcret
  7357  00101C                     __end_of_motorMelody:
  7358                           	callstack 0
  7359  00101C                     PL66:
  7360                           	callstack 26
  7361  00101C  90D8               	bcf	status,0,c
  7362  00101E  301A               	rrcf	_nota^0,w,c
  7363  001020  6E6C               	movwf	??_motorMelody^0,c
  7364  001022  6A6D               	clrf	(??_motorMelody+1)^0,c
  7365  001024  501D               	movf	_timer@TSound$F1621^0,w,c
  7366  001026  0012               	return	
  7367  001028                     __end_ofPL66:
  7368                           	callstack 0
  7369  001028                     PL90:
  7370                           	callstack 22
  7371  001028  0EA0               	movlw	160
  7372  00102A  5C65               	subwf	?_TiGetTics^0,w,c
  7373  00102C  0E0F               	movlw	15
  7374  00102E  5866               	subwfb	(?_TiGetTics+1)^0,w,c
  7375  001030  0012               	return	
  7376  001032                     __end_ofPL90:
  7377                           	callstack 0
  7378                           
  7379 ;; *************** function _motorHora *****************
  7380 ;; Defined at:
  7381 ;;		line 55 in file "THora.c"
  7382 ;; Parameters:    Size  Location     Type
  7383 ;;		None
  7384 ;; Auto vars:     Size  Location     Type
  7385 ;;		None
  7386 ;; Return value:  Size  Location     Type
  7387 ;;                  1    wreg      void 
  7388 ;; Registers used:
  7389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7390 ;; Tracked objects:
  7391 ;;		On entry : 0/0
  7392 ;;		On exit  : 0/0
  7393 ;;		Unchanged: 0/0
  7394 ;; Data sizes:     COMRAM   BANK0   BANK1
  7395 ;;      Params:         0       0       0
  7396 ;;      Locals:         0       0       0
  7397 ;;      Temps:          2       0       0
  7398 ;;      Totals:         2       0       0
  7399 ;;Total ram usage:        2 bytes
  7400 ;; Hardware stack levels used: 1
  7401 ;; Hardware stack levels required when called: 8
  7402 ;; This function calls:
  7403 ;;		_TiGetTics
  7404 ;;		_TiResetTics
  7405 ;;		_manageMinutes
  7406 ;;		_manageSegons
  7407 ;;		_newHora
  7408 ;; This function is called by:
  7409 ;;		_main
  7410 ;; This function uses a non-reentrant model
  7411 ;;
  7412                           
  7413                           	psect	text48
  7414  0012AC                     __ptext48:
  7415                           	callstack 0
  7416  0012AC                     _motorHora:
  7417                           	callstack 22
  7418                           
  7419                           ;THora.c: 56:     unsigned static char state = 0;;THora.c: 57:     if (startTime) {
  7420                           
  7421                           ;incstack = 0
  7422  0012AC  503F               	movf	_startTime^0,w,c
  7423  0012AE  E123               	bnz	l8514
  7424  0012B0  0012               	return	
  7425  0012B2                     l8492:
  7426                           
  7427                           ;THora.c: 60:                 if (TiGetTics(timer) >= 4000) {
  7428  0012B2  5040               	movf	_timer^0,w,c
  7429  0012B4  EC57  F00C         	call	_TiGetTics
  7430  0012B8  EC14  F008         	call	PL90	;call to abstracted procedure
  7431  0012BC  A0D8               	btfss	status,0,c
  7432  0012BE  0012               	return	
  7433                           
  7434                           ;THora.c: 61:                     TiResetTics(timer);
  7435  0012C0  5040               	movf	_timer^0,w,c
  7436  0012C2  EC1A  F00E         	call	_TiResetTics
  7437                           
  7438                           ;THora.c: 62:                     manageSegons();
  7439  0012C6  EC8A  F00C         	call	_manageSegons	;wreg free
  7440                           
  7441                           ;THora.c: 63:                     state = 1;
  7442  0012CA  0E01               	movlw	1
  7443  0012CC  6E3E               	movwf	motorHora@state^0,c
  7444  0012CE  0C01               	retlw	1
  7445  0012D0                     l8498:
  7446                           
  7447                           ;THora.c: 67:                 if (countTime[3] == '6' && countTime[4] == '0') {
  7448  0012D0  0E36               	movlw	54
  7449  0012D2  1804               	xorwf	(_countTime+3)^0,w,c
  7450  0012D4  E10E               	bnz	l8510
  7451  0012D6  0E30               	movlw	48
  7452  0012D8  1805               	xorwf	(_countTime+4)^0,w,c
  7453  0012DA  E10B               	bnz	l8510
  7454                           
  7455                           ;THora.c: 68:                     countTime[3] = countTime[4] = '0';
  7456  0012DC  D817               	call	PL70	;call to abstracted procedure
  7457                           
  7458                           ;THora.c: 69:                     newHora(3, countTime[3], 0);
  7459  0012DE  EC9E  F00C         	call	PL52	;call to abstracted procedure
  7460  0012E2  EC81  F00D         	call	_newHora
  7461                           
  7462                           ;THora.c: 70:                     newHora(4, countTime[4], 0);
  7463  0012E6  EC9A  F00C         	call	PL36	;call to abstracted procedure
  7464  0012EA  EC81  F00D         	call	_newHora
  7465                           
  7466                           ;THora.c: 71:                     manageMinutes();
  7467  0012EE  ECA2  F00C         	call	_manageMinutes	;wreg free
  7468  0012F2                     l8510:
  7469                           
  7470                           ;THora.c: 73:                 state = 0;
  7471  0012F2  6A3E               	clrf	motorHora@state^0,c
  7472                           
  7473                           ;THora.c: 74:                 break;
  7474  0012F4  0012               	return	
  7475  0012F6                     l8514:
  7476  0012F6  503E               	movf	motorHora@state^0,w,c
  7477  0012F8  6E6E               	movwf	??_motorHora^0,c
  7478  0012FA  6A6F               	clrf	(??_motorHora+1)^0,c
  7479                           
  7480                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7481                           ; Switch size 1, requested type "space"
  7482                           ; Number of cases is 1, Range of values is 0 to 0
  7483                           ; switch strategies available:
  7484                           ; Name         Instructions Cycles
  7485                           ; simple_byte            4     3 (average)
  7486                           ;	Chosen strategy is simple_byte
  7487  0012FC  506F               	movf	(??_motorHora+1)^0,w,c
  7488  0012FE  A4D8               	btfss	status,2,c
  7489  001300  0012               	return	
  7490                           
  7491                           ; Switch size 1, requested type "space"
  7492                           ; Number of cases is 2, Range of values is 0 to 1
  7493                           ; switch strategies available:
  7494                           ; Name         Instructions Cycles
  7495                           ; simple_byte            7     4 (average)
  7496                           ;	Chosen strategy is simple_byte
  7497  001302  506E               	movf	??_motorHora^0,w,c
  7498  001304  E0D6               	bz	l8492
  7499  001306  0A01               	xorlw	1	; case 1
  7500  001308  E0E3               	bz	l8498
  7501  00130A  0012               	return		;funcret
  7502  00130C                     __end_of_motorHora:
  7503                           	callstack 0
  7504  00130C                     PL70:
  7505                           	callstack 20
  7506  00130C  0E30               	movlw	48
  7507  00130E  6E05               	movwf	(_countTime+4)^0,c
  7508  001310  C005  F004         	movff	_countTime+4,_countTime+3
  7509  001314  0C30               	retlw	48
  7510  001316                     __end_ofPL70:
  7511                           	callstack 0
  7512                           
  7513 ;; *************** function _manageSegons *****************
  7514 ;; Defined at:
  7515 ;;		line 31 in file "THora.c"
  7516 ;; Parameters:    Size  Location     Type
  7517 ;;		None
  7518 ;; Auto vars:     Size  Location     Type
  7519 ;;		None
  7520 ;; Return value:  Size  Location     Type
  7521 ;;                  1    wreg      void 
  7522 ;; Registers used:
  7523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7524 ;; Tracked objects:
  7525 ;;		On entry : 0/0
  7526 ;;		On exit  : 0/0
  7527 ;;		Unchanged: 0/0
  7528 ;; Data sizes:     COMRAM   BANK0   BANK1
  7529 ;;      Params:         0       0       0
  7530 ;;      Locals:         0       0       0
  7531 ;;      Temps:          0       0       0
  7532 ;;      Totals:         0       0       0
  7533 ;;Total ram usage:        0 bytes
  7534 ;; Hardware stack levels used: 1
  7535 ;; Hardware stack levels required when called: 7
  7536 ;; This function calls:
  7537 ;;		_newHora
  7538 ;; This function is called by:
  7539 ;;		_motorHora
  7540 ;; This function uses a non-reentrant model
  7541 ;;
  7542                           
  7543                           	psect	text49
  7544  001914                     __ptext49:
  7545                           	callstack 0
  7546  001914                     _manageSegons:
  7547                           	callstack 22
  7548                           
  7549                           ;THora.c: 32:     if (countTime[4] < '9') {
  7550                           
  7551                           ;incstack = 0
  7552  001914  0E39               	movlw	57
  7553  001916  6005               	cpfslt	(_countTime+4)^0,c
  7554  001918  D004               	goto	l7842
  7555                           
  7556                           ;THora.c: 33:         countTime[4]++;
  7557  00191A  2A05               	incf	(_countTime+4)^0,f,c
  7558                           
  7559                           ;THora.c: 34:         newHora(4, countTime[4], 0);
  7560  00191C  D80B               	call	PL36	;call to abstracted procedure
  7561  00191E  EF81  F00D         	goto	_newHora
  7562  001922                     l7842:
  7563                           
  7564                           ;THora.c: 36:         countTime[4] = '0';
  7565  001922  0E30               	movlw	48
  7566  001924  6E05               	movwf	(_countTime+4)^0,c
  7567                           
  7568                           ;THora.c: 37:         countTime[3]++;
  7569  001926  2A04               	incf	(_countTime+3)^0,f,c
  7570                           
  7571                           ;THora.c: 38:         newHora(4, countTime[4], 0);
  7572  001928  D805               	call	PL36	;call to abstracted procedure
  7573  00192A  EC81  F00D         	call	_newHora
  7574                           
  7575                           ;THora.c: 39:         newHora(3, countTime[3], 0);
  7576  00192E  D806               	call	PL52	;call to abstracted procedure
  7577  001930  EF81  F00D         	goto	_newHora
  7578  001934                     __end_of_manageSegons:
  7579                           	callstack 0
  7580  001934                     PL36:
  7581                           	callstack 20
  7582  001934  C005  F06B         	movff	_countTime+4,newHora@hora
  7583  001938  6A6C               	clrf	newHora@mod^0,c
  7584  00193A  0C04               	retlw	4
  7585  00193C                     __end_ofPL36:
  7586                           	callstack 0
  7587  00193C                     PL52:
  7588                           	callstack 20
  7589  00193C  C004  F06B         	movff	_countTime+3,newHora@hora
  7590  001940  6A6C               	clrf	newHora@mod^0,c
  7591  001942  0C03               	retlw	3
  7592  001944                     __end_ofPL52:
  7593                           	callstack 0
  7594                           
  7595 ;; *************** function _manageMinutes *****************
  7596 ;; Defined at:
  7597 ;;		line 43 in file "THora.c"
  7598 ;; Parameters:    Size  Location     Type
  7599 ;;		None
  7600 ;; Auto vars:     Size  Location     Type
  7601 ;;		None
  7602 ;; Return value:  Size  Location     Type
  7603 ;;                  1    wreg      void 
  7604 ;; Registers used:
  7605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7606 ;; Tracked objects:
  7607 ;;		On entry : 0/0
  7608 ;;		On exit  : 0/0
  7609 ;;		Unchanged: 0/0
  7610 ;; Data sizes:     COMRAM   BANK0   BANK1
  7611 ;;      Params:         0       0       0
  7612 ;;      Locals:         0       0       0
  7613 ;;      Temps:          0       0       0
  7614 ;;      Totals:         0       0       0
  7615 ;;Total ram usage:        0 bytes
  7616 ;; Hardware stack levels used: 1
  7617 ;; Hardware stack levels required when called: 7
  7618 ;; This function calls:
  7619 ;;		_newHora
  7620 ;; This function is called by:
  7621 ;;		_motorHora
  7622 ;; This function uses a non-reentrant model
  7623 ;;
  7624                           
  7625                           	psect	text50
  7626  001944                     __ptext50:
  7627                           	callstack 0
  7628  001944                     _manageMinutes:
  7629                           	callstack 22
  7630                           
  7631                           ;THora.c: 44:     if (countTime[1] < '9') {
  7632                           
  7633                           ;incstack = 0
  7634  001944  0E39               	movlw	57
  7635  001946  6002               	cpfslt	(_countTime+1)^0,c
  7636  001948  D004               	goto	l7856
  7637                           
  7638                           ;THora.c: 45:         countTime[1]++;
  7639  00194A  2A02               	incf	(_countTime+1)^0,f,c
  7640                           
  7641                           ;THora.c: 46:         newHora(1, countTime[1], 0);
  7642  00194C  D80B               	call	PL50	;call to abstracted procedure
  7643  00194E  EF81  F00D         	goto	_newHora
  7644  001952                     l7856:
  7645                           
  7646                           ;THora.c: 48:         countTime[1] = '0';
  7647  001952  0E30               	movlw	48
  7648  001954  6E02               	movwf	(_countTime+1)^0,c
  7649                           
  7650                           ;THora.c: 49:         countTime[0]++;
  7651  001956  2A01               	incf	_countTime^0,f,c
  7652                           
  7653                           ;THora.c: 50:         newHora(1, countTime[1], 0);
  7654  001958  D805               	call	PL50	;call to abstracted procedure
  7655  00195A  EC81  F00D         	call	_newHora
  7656                           
  7657                           ;THora.c: 51:         newHora(0, countTime[0], 0);
  7658  00195E  D806               	call	PL74	;call to abstracted procedure
  7659  001960  EF81  F00D         	goto	_newHora
  7660  001964                     __end_of_manageMinutes:
  7661                           	callstack 0
  7662  001964                     PL50:
  7663                           	callstack 20
  7664  001964  C002  F06B         	movff	_countTime+1,newHora@hora
  7665  001968  6A6C               	clrf	newHora@mod^0,c
  7666  00196A  0C01               	retlw	1
  7667  00196C                     __end_ofPL50:
  7668                           	callstack 0
  7669  00196C                     PL74:
  7670                           	callstack 20
  7671  00196C  C001  F06B         	movff	_countTime,newHora@hora
  7672  001970  6A6C               	clrf	newHora@mod^0,c
  7673  001972  0C00               	retlw	0
  7674  001974                     __end_ofPL74:
  7675                           	callstack 0
  7676                           
  7677 ;; *************** function _newHora *****************
  7678 ;; Defined at:
  7679 ;;		line 31 in file "TCentral.c"
  7680 ;; Parameters:    Size  Location     Type
  7681 ;;  pos             1    wreg     unsigned char 
  7682 ;;  hora            1   17[COMRAM] unsigned char 
  7683 ;;  mod             1   18[COMRAM] unsigned char 
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;  pos             1   19[COMRAM] unsigned char 
  7686 ;; Return value:  Size  Location     Type
  7687 ;;                  1    wreg      void 
  7688 ;; Registers used:
  7689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/1
  7692 ;;		On exit  : 0/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMRAM   BANK0   BANK1
  7695 ;;      Params:         2       0       0
  7696 ;;      Locals:         1       0       0
  7697 ;;      Temps:          0       0       0
  7698 ;;      Totals:         3       0       0
  7699 ;;Total ram usage:        3 bytes
  7700 ;; Hardware stack levels used: 1
  7701 ;; Hardware stack levels required when called: 6
  7702 ;; This function calls:
  7703 ;;		_updateHora
  7704 ;; This function is called by:
  7705 ;;		_modifyHora
  7706 ;;		_initHora
  7707 ;;		_manageSegons
  7708 ;;		_manageMinutes
  7709 ;;		_motorHora
  7710 ;; This function uses a non-reentrant model
  7711 ;;
  7712                           
  7713                           	psect	text51
  7714  001B02                     __ptext51:
  7715                           	callstack 0
  7716  001B02                     _newHora:
  7717                           	callstack 21
  7718                           
  7719                           ;incstack = 0
  7720                           ;newHora@pos stored from wreg
  7721  001B02  6E6D               	movwf	newHora@pos^0,c
  7722                           
  7723                           ;TCentral.c: 32:     time[pos] = hora;
  7724  001B04  506D               	movf	newHora@pos^0,w,c
  7725  001B06  0F50               	addlw	low _time
  7726  001B08  6ED9               	movwf	fsr2l,c
  7727  001B0A  6ADA               	clrf	fsr2h,c
  7728  001B0C  C06B  FFDF         	movff	newHora@hora,indf2
  7729                           
  7730                           ;TCentral.c: 33:     updateHora(pos, hora, mod);
  7731  001B10  C06B  F068         	movff	newHora@hora,updateHora@hora
  7732  001B14  C06C  F069         	movff	newHora@mod,updateHora@mod
  7733  001B18  506D               	movf	newHora@pos^0,w,c
  7734  001B1A  EF64  F00D         	goto	_updateHora
  7735  001B1E                     __end_of_newHora:
  7736                           	callstack 0
  7737                           
  7738 ;; *************** function _updateHora *****************
  7739 ;; Defined at:
  7740 ;;		line 50 in file "TMenu.c"
  7741 ;; Parameters:    Size  Location     Type
  7742 ;;  pos             1    wreg     unsigned char 
  7743 ;;  hora            1   14[COMRAM] unsigned char 
  7744 ;;  mod             1   15[COMRAM] unsigned char 
  7745 ;; Auto vars:     Size  Location     Type
  7746 ;;  pos             1   16[COMRAM] unsigned char 
  7747 ;; Return value:  Size  Location     Type
  7748 ;;                  1    wreg      void 
  7749 ;; Registers used:
  7750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7751 ;; Tracked objects:
  7752 ;;		On entry : 0/1
  7753 ;;		On exit  : 0/0
  7754 ;;		Unchanged: 0/0
  7755 ;; Data sizes:     COMRAM   BANK0   BANK1
  7756 ;;      Params:         2       0       0
  7757 ;;      Locals:         1       0       0
  7758 ;;      Temps:          0       0       0
  7759 ;;      Totals:         3       0       0
  7760 ;;Total ram usage:        3 bytes
  7761 ;; Hardware stack levels used: 1
  7762 ;; Hardware stack levels required when called: 5
  7763 ;; This function calls:
  7764 ;;		_actHora
  7765 ;; This function is called by:
  7766 ;;		_newHora
  7767 ;; This function uses a non-reentrant model
  7768 ;;
  7769                           
  7770                           	psect	text52
  7771  001AC8                     __ptext52:
  7772                           	callstack 0
  7773  001AC8                     _updateHora:
  7774                           	callstack 21
  7775                           
  7776                           ;incstack = 0
  7777                           ;updateHora@pos stored from wreg
  7778  001AC8  6E6A               	movwf	updateHora@pos^0,c
  7779                           
  7780                           ;TMenu.c: 51:     showTime[pos] = hora;
  7781  001ACA  506A               	movf	updateHora@pos^0,w,c
  7782  001ACC  0FE9               	addlw	low _showTime
  7783  001ACE  6ED9               	movwf	fsr2l,c
  7784  001AD0  6ADA               	clrf	fsr2h,c
  7785  001AD2  C068  FFDF         	movff	updateHora@hora,indf2
  7786                           
  7787                           ;TMenu.c: 52:     if (mod) {
  7788  001AD6  5069               	movf	updateHora@mod^0,w,c
  7789  001AD8  B4D8               	btfsc	status,2,c
  7790  001ADA  0012               	return	
  7791                           
  7792                           ;TMenu.c: 53:         actHora(pos, hora);
  7793  001ADC  C068  F066         	movff	updateHora@hora,actHora@hora
  7794  001AE0  506A               	movf	updateHora@pos^0,w,c
  7795  001AE2  EFCC  F00D         	goto	_actHora
  7796  001AE6                     __end_of_updateHora:
  7797                           	callstack 0
  7798                           
  7799 ;; *************** function _actHora *****************
  7800 ;; Defined at:
  7801 ;;		line 26 in file "THora.c"
  7802 ;; Parameters:    Size  Location     Type
  7803 ;;  pos             1    wreg     unsigned char 
  7804 ;;  hora            1   12[COMRAM] unsigned char 
  7805 ;; Auto vars:     Size  Location     Type
  7806 ;;  pos             1   13[COMRAM] unsigned char 
  7807 ;; Return value:  Size  Location     Type
  7808 ;;                  1    wreg      void 
  7809 ;; Registers used:
  7810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7811 ;; Tracked objects:
  7812 ;;		On entry : 0/1
  7813 ;;		On exit  : 0/0
  7814 ;;		Unchanged: 0/0
  7815 ;; Data sizes:     COMRAM   BANK0   BANK1
  7816 ;;      Params:         1       0       0
  7817 ;;      Locals:         1       0       0
  7818 ;;      Temps:          0       0       0
  7819 ;;      Totals:         2       0       0
  7820 ;;Total ram usage:        2 bytes
  7821 ;; Hardware stack levels used: 1
  7822 ;; Hardware stack levels required when called: 4
  7823 ;; This function calls:
  7824 ;;		_TiResetTics
  7825 ;; This function is called by:
  7826 ;;		_updateHora
  7827 ;; This function uses a non-reentrant model
  7828 ;;
  7829                           
  7830                           	psect	text53
  7831  001B98                     __ptext53:
  7832                           	callstack 0
  7833  001B98                     _actHora:
  7834                           	callstack 21
  7835                           
  7836                           ;incstack = 0
  7837                           ;actHora@pos stored from wreg
  7838  001B98  6E67               	movwf	actHora@pos^0,c
  7839                           
  7840                           ;THora.c: 27:     TiResetTics(timer);
  7841  001B9A  5040               	movf	_timer^0,w,c
  7842  001B9C  EC1A  F00E         	call	_TiResetTics
  7843                           
  7844                           ;THora.c: 28:     countTime[pos] = hora;
  7845  001BA0  5067               	movf	actHora@pos^0,w,c
  7846  001BA2  0F01               	addlw	low _countTime
  7847  001BA4  6ED9               	movwf	fsr2l,c
  7848  001BA6  6ADA               	clrf	fsr2h,c
  7849  001BA8  C066  FFDF         	movff	actHora@hora,indf2
  7850  001BAC  0012               	return		;funcret
  7851  001BAE                     __end_of_actHora:
  7852                           	callstack 0
  7853                           
  7854 ;; *************** function _motorADC *****************
  7855 ;; Defined at:
  7856 ;;		line 30 in file "TADC.c"
  7857 ;; Parameters:    Size  Location     Type
  7858 ;;		None
  7859 ;; Auto vars:     Size  Location     Type
  7860 ;;		None
  7861 ;; Return value:  Size  Location     Type
  7862 ;;                  1    wreg      void 
  7863 ;; Registers used:
  7864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7865 ;; Tracked objects:
  7866 ;;		On entry : 0/0
  7867 ;;		On exit  : 0/0
  7868 ;;		Unchanged: 0/0
  7869 ;; Data sizes:     COMRAM   BANK0   BANK1
  7870 ;;      Params:         0       0       0
  7871 ;;      Locals:         0       0       0
  7872 ;;      Temps:          2       0       0
  7873 ;;      Totals:         2       0       0
  7874 ;;Total ram usage:        2 bytes
  7875 ;; Hardware stack levels used: 1
  7876 ;; Hardware stack levels required when called: 8
  7877 ;; This function calls:
  7878 ;;		_TiGetTics
  7879 ;;		_TiResetTics
  7880 ;;		_changePos
  7881 ;; This function is called by:
  7882 ;;		_main
  7883 ;; This function uses a non-reentrant model
  7884 ;;
  7885                           
  7886                           	psect	text54
  7887  00113E                     __ptext54:
  7888                           	callstack 0
  7889  00113E                     _motorADC:
  7890                           	callstack 22
  7891                           
  7892                           ;TADC.c: 31:     static unsigned char state = 0;;TADC.c: 32:         switch(state) {
  7893                           
  7894                           ;incstack = 0
  7895  00113E  D031               	goto	l8422
  7896  001140                     l285:
  7897                           
  7898                           ;TADC.c: 34:                 ADCON0bits.ADON = 0;
  7899  001140  90C2               	bcf	194,0,c	;volatile
  7900                           
  7901                           ;TADC.c: 35:                 ADCON0bits.CHS = 0;
  7902  001142  0EC3               	movlw	-61
  7903  001144  16C2               	andwf	194,f,c	;volatile
  7904                           
  7905                           ;TADC.c: 36:                 ADCON0bits.ADON = 1;
  7906  001146  80C2               	bsf	194,0,c	;volatile
  7907                           
  7908                           ;TADC.c: 37:                 if (TiGetTics(timerADC) >= 400) {
  7909  001148  504B               	movf	_timerADC^0,w,c
  7910  00114A  EC57  F00C         	call	_TiGetTics
  7911  00114E  EC9A  F008         	call	PL88	;call to abstracted procedure
  7912  001152  A0D8               	btfss	status,0,c
  7913  001154  0012               	return	
  7914                           
  7915                           ;TADC.c: 38:                     ADCON0bits.GODONE = 1;
  7916  001156  82C2               	bsf	194,1,c	;volatile
  7917  001158                     l8392:
  7918                           
  7919                           ;TADC.c: 39:                     state = 1;
  7920  001158  0E01               	movlw	1
  7921  00115A  6E48               	movwf	motorADC@state^0,c
  7922  00115C  0C01               	retlw	1
  7923  00115E                     l288:
  7924                           
  7925                           ;TADC.c: 43:                 if (ADCON0bits.GODONE == 0) {
  7926  00115E  B2C2               	btfsc	194,1,c	;volatile
  7927  001160  D7FB               	goto	l8392
  7928                           
  7929                           ;TADC.c: 44:                     ADCON0bits.ADON = 0;
  7930  001162  90C2               	bcf	194,0,c	;volatile
  7931                           
  7932                           ;TADC.c: 45:                     if (ADRESH > 120 && ADRESH < 130 && move){
  7933  001164  0E78               	movlw	120
  7934  001166  64C4               	cpfsgt	196,c	;volatile
  7935  001168  D00A               	goto	l8406
  7936  00116A  0E82               	movlw	130
  7937  00116C  60C4               	cpfslt	196,c	;volatile
  7938  00116E  D007               	goto	l8406
  7939  001170  5049               	movf	_move^0,w,c
  7940  001172  E005               	bz	l8406
  7941                           
  7942                           ;TADC.c: 46:                         changePos(move);
  7943  001174  5049               	movf	_move^0,w,c
  7944  001176  EC8F  F006         	call	_changePos
  7945                           
  7946                           ;TADC.c: 47:                         move = 0;
  7947  00117A  6A49               	clrf	_move^0,c
  7948                           
  7949                           ;TADC.c: 48:                     } else if (ADRESH > 200) {
  7950  00117C  D00A               	goto	l291
  7951  00117E                     l8406:
  7952  00117E  0EC8               	movlw	200
  7953  001180  64C4               	cpfsgt	196,c	;volatile
  7954  001182  D002               	goto	l8410
  7955                           
  7956                           ;TADC.c: 49:                         move = 1;
  7957  001184  0E01               	movlw	1
  7958  001186  D004               	goto	L16
  7959  001188                     l8410:
  7960  001188  0E32               	movlw	50
  7961  00118A  60C4               	cpfslt	196,c	;volatile
  7962  00118C  D002               	goto	l291
  7963                           
  7964                           ;TADC.c: 51:                         move = 2;
  7965  00118E  0E02               	movlw	2
  7966  001190                     L16:
  7967  001190  6E49               	movwf	_move^0,c
  7968  001192                     l291:
  7969                           
  7970                           ;TADC.c: 53:                     state = 2;
  7971  001192  0E02               	movlw	2
  7972  001194  6E48               	movwf	motorADC@state^0,c
  7973                           
  7974                           ;TADC.c: 54:                 } else {
  7975  001196  0C02               	retlw	2
  7976  001198                     l8416:
  7977                           
  7978                           ;TADC.c: 59:                 TiResetTics(timerADC);
  7979  001198  504B               	movf	_timerADC^0,w,c
  7980  00119A  EC1A  F00E         	call	_TiResetTics
  7981                           
  7982                           ;TADC.c: 60:                 state = 0;
  7983  00119E  6A48               	clrf	motorADC@state^0,c
  7984                           
  7985                           ;TADC.c: 61:                 break;
  7986  0011A0  0012               	return	
  7987  0011A2                     l8422:
  7988  0011A2  5048               	movf	motorADC@state^0,w,c
  7989  0011A4  6E72               	movwf	??_motorADC^0,c
  7990  0011A6  6A73               	clrf	(??_motorADC+1)^0,c
  7991                           
  7992                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7993                           ; Switch size 1, requested type "space"
  7994                           ; Number of cases is 1, Range of values is 0 to 0
  7995                           ; switch strategies available:
  7996                           ; Name         Instructions Cycles
  7997                           ; simple_byte            4     3 (average)
  7998                           ;	Chosen strategy is simple_byte
  7999  0011A8  5073               	movf	(??_motorADC+1)^0,w,c
  8000  0011AA  A4D8               	btfss	status,2,c
  8001  0011AC  0012               	return	
  8002                           
  8003                           ; Switch size 1, requested type "space"
  8004                           ; Number of cases is 3, Range of values is 0 to 2
  8005                           ; switch strategies available:
  8006                           ; Name         Instructions Cycles
  8007                           ; simple_byte           10     6 (average)
  8008                           ;	Chosen strategy is simple_byte
  8009  0011AE  5072               	movf	??_motorADC^0,w,c
  8010  0011B0  E0C7               	bz	l285
  8011  0011B2  0A01               	xorlw	1	; case 1
  8012  0011B4  E0D4               	bz	l288
  8013  0011B6  0A03               	xorlw	3	; case 2
  8014  0011B8  E0EF               	bz	l8416
  8015  0011BA  0012               	return		;funcret
  8016  0011BC                     __end_of_motorADC:
  8017                           	callstack 0
  8018                           
  8019 ;; *************** function _changePos *****************
  8020 ;; Defined at:
  8021 ;;		line 127 in file "TCentral.c"
  8022 ;; Parameters:    Size  Location     Type
  8023 ;;  pos             1    wreg     unsigned char 
  8024 ;; Auto vars:     Size  Location     Type
  8025 ;;  pos             1    9[BANK1 ] unsigned char 
  8026 ;;  num2            1    8[BANK1 ] unsigned char 
  8027 ;;  num             1    7[BANK1 ] unsigned char 
  8028 ;; Return value:  Size  Location     Type
  8029 ;;                  1    wreg      void 
  8030 ;; Registers used:
  8031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8032 ;; Tracked objects:
  8033 ;;		On entry : 0/0
  8034 ;;		On exit  : 0/0
  8035 ;;		Unchanged: 0/0
  8036 ;; Data sizes:     COMRAM   BANK0   BANK1
  8037 ;;      Params:         0       0       0
  8038 ;;      Locals:         0       0       3
  8039 ;;      Temps:          0       0       7
  8040 ;;      Totals:         0       0      10
  8041 ;;Total ram usage:       10 bytes
  8042 ;; Hardware stack levels used: 1
  8043 ;; Hardware stack levels required when called: 7
  8044 ;; This function calls:
  8045 ;;		_changeJoystick
  8046 ;;		_cleanMarquesina
  8047 ;;		_getNT
  8048 ;;		_getPT
  8049 ;; This function is called by:
  8050 ;;		_motorADC
  8051 ;; This function uses a non-reentrant model
  8052 ;;
  8053                           
  8054                           	psect	text55
  8055  000D1E                     __ptext55:
  8056                           	callstack 0
  8057  000D1E                     _changePos:
  8058                           	callstack 22
  8059                           
  8060                           ;incstack = 0
  8061                           ;changePos@pos stored from wreg
  8062  000D1E  0101               	movlb	1	; () banked
  8063  000D20  6FB9               	movwf	changePos@pos& (0+255),b
  8064                           
  8065                           ;TCentral.c: 128:     unsigned char num, num2;;TCentral.c: 129:     if (mode == 1) {
  8066  000D22  0445               	decf	_mode^0,w,c
  8067  000D24  E114               	bnz	l7794
  8068                           
  8069                           ;TCentral.c: 131:         if ((posJoystick < 4) && (pos == 1)) {
  8070  000D26  0E04               	movlw	4
  8071  000D28  6044               	cpfslt	_posJoystick^0,c
  8072  000D2A  D006               	goto	l7784
  8073  000D2C  05B9               	decf	changePos@pos& (0+255),w,b
  8074  000D2E  E104               	bnz	l7784
  8075                           
  8076                           ; BSR set to: 1
  8077                           ;TCentral.c: 132:             posJoystick++;
  8078  000D30  2A44               	incf	_posJoystick^0,f,c
  8079  000D32                     l7782:
  8080                           
  8081                           ; BSR set to: 1
  8082                           ;TCentral.c: 133:             cleanMarquesina();
  8083  000D32  EC11  F00E         	call	_cleanMarquesina	;wreg free
  8084                           
  8085                           ;TCentral.c: 134:         } else if ((posJoystick > 0) && (pos == 2)){
  8086  000D36  D008               	goto	l7792
  8087  000D38                     l7784:
  8088  000D38  5044               	movf	_posJoystick^0,w,c
  8089  000D3A  E006               	bz	l7792
  8090  000D3C  0E02               	movlw	2
  8091  000D3E  0101               	movlb	1	; () banked
  8092  000D40  19B9               	xorwf	changePos@pos& (0+255),w,b
  8093  000D42  E102               	bnz	l7792
  8094                           
  8095                           ; BSR set to: 1
  8096                           ;TCentral.c: 135:             posJoystick--;
  8097  000D44  0644               	decf	_posJoystick^0,f,c
  8098  000D46  D7F5               	goto	l7782
  8099  000D48                     l7792:
  8100                           
  8101                           ;TCentral.c: 138:         changeJoystick(posJoystick);
  8102  000D48  5044               	movf	_posJoystick^0,w,c
  8103  000D4A  EFA9  F00D         	goto	_changeJoystick
  8104  000D4E                     l7794:
  8105  000D4E  0E03               	movlw	3
  8106  000D50  1845               	xorwf	_mode^0,w,c
  8107  000D52  A4D8               	btfss	status,2,c
  8108  000D54  0012               	return	
  8109                           
  8110                           ;TCentral.c: 141:         num2 = getPT();
  8111  000D56  EC59  F00E         	call	_getPT	;wreg free
  8112  000D5A  0101               	movlb	1	; () banked
  8113  000D5C  6FB8               	movwf	changePos@num2& (0+255),b
  8114                           
  8115                           ; BSR set to: 1
  8116                           ;TCentral.c: 142:         if (num2 < 8){
  8117  000D5E  0E08               	movlw	8
  8118  000D60  61B8               	cpfslt	changePos@num2& (0+255),b
  8119  000D62  D026               	goto	l7818
  8120                           
  8121                           ; BSR set to: 1
  8122                           ;TCentral.c: 143:             num = getNT();
  8123  000D64  EC5B  F00E         	call	_getNT	;wreg free
  8124  000D68  0101               	movlb	1	; () banked
  8125  000D6A  6FB7               	movwf	changePos@num& (0+255),b
  8126                           
  8127                           ; BSR set to: 1
  8128                           ;TCentral.c: 144:             if ((n < num - 1) && (pos == 1)) {
  8129  000D6C  69B0               	setf	??_changePos& (0+255),b
  8130  000D6E  69B1               	setf	(??_changePos+1)& (0+255),b
  8131  000D70  51B7               	movf	changePos@num& (0+255),w,b
  8132  000D72  6FB2               	movwf	(??_changePos+2)& (0+255),b
  8133  000D74  6BB3               	clrf	(??_changePos+3)& (0+255),b
  8134  000D76  51B0               	movf	??_changePos& (0+255),w,b
  8135  000D78  27B2               	addwf	(??_changePos+2)& (0+255),f,b
  8136  000D7A  51B1               	movf	(??_changePos+1)& (0+255),w,b
  8137  000D7C  23B3               	addwfc	(??_changePos+3)& (0+255),f,b
  8138  000D7E  5043               	movf	_n^0,w,c
  8139  000D80  6FB4               	movwf	(??_changePos+4)& (0+255),b
  8140  000D82  6BB5               	clrf	(??_changePos+5)& (0+255),b
  8141  000D84  51B2               	movf	(??_changePos+2)& (0+255),w,b
  8142  000D86  5DB4               	subwf	(??_changePos+4)& (0+255),w,b
  8143  000D88  51B5               	movf	(??_changePos+5)& (0+255),w,b
  8144  000D8A  0A80               	xorlw	128
  8145  000D8C  6FB6               	movwf	(??_changePos+6)& (0+255),b
  8146  000D8E  51B3               	movf	(??_changePos+3)& (0+255),w,b
  8147  000D90  0A80               	xorlw	128
  8148  000D92  59B6               	subwfb	(??_changePos+6)& (0+255),w,b
  8149  000D94  E206               	bc	l7810
  8150                           
  8151                           ; BSR set to: 1
  8152  000D96  05B9               	decf	changePos@pos& (0+255),w,b
  8153  000D98  E104               	bnz	l7810
  8154  000D9A                     u6850:
  8155                           
  8156                           ; BSR set to: 1
  8157                           ;TCentral.c: 145:                 n++;
  8158  000D9A  2A43               	incf	_n^0,f,c
  8159  000D9C                     l7808:
  8160                           
  8161                           ; BSR set to: 1
  8162                           ;TCentral.c: 146:                 cleanMarquesina();
  8163  000D9C  EC11  F00E         	call	_cleanMarquesina	;wreg free
  8164                           
  8165                           ;TCentral.c: 147:             } else if ((n > 0) && (pos == 2)){
  8166  000DA0  D011               	goto	l7834
  8167  000DA2                     l7810:
  8168                           
  8169                           ; BSR set to: 1
  8170  000DA2  5043               	movf	_n^0,w,c
  8171  000DA4  E00F               	bz	l7834
  8172                           
  8173                           ; BSR set to: 1
  8174  000DA6  0E02               	movlw	2
  8175  000DA8  19B9               	xorwf	changePos@pos& (0+255),w,b
  8176  000DAA  E10C               	bnz	l7834
  8177  000DAC                     u6870:
  8178                           
  8179                           ; BSR set to: 1
  8180                           ;TCentral.c: 148:                 n--;
  8181  000DAC  0643               	decf	_n^0,f,c
  8182  000DAE  D7F6               	goto	l7808
  8183  000DB0                     l7818:
  8184                           
  8185                           ; BSR set to: 1
  8186                           ;TCentral.c: 152:             if ((n < 7) && (pos == 1)) {
  8187  000DB0  0E07               	movlw	7
  8188  000DB2  6043               	cpfslt	_n^0,c
  8189  000DB4  D002               	goto	l7826
  8190                           
  8191                           ; BSR set to: 1
  8192  000DB6  05B9               	decf	changePos@pos& (0+255),w,b
  8193  000DB8  E0F0               	bz	u6850
  8194  000DBA                     l7826:
  8195                           
  8196                           ; BSR set to: 1
  8197  000DBA  5043               	movf	_n^0,w,c
  8198  000DBC  E003               	bz	l7834
  8199                           
  8200                           ; BSR set to: 1
  8201  000DBE  0E02               	movlw	2
  8202  000DC0  19B9               	xorwf	changePos@pos& (0+255),w,b
  8203  000DC2  E0F4               	bz	u6870
  8204  000DC4                     l7834:
  8205                           
  8206                           ;TCentral.c: 160:         changeJoystick(n);
  8207  000DC4  5043               	movf	_n^0,w,c
  8208  000DC6  EFA9  F00D         	goto	_changeJoystick
  8209  000DCA                     __end_of_changePos:
  8210                           	callstack 0
  8211                           
  8212 ;; *************** function _getPT *****************
  8213 ;; Defined at:
  8214 ;;		line 57 in file "TRom.c"
  8215 ;; Parameters:    Size  Location     Type
  8216 ;;		None
  8217 ;; Auto vars:     Size  Location     Type
  8218 ;;		None
  8219 ;; Return value:  Size  Location     Type
  8220 ;;                  1    wreg      unsigned char 
  8221 ;; Registers used:
  8222 ;;		wreg, status,2
  8223 ;; Tracked objects:
  8224 ;;		On entry : 0/0
  8225 ;;		On exit  : 0/0
  8226 ;;		Unchanged: 0/0
  8227 ;; Data sizes:     COMRAM   BANK0   BANK1
  8228 ;;      Params:         0       0       0
  8229 ;;      Locals:         0       0       0
  8230 ;;      Temps:          0       0       0
  8231 ;;      Totals:         0       0       0
  8232 ;;Total ram usage:        0 bytes
  8233 ;; Hardware stack levels used: 1
  8234 ;; Hardware stack levels required when called: 3
  8235 ;; This function calls:
  8236 ;;		Nothing
  8237 ;; This function is called by:
  8238 ;;		_initCentral
  8239 ;;		_changePos
  8240 ;; This function uses a non-reentrant model
  8241 ;;
  8242                           
  8243                           	psect	text56
  8244  001CB2                     __ptext56:
  8245                           	callstack 0
  8246  001CB2                     _getPT:
  8247                           	callstack 22
  8248                           
  8249                           ;TRom.c: 58:     return pit;
  8250                           
  8251                           ;incstack = 0
  8252  001CB2  502D               	movf	_pit^0,w,c
  8253  001CB4  0012               	return		;funcret
  8254  001CB6                     __end_of_getPT:
  8255                           	callstack 0
  8256                           
  8257 ;; *************** function _getNT *****************
  8258 ;; Defined at:
  8259 ;;		line 61 in file "TRom.c"
  8260 ;; Parameters:    Size  Location     Type
  8261 ;;		None
  8262 ;; Auto vars:     Size  Location     Type
  8263 ;;		None
  8264 ;; Return value:  Size  Location     Type
  8265 ;;                  1    wreg      unsigned char 
  8266 ;; Registers used:
  8267 ;;		wreg, status,2
  8268 ;; Tracked objects:
  8269 ;;		On entry : 0/1
  8270 ;;		On exit  : 0/0
  8271 ;;		Unchanged: 0/0
  8272 ;; Data sizes:     COMRAM   BANK0   BANK1
  8273 ;;      Params:         0       0       0
  8274 ;;      Locals:         0       0       0
  8275 ;;      Temps:          0       0       0
  8276 ;;      Totals:         0       0       0
  8277 ;;Total ram usage:        0 bytes
  8278 ;; Hardware stack levels used: 1
  8279 ;; Hardware stack levels required when called: 3
  8280 ;; This function calls:
  8281 ;;		Nothing
  8282 ;; This function is called by:
  8283 ;;		_changePos
  8284 ;;		_motorRX
  8285 ;;		_motorTX
  8286 ;; This function uses a non-reentrant model
  8287 ;;
  8288                           
  8289                           	psect	text57
  8290  001CB6                     __ptext57:
  8291                           	callstack 0
  8292  001CB6                     _getNT:
  8293                           	callstack 26
  8294                           
  8295                           ;TRom.c: 62:     return nTotal;
  8296                           
  8297                           ;incstack = 0
  8298  001CB6  502E               	movf	_nTotal^0,w,c
  8299  001CB8  0012               	return		;funcret
  8300  001CBA                     __end_of_getNT:
  8301                           	callstack 0
  8302                           
  8303 ;; *************** function _changeJoystick *****************
  8304 ;; Defined at:
  8305 ;;		line 225 in file "TMenu.c"
  8306 ;; Parameters:    Size  Location     Type
  8307 ;;  pos             1    wreg     unsigned char 
  8308 ;; Auto vars:     Size  Location     Type
  8309 ;;  pos             1   11[COMRAM] unsigned char 
  8310 ;; Return value:  Size  Location     Type
  8311 ;;                  1    wreg      void 
  8312 ;; Registers used:
  8313 ;;		wreg, status,2, status,0
  8314 ;; Tracked objects:
  8315 ;;		On entry : 0/1
  8316 ;;		On exit  : 0/0
  8317 ;;		Unchanged: 0/0
  8318 ;; Data sizes:     COMRAM   BANK0   BANK1
  8319 ;;      Params:         0       0       0
  8320 ;;      Locals:         1       0       0
  8321 ;;      Temps:          0       0       0
  8322 ;;      Totals:         1       0       0
  8323 ;;Total ram usage:        1 bytes
  8324 ;; Hardware stack levels used: 1
  8325 ;; Hardware stack levels required when called: 3
  8326 ;; This function calls:
  8327 ;;		Nothing
  8328 ;; This function is called by:
  8329 ;;		_changePos
  8330 ;; This function uses a non-reentrant model
  8331 ;;
  8332                           
  8333                           	psect	text58
  8334  001B52                     __ptext58:
  8335                           	callstack 0
  8336  001B52                     _changeJoystick:
  8337                           	callstack 25
  8338                           
  8339                           ;incstack = 0
  8340                           ;changeJoystick@pos stored from wreg
  8341  001B52  6E65               	movwf	changeJoystick@pos^0,c
  8342                           
  8343                           ;TMenu.c: 226:     if (caseMenu == 1) {
  8344  001B54  043B               	decf	_caseMenu^0,w,c
  8345  001B56  E103               	bnz	l7718
  8346                           
  8347                           ;TMenu.c: 227:         posJoystick = pos;
  8348  001B58  C065  F044         	movff	changeJoystick@pos,_posJoystick
  8349                           
  8350                           ;TMenu.c: 228:     } else if (caseMenu == 3) {
  8351  001B5C  0012               	return	
  8352  001B5E                     l7718:
  8353  001B5E  0E03               	movlw	3
  8354  001B60  183B               	xorwf	_caseMenu^0,w,c
  8355  001B62  B4D8               	btfsc	status,2,c
  8356                           
  8357                           ;TMenu.c: 229:         n = pos;
  8358  001B64  C065  F043         	movff	changeJoystick@pos,_n
  8359  001B68  0012               	return		;funcret
  8360  001B6A                     __end_of_changeJoystick:
  8361                           	callstack 0
  8362                           
  8363 ;; *************** function _initTeclat *****************
  8364 ;; Defined at:
  8365 ;;		line 24 in file "TTeclat.c"
  8366 ;; Parameters:    Size  Location     Type
  8367 ;;		None
  8368 ;; Auto vars:     Size  Location     Type
  8369 ;;		None
  8370 ;; Return value:  Size  Location     Type
  8371 ;;                  1    wreg      void 
  8372 ;; Registers used:
  8373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8374 ;; Tracked objects:
  8375 ;;		On entry : 0/1
  8376 ;;		On exit  : 0/0
  8377 ;;		Unchanged: 0/0
  8378 ;; Data sizes:     COMRAM   BANK0   BANK1
  8379 ;;      Params:         0       0       0
  8380 ;;      Locals:         0       0       0
  8381 ;;      Temps:          0       0       0
  8382 ;;      Totals:         0       0       0
  8383 ;;Total ram usage:        0 bytes
  8384 ;; Hardware stack levels used: 1
  8385 ;; Hardware stack levels required when called: 4
  8386 ;; This function calls:
  8387 ;;		_TiGetTimer
  8388 ;;		_TiResetTics
  8389 ;; This function is called by:
  8390 ;;		_main
  8391 ;; This function uses a non-reentrant model
  8392 ;;
  8393                           
  8394                           	psect	text59
  8395  001B6A                     __ptext59:
  8396                           	callstack 0
  8397  001B6A                     _initTeclat:
  8398                           	callstack 26
  8399                           
  8400                           ;TTeclat.c: 25:     timer = TiGetTimer();
  8401                           
  8402                           ;incstack = 0
  8403  001B6A  EC71  F00C         	call	_TiGetTimer	;wreg free
  8404  001B6E  6E15               	movwf	_timer@TTeclat$F1784^0,c
  8405                           
  8406                           ;TTeclat.c: 26:     TiResetTics(timer);
  8407  001B70  5015               	movf	_timer@TTeclat$F1784^0,w,c
  8408  001B72  EC1A  F00E         	call	_TiResetTics
  8409                           
  8410                           ;TTeclat.c: 27:     TRISD = 0x78;
  8411  001B76  0E78               	movlw	120
  8412  001B78  6E95               	movwf	149,c	;volatile
  8413                           
  8414                           ;TTeclat.c: 28:     state = keyDetected = fila = columna = 0;
  8415  001B7A  6A11               	clrf	_columna^0,c
  8416  001B7C  6A12               	clrf	_fila^0,c
  8417  001B7E  EF7E  F007         	goto	PL100	;call to abstracted procedure
  8418  001B82                     __end_of_initTeclat:
  8419                           	callstack 0
  8420                           
  8421 ;; *************** function _initROM *****************
  8422 ;; Defined at:
  8423 ;;		line 12 in file "TRom.c"
  8424 ;; Parameters:    Size  Location     Type
  8425 ;;		None
  8426 ;; Auto vars:     Size  Location     Type
  8427 ;;  i               2   24[COMRAM] int 
  8428 ;;  i               2   22[COMRAM] int 
  8429 ;;  j               2   20[COMRAM] int 
  8430 ;; Return value:  Size  Location     Type
  8431 ;;                  1    wreg      void 
  8432 ;; Registers used:
  8433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8434 ;; Tracked objects:
  8435 ;;		On entry : 3F/1
  8436 ;;		On exit  : 0/0
  8437 ;;		Unchanged: 0/0
  8438 ;; Data sizes:     COMRAM   BANK0   BANK1
  8439 ;;      Params:         0       0       0
  8440 ;;      Locals:         6       0       0
  8441 ;;      Temps:          3       0       0
  8442 ;;      Totals:         9       0       0
  8443 ;;Total ram usage:        9 bytes
  8444 ;; Hardware stack levels used: 1
  8445 ;; Hardware stack levels required when called: 4
  8446 ;; This function calls:
  8447 ;;		___wmul
  8448 ;;		_readEEPROM
  8449 ;; This function is called by:
  8450 ;;		_main
  8451 ;; This function uses a non-reentrant model
  8452 ;;
  8453                           
  8454                           	psect	text60
  8455  000772                     __ptext60:
  8456                           	callstack 0
  8457  000772                     _initROM:
  8458                           	callstack 26
  8459                           
  8460                           ; BSR set to: 1
  8461                           ;TRom.c: 13:     writting = counter = 0;
  8462                           
  8463                           ;incstack = 0
  8464  000772  6A32               	clrf	_counter^0,c
  8465  000774  6A2F               	clrf	_writting^0,c
  8466                           
  8467                           ; BSR set to: 1
  8468                           ;TRom.c: 14:     k = 2;
  8469  000776  0E02               	movlw	2
  8470  000778  6E30               	movwf	_k^0,c
  8471                           
  8472                           ;TRom.c: 15:     index1 = index2 = '0';
  8473  00077A  0E30               	movlw	48
  8474  00077C  6E2C               	movwf	_index1^0,c
  8475                           
  8476                           ; BSR set to: 1
  8477                           ;TRom.c: 18:     pit = readEEPROM(0);
  8478  00077E  0E00               	movlw	0
  8479  000780  EC33  F00E         	call	_readEEPROM
  8480  000784  6E2D               	movwf	_pit^0,c
  8481                           
  8482                           ;TRom.c: 19:     nTotal = readEEPROM(1);
  8483  000786  0E01               	movlw	1
  8484  000788  EC33  F00E         	call	_readEEPROM
  8485  00078C  6E2E               	movwf	_nTotal^0,c
  8486                           
  8487                           ;TRom.c: 21:     if (pit < 1 || pit > 8) {
  8488  00078E  502D               	movf	_pit^0,w,c
  8489  000790  E003               	bz	u5430
  8490  000792  0E08               	movlw	8
  8491  000794  642D               	cpfsgt	_pit^0,c
  8492  000796  D001               	goto	l6368
  8493  000798                     u5430:
  8494                           
  8495                           ;TRom.c: 22:         pit = 0;
  8496  000798  6A2D               	clrf	_pit^0,c
  8497  00079A                     l6368:
  8498                           
  8499                           ;TRom.c: 24:     if (nTotal < 1 || nTotal > 7) {
  8500  00079A  502E               	movf	_nTotal^0,w,c
  8501  00079C  E003               	bz	u5450
  8502  00079E  0E07               	movlw	7
  8503  0007A0  642E               	cpfsgt	_nTotal^0,c
  8504  0007A2  D001               	goto	l6372
  8505  0007A4                     u5450:
  8506                           
  8507                           ;TRom.c: 25:         nTotal = 0;
  8508  0007A4  6A2E               	clrf	_nTotal^0,c
  8509  0007A6                     l6372:
  8510                           
  8511                           ;TRom.c: 28:     addr = 2 + (nTotal * 10);
  8512  0007A6  502E               	movf	_nTotal^0,w,c
  8513  0007A8  0D0A               	mullw	10
  8514  0007AA  50F3               	movf	243,w,c
  8515  0007AC  0F02               	addlw	2
  8516  0007AE  6E31               	movwf	_addr^0,c
  8517                           
  8518                           ;TRom.c: 30:     if (pit == 0){
  8519  0007B0  502D               	movf	_pit^0,w,c
  8520  0007B2  E102               	bnz	l850
  8521                           
  8522                           ;TRom.c: 31:         pit = nTotal;
  8523  0007B4  C02E  F02D         	movff	_nTotal,_pit
  8524  0007B8                     l850:
  8525                           
  8526                           ;TRom.c: 34:     for (int j = 0; j < pit; j++) {
  8527  0007B8  6A6E               	clrf	initROM@j^0,c
  8528  0007BA  6A6F               	clrf	(initROM@j+1)^0,c
  8529  0007BC  D042               	goto	l6406
  8530  0007BE                     l852:
  8531                           
  8532                           ;TRom.c: 35:         for (int i = 0; i < 6; i++){
  8533  0007BE  6A70               	clrf	initROM@i^0,c
  8534  0007C0  6A71               	clrf	(initROM@i+1)^0,c
  8535  0007C2                     l6382:
  8536                           
  8537                           ;TRom.c: 36:             recordings[j].timestmp[i] = readEEPROM(k);
  8538  0007C2  D856               	call	PL32	;call to abstracted procedure
  8539  0007C4  ECFE  F00C         	call	___wmul	;wreg free
  8540  0007C8  D860               	call	PL80	;call to abstracted procedure
  8541  0007CA  0E04               	movlw	4
  8542  0007CC  266B               	addwf	??_initROM^0,f,c
  8543  0007CE  0E00               	movlw	0
  8544  0007D0  226C               	addwfc	(??_initROM+1)^0,f,c
  8545  0007D2  D856               	call	PL78	;call to abstracted procedure
  8546  0007D4  5070               	movf	initROM@i^0,w,c
  8547  0007D6  246B               	addwf	??_initROM^0,w,c
  8548  0007D8  6ED9               	movwf	fsr2l,c
  8549  0007DA  5071               	movf	(initROM@i+1)^0,w,c
  8550  0007DC  D85B               	call	PL98	;call to abstracted procedure
  8551  0007DE  EC33  F00E         	call	_readEEPROM
  8552  0007E2  6EDF               	movwf	indf2,c
  8553                           
  8554                           ;TRom.c: 37:             k++;
  8555  0007E4  2A30               	incf	_k^0,f,c
  8556                           
  8557                           ;TRom.c: 38:         }
  8558  0007E6  4A70               	infsnz	initROM@i^0,f,c
  8559  0007E8  2A71               	incf	(initROM@i+1)^0,f,c
  8560  0007EA  BE71               	btfsc	(initROM@i+1)^0,7,c
  8561  0007EC  D7EA               	goto	l6382
  8562  0007EE  5071               	movf	(initROM@i+1)^0,w,c
  8563  0007F0  E103               	bnz	u5470
  8564  0007F2  0E06               	movlw	6
  8565  0007F4  5C70               	subwf	initROM@i^0,w,c
  8566  0007F6  E3E5               	bnc	l6382
  8567  0007F8                     u5470:
  8568                           
  8569                           ;TRom.c: 39:         for (int i = 0; i < 4; i++){
  8570  0007F8  6A72               	clrf	initROM@i_1234^0,c
  8571  0007FA  6A73               	clrf	(initROM@i_1234+1)^0,c
  8572  0007FC                     l6394:
  8573                           
  8574                           ;TRom.c: 40:             recordings[j].index[i] = readEEPROM(k);
  8575  0007FC  D839               	call	PL32	;call to abstracted procedure
  8576  0007FE  ECFE  F00C         	call	___wmul	;wreg free
  8577  000802  D843               	call	PL80	;call to abstracted procedure
  8578  000804  D83D               	call	PL78	;call to abstracted procedure
  8579  000806  5072               	movf	initROM@i_1234^0,w,c
  8580  000808  246B               	addwf	??_initROM^0,w,c
  8581  00080A  6ED9               	movwf	fsr2l,c
  8582  00080C  5073               	movf	(initROM@i_1234+1)^0,w,c
  8583  00080E  D842               	call	PL98	;call to abstracted procedure
  8584  000810  EC33  F00E         	call	_readEEPROM
  8585  000814  6EDF               	movwf	indf2,c
  8586                           
  8587                           ;TRom.c: 41:             k++;
  8588  000816  2A30               	incf	_k^0,f,c
  8589                           
  8590                           ;TRom.c: 42:         }
  8591  000818  4A72               	infsnz	initROM@i_1234^0,f,c
  8592  00081A  2A73               	incf	(initROM@i_1234+1)^0,f,c
  8593  00081C  BE73               	btfsc	(initROM@i_1234+1)^0,7,c
  8594  00081E  D7EE               	goto	l6394
  8595  000820  5073               	movf	(initROM@i_1234+1)^0,w,c
  8596  000822  E103               	bnz	u5480
  8597  000824  0E04               	movlw	4
  8598  000826  5C72               	subwf	initROM@i_1234^0,w,c
  8599  000828  E3E9               	bnc	l6394
  8600  00082A                     u5480:
  8601                           
  8602                           ;TRom.c: 44:         index2 = recordings[nTotal-1].index[1];
  8603  00082A  502E               	movf	_nTotal^0,w,c
  8604  00082C  0D0A               	mullw	10
  8605  00082E  0E58               	movlw	low (_recordings+65528)
  8606  000830  24F3               	addwf	243,w,c
  8607  000832  6ED9               	movwf	fsr2l,c
  8608  000834  0E01               	movlw	high (_recordings+65528)
  8609  000836  20F4               	addwfc	prodh,w,c
  8610  000838  6EDA               	movwf	fsr2h,c
  8611  00083A  50DF               	movf	indf2,w,c
  8612  00083C  6E2C               	movwf	_index1^0,c
  8613                           
  8614                           ;TRom.c: 45:     }
  8615  00083E  4A6E               	infsnz	initROM@j^0,f,c
  8616  000840  2A6F               	incf	(initROM@j+1)^0,f,c
  8617  000842                     l6406:
  8618  000842  502D               	movf	_pit^0,w,c
  8619  000844  6E6B               	movwf	??_initROM^0,c
  8620  000846  6A6C               	clrf	(??_initROM+1)^0,c
  8621  000848  506B               	movf	??_initROM^0,w,c
  8622  00084A  5C6E               	subwf	initROM@j^0,w,c
  8623  00084C  506F               	movf	(initROM@j+1)^0,w,c
  8624  00084E  0A80               	xorlw	128
  8625  000850  6E6D               	movwf	(??_initROM+2)^0,c
  8626  000852  506C               	movf	(??_initROM+1)^0,w,c
  8627  000854  0A80               	xorlw	128
  8628  000856  586D               	subwfb	(??_initROM+2)^0,w,c
  8629  000858  E3B2               	bnc	l852
  8630                           
  8631                           ;TRom.c: 47:     if (pit > 0) {
  8632  00085A  502D               	movf	_pit^0,w,c
  8633  00085C  B4D8               	btfsc	status,2,c
  8634  00085E  0012               	return	
  8635                           
  8636                           ;TRom.c: 48:         if (index1 < '9') {
  8637  000860  0E39               	movlw	57
  8638  000862  602C               	cpfslt	_index1^0,c
  8639  000864  D002               	goto	l6414
  8640                           
  8641                           ;TRom.c: 49:             index1++;
  8642  000866  2A2C               	incf	_index1^0,f,c
  8643                           
  8644                           ;TRom.c: 50:         } else {
  8645  000868  0C39               	retlw	57
  8646  00086A                     l6414:
  8647                           
  8648                           ;TRom.c: 52:             index2++;
  8649  00086A  0E30               	movlw	48
  8650  00086C  6E2C               	movwf	_index1^0,c
  8651  00086E  0C30               	retlw	48	;funcret
  8652  000870                     __end_of_initROM:
  8653                           	callstack 0
  8654  000870                     PL32:
  8655                           	callstack 26
  8656  000870  C06E  F065         	movff	initROM@j,___wmul@multiplier
  8657  000874  C06F  F066         	movff	initROM@j+1,___wmul@multiplier+1
  8658  000878  6A68               	clrf	(___wmul@multiplicand+1)^0,c
  8659  00087A  0E0A               	movlw	10
  8660  00087C  6E67               	movwf	___wmul@multiplicand^0,c
  8661  00087E  0C0A               	retlw	10
  8662  000880                     __end_ofPL32:
  8663                           	callstack 0
  8664  000880                     PL78:
  8665                           	callstack 26
  8666  000880  5065               	movf	?___wmul^0,w,c
  8667  000882  266B               	addwf	??_initROM^0,f,c
  8668  000884  5066               	movf	(?___wmul+1)^0,w,c
  8669  000886  226C               	addwfc	(??_initROM+1)^0,f,c
  8670  000888  0012               	return	
  8671  00088A                     __end_ofPL78:
  8672                           	callstack 0
  8673  00088A                     PL80:
  8674                           	callstack 26
  8675  00088A  0E60               	movlw	low _recordings
  8676  00088C  6E6B               	movwf	??_initROM^0,c
  8677  00088E  0E01               	movlw	high _recordings
  8678  000890  6E6C               	movwf	(??_initROM+1)^0,c
  8679  000892  0012               	return	
  8680  000894                     __end_ofPL80:
  8681                           	callstack 0
  8682  000894                     PL98:
  8683                           	callstack 26
  8684  000894  206C               	addwfc	(??_initROM+1)^0,w,c
  8685  000896  6EDA               	movwf	fsr2h,c
  8686  000898  5030               	movf	_k^0,w,c
  8687  00089A  0012               	return	
  8688  00089C                     __end_ofPL98:
  8689                           	callstack 0
  8690                           
  8691 ;; *************** function _readEEPROM *****************
  8692 ;; Defined at:
  8693 ;;		line 90 in file "TRom.c"
  8694 ;; Parameters:    Size  Location     Type
  8695 ;;  addr            1    wreg     unsigned char 
  8696 ;; Auto vars:     Size  Location     Type
  8697 ;;  addr            1   11[COMRAM] unsigned char 
  8698 ;; Return value:  Size  Location     Type
  8699 ;;                  1    wreg      unsigned char 
  8700 ;; Registers used:
  8701 ;;		wreg, status,2
  8702 ;; Tracked objects:
  8703 ;;		On entry : 0/1
  8704 ;;		On exit  : 0/0
  8705 ;;		Unchanged: 0/0
  8706 ;; Data sizes:     COMRAM   BANK0   BANK1
  8707 ;;      Params:         0       0       0
  8708 ;;      Locals:         1       0       0
  8709 ;;      Temps:          0       0       0
  8710 ;;      Totals:         1       0       0
  8711 ;;Total ram usage:        1 bytes
  8712 ;; Hardware stack levels used: 1
  8713 ;; Hardware stack levels required when called: 3
  8714 ;; This function calls:
  8715 ;;		Nothing
  8716 ;; This function is called by:
  8717 ;;		_initROM
  8718 ;; This function uses a non-reentrant model
  8719 ;;
  8720                           
  8721                           	psect	text61
  8722  001C66                     __ptext61:
  8723                           	callstack 0
  8724  001C66                     _readEEPROM:
  8725                           	callstack 26
  8726                           
  8727                           ;incstack = 0
  8728                           ;readEEPROM@addr stored from wreg
  8729  001C66  6E65               	movwf	readEEPROM@addr^0,c
  8730                           
  8731                           ;TRom.c: 91:     EEADR = addr;
  8732  001C68  C065  FFA9         	movff	readEEPROM@addr,4009	;volatile
  8733                           
  8734                           ;TRom.c: 92:     EECON1bits.EEPGD = 0;
  8735  001C6C  9EA6               	bcf	166,7,c	;volsfr
  8736                           
  8737                           ;TRom.c: 93:     EECON1bits.CFGS = 0;
  8738  001C6E  9CA6               	bcf	166,6,c	;volsfr
  8739                           
  8740                           ;TRom.c: 94:     EECON1bits.RD = 1;
  8741  001C70  80A6               	bsf	166,0,c	;volsfr
  8742                           
  8743                           ;TRom.c: 96:     return EEDATA;
  8744  001C72  50A8               	movf	168,w,c	;volatile
  8745  001C74  0012               	return		;funcret
  8746  001C76                     __end_of_readEEPROM:
  8747                           	callstack 0
  8748                           
  8749 ;; *************** function ___wmul *****************
  8750 ;; Defined at:
  8751 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
  8752 ;; Parameters:    Size  Location     Type
  8753 ;;  multiplier      2   11[COMRAM] unsigned int 
  8754 ;;  multiplicand    2   13[COMRAM] unsigned int 
  8755 ;; Auto vars:     Size  Location     Type
  8756 ;;  product         2   15[COMRAM] unsigned int 
  8757 ;; Return value:  Size  Location     Type
  8758 ;;                  2   11[COMRAM] unsigned int 
  8759 ;; Registers used:
  8760 ;;		wreg, status,2, status,0, prodl, prodh
  8761 ;; Tracked objects:
  8762 ;;		On entry : 0/1
  8763 ;;		On exit  : 0/0
  8764 ;;		Unchanged: 0/0
  8765 ;; Data sizes:     COMRAM   BANK0   BANK1
  8766 ;;      Params:         4       0       0
  8767 ;;      Locals:         2       0       0
  8768 ;;      Temps:          0       0       0
  8769 ;;      Totals:         6       0       0
  8770 ;;Total ram usage:        6 bytes
  8771 ;; Hardware stack levels used: 1
  8772 ;; Hardware stack levels required when called: 3
  8773 ;; This function calls:
  8774 ;;		Nothing
  8775 ;; This function is called by:
  8776 ;;		_initROM
  8777 ;; This function uses a non-reentrant model
  8778 ;;
  8779                           
  8780                           	psect	text62
  8781  0019FC                     __ptext62:
  8782                           	callstack 0
  8783  0019FC                     ___wmul:
  8784                           	callstack 26
  8785                           
  8786                           ;incstack = 0
  8787  0019FC  5065               	movf	___wmul@multiplier^0,w,c
  8788  0019FE  0267               	mulwf	___wmul@multiplicand^0,c
  8789  001A00  CFF3 F069          	movff	prodl,___wmul@product
  8790  001A04  CFF4 F06A          	movff	prodh,___wmul@product+1
  8791  001A08  5065               	movf	___wmul@multiplier^0,w,c
  8792  001A0A  0268               	mulwf	(___wmul@multiplicand+1)^0,c
  8793  001A0C  50F3               	movf	243,w,c
  8794  001A0E  266A               	addwf	(___wmul@product+1)^0,f,c
  8795  001A10  5066               	movf	(___wmul@multiplier+1)^0,w,c
  8796  001A12  0267               	mulwf	___wmul@multiplicand^0,c
  8797  001A14  50F3               	movf	243,w,c
  8798  001A16  266A               	addwf	(___wmul@product+1)^0,f,c
  8799  001A18  C069  F065         	movff	___wmul@product,?___wmul
  8800  001A1C  C06A  F066         	movff	___wmul@product+1,?___wmul+1
  8801  001A20  0012               	return		;funcret
  8802  001A22                     __end_of___wmul:
  8803                           	callstack 0
  8804                           
  8805 ;; *************** function _initMenu *****************
  8806 ;; Defined at:
  8807 ;;		line 28 in file "TMenu.c"
  8808 ;; Parameters:    Size  Location     Type
  8809 ;;		None
  8810 ;; Auto vars:     Size  Location     Type
  8811 ;;		None
  8812 ;; Return value:  Size  Location     Type
  8813 ;;                  1    wreg      void 
  8814 ;; Registers used:
  8815 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8816 ;; Tracked objects:
  8817 ;;		On entry : 0/1
  8818 ;;		On exit  : 0/0
  8819 ;;		Unchanged: 0/0
  8820 ;; Data sizes:     COMRAM   BANK0   BANK1
  8821 ;;      Params:         0       0       0
  8822 ;;      Locals:         0       0       0
  8823 ;;      Temps:          0       0       0
  8824 ;;      Totals:         0       0       0
  8825 ;;Total ram usage:        0 bytes
  8826 ;; Hardware stack levels used: 1
  8827 ;; Hardware stack levels required when called: 7
  8828 ;; This function calls:
  8829 ;;		_LcCursorOn
  8830 ;;		_TiGetTimer
  8831 ;;		_TiResetTics
  8832 ;;		_cleanMarquesina
  8833 ;; This function is called by:
  8834 ;;		_main
  8835 ;; This function uses a non-reentrant model
  8836 ;;
  8837                           
  8838                           	psect	text63
  8839  00178A                     __ptext63:
  8840                           	callstack 0
  8841  00178A                     _initMenu:
  8842                           	callstack 23
  8843                           
  8844                           ;TMenu.c: 29:     timer = TiGetTimer();
  8845                           
  8846                           ;incstack = 0
  8847  00178A  EC71  F00C         	call	_TiGetTimer	;wreg free
  8848  00178E  6E3D               	movwf	_timer@TMenu$F1082^0,c
  8849                           
  8850                           ;TMenu.c: 30:     TiResetTics(timer);
  8851  001790  503D               	movf	_timer@TMenu$F1082^0,w,c
  8852  001792  EC1A  F00E         	call	_TiResetTics
  8853                           
  8854                           ;TMenu.c: 31:     timer2 = TiGetTimer();
  8855  001796  EC71  F00C         	call	_TiGetTimer	;wreg free
  8856  00179A  6E3C               	movwf	_timer2^0,c
  8857                           
  8858                           ;TMenu.c: 32:     TiResetTics(timer2);
  8859  00179C  503C               	movf	_timer2^0,w,c
  8860  00179E  EC1A  F00E         	call	_TiResetTics
  8861                           
  8862                           ;TMenu.c: 33:     posLCD = posJoystick = caseMenu = n = num = empty = 0;
  8863  0017A2  6A39               	clrf	_empty^0,c
  8864  0017A4  6A43               	clrf	_n^0,c
  8865  0017A6  6A3B               	clrf	_caseMenu^0,c
  8866  0017A8  6A44               	clrf	_posJoystick^0,c
  8867  0017AA  6A3A               	clrf	_posLCD^0,c
  8868                           
  8869                           ;TMenu.c: 34:     extraPos = posMin = posMin2 = finalMarq = finalMarq2 = 0;
  8870  0017AC  ECB4  F003         	call	PL56	;call to abstracted procedure
  8871  0017B0  6A38               	clrf	_extraPos^0,c
  8872                           
  8873                           ;TMenu.c: 35:     showTime[2] = ':';
  8874  0017B2  0E3A               	movlw	58
  8875  0017B4  0100               	movlb	0	; () banked
  8876  0017B6  6FEB               	movwf	(_showTime+2)& (0+255),b
  8877                           
  8878                           ; BSR set to: 0
  8879                           ;TMenu.c: 36:     showTime[0] = showTime[1] = showTime[3] = showTime[4]= '0';
  8880  0017B8  0E30               	movlw	48
  8881  0017BA  EC79  F002         	call	PL38	;call to abstracted procedure
  8882                           
  8883                           ; BSR set to: 0
  8884                           ;TMenu.c: 37:     posMax = 23;
  8885  0017BE  0E17               	movlw	23
  8886  0017C0  6E37               	movwf	_posMax^0,c
  8887                           
  8888                           ; BSR set to: 0
  8889                           ;TMenu.c: 38:     LcCursorOn();
  8890  0017C2  EC42  F00E         	call	_LcCursorOn	;wreg free
  8891                           
  8892                           ;TMenu.c: 39:     cleanMarquesina();
  8893  0017C6  EF11  F00E         	goto	_cleanMarquesina	;wreg free
  8894  0017CA                     __end_of_initMenu:
  8895                           	callstack 0
  8896                           
  8897 ;; *************** function _cleanMarquesina *****************
  8898 ;; Defined at:
  8899 ;;		line 219 in file "TMenu.c"
  8900 ;; Parameters:    Size  Location     Type
  8901 ;;		None
  8902 ;; Auto vars:     Size  Location     Type
  8903 ;;		None
  8904 ;; Return value:  Size  Location     Type
  8905 ;;                  1    wreg      void 
  8906 ;; Registers used:
  8907 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8908 ;; Tracked objects:
  8909 ;;		On entry : 0/0
  8910 ;;		On exit  : 0/0
  8911 ;;		Unchanged: 0/0
  8912 ;; Data sizes:     COMRAM   BANK0   BANK1
  8913 ;;      Params:         0       0       0
  8914 ;;      Locals:         0       0       0
  8915 ;;      Temps:          0       0       0
  8916 ;;      Totals:         0       0       0
  8917 ;;Total ram usage:        0 bytes
  8918 ;; Hardware stack levels used: 1
  8919 ;; Hardware stack levels required when called: 6
  8920 ;; This function calls:
  8921 ;;		_LcClear
  8922 ;; This function is called by:
  8923 ;;		_changePos
  8924 ;;		_initMenu
  8925 ;;		_changeMenu
  8926 ;;		_motorMenu
  8927 ;;		_motorRX
  8928 ;; This function uses a non-reentrant model
  8929 ;;
  8930                           
  8931                           	psect	text64
  8932  001C22                     __ptext64:
  8933                           	callstack 0
  8934  001C22                     _cleanMarquesina:
  8935                           	callstack 19
  8936                           
  8937                           ;TMenu.c: 220:     LcClear();
  8938                           
  8939                           ;incstack = 0
  8940  001C22  ECD7  F00D         	call	_LcClear	;wreg free
  8941                           
  8942                           ;TMenu.c: 221:    posLCD = extraPos = posMin = posMin2 = finalMarq = finalMarq2 = 0;
  8943  001C26  ECB4  F003         	call	PL56	;call to abstracted procedure
  8944  001C2A  6A38               	clrf	_extraPos^0,c
  8945  001C2C  6A3A               	clrf	_posLCD^0,c
  8946                           
  8947                           ;TMenu.c: 222:    posMax = 23;
  8948  001C2E  0E17               	movlw	23
  8949  001C30  6E37               	movwf	_posMax^0,c
  8950  001C32  0C17               	retlw	23	;funcret
  8951  001C34                     __end_of_cleanMarquesina:
  8952                           	callstack 0
  8953                           
  8954 ;; *************** function _LcClear *****************
  8955 ;; Defined at:
  8956 ;;		line 94 in file "LcTLCD.c"
  8957 ;; Parameters:    Size  Location     Type
  8958 ;;		None
  8959 ;; Auto vars:     Size  Location     Type
  8960 ;;		None
  8961 ;; Return value:  Size  Location     Type
  8962 ;;                  1    wreg      void 
  8963 ;; Registers used:
  8964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8965 ;; Tracked objects:
  8966 ;;		On entry : 0/0
  8967 ;;		On exit  : 0/0
  8968 ;;		Unchanged: 0/0
  8969 ;; Data sizes:     COMRAM   BANK0   BANK1
  8970 ;;      Params:         0       0       0
  8971 ;;      Locals:         0       0       0
  8972 ;;      Temps:          0       0       0
  8973 ;;      Totals:         0       0       0
  8974 ;;Total ram usage:        0 bytes
  8975 ;; Hardware stack levels used: 1
  8976 ;; Hardware stack levels required when called: 5
  8977 ;; This function calls:
  8978 ;;		_CantaIR
  8979 ;;		_Espera
  8980 ;;		_WaitForBusy
  8981 ;; This function is called by:
  8982 ;;		_cleanMarquesina
  8983 ;; This function uses a non-reentrant model
  8984 ;;
  8985                           
  8986                           	psect	text65
  8987  001BAE                     __ptext65:
  8988                           	callstack 0
  8989  001BAE                     _LcClear:
  8990                           	callstack 19
  8991                           
  8992                           ;LcTLCD.c: 97:  WaitForBusy(); CantaIR(0x01);
  8993                           
  8994                           ;incstack = 0
  8995  001BAE  ECE5  F00B         	call	_WaitForBusy	;wreg free
  8996  001BB2  0E01               	movlw	1
  8997  001BB4  EC8F  F00D         	call	_CantaIR
  8998                           
  8999                           ;LcTLCD.c: 98:  Espera(Timer, 3);
  9000  001BB8  EC24  F006         	call	PL20	;call to abstracted procedure
  9001  001BBC  0E03               	movlw	3
  9002  001BBE  6E6E               	movwf	Espera@ms^0,c
  9003  001BC0  EFE8  F00C         	goto	_Espera	;wreg free
  9004  001BC4                     __end_of_LcClear:
  9005                           	callstack 0
  9006                           
  9007 ;; *************** function _LcCursorOn *****************
  9008 ;; Defined at:
  9009 ;;		line 101 in file "LcTLCD.c"
  9010 ;; Parameters:    Size  Location     Type
  9011 ;;		None
  9012 ;; Auto vars:     Size  Location     Type
  9013 ;;		None
  9014 ;; Return value:  Size  Location     Type
  9015 ;;                  1    wreg      void 
  9016 ;; Registers used:
  9017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9018 ;; Tracked objects:
  9019 ;;		On entry : 3F/0
  9020 ;;		On exit  : 0/0
  9021 ;;		Unchanged: 0/0
  9022 ;; Data sizes:     COMRAM   BANK0   BANK1
  9023 ;;      Params:         0       0       0
  9024 ;;      Locals:         0       0       0
  9025 ;;      Temps:          0       0       0
  9026 ;;      Totals:         0       0       0
  9027 ;;Total ram usage:        0 bytes
  9028 ;; Hardware stack levels used: 1
  9029 ;; Hardware stack levels required when called: 5
  9030 ;; This function calls:
  9031 ;;		_CantaIR
  9032 ;;		_WaitForBusy
  9033 ;; This function is called by:
  9034 ;;		_initMenu
  9035 ;; This function uses a non-reentrant model
  9036 ;;
  9037                           
  9038                           	psect	text66
  9039  001C84                     __ptext66:
  9040                           	callstack 0
  9041  001C84                     _LcCursorOn:
  9042                           	callstack 24
  9043                           
  9044                           ; BSR set to: 0
  9045                           ;LcTLCD.c: 104:  WaitForBusy();
  9046                           
  9047                           ;incstack = 0
  9048  001C84  ECE5  F00B         	call	_WaitForBusy	;wreg free
  9049                           
  9050                           ;LcTLCD.c: 105:  CantaIR(0x08 | 0x04 | 0x02);
  9051  001C88  0E0E               	movlw	14
  9052  001C8A  EF8F  F00D         	goto	_CantaIR
  9053  001C8E                     __end_of_LcCursorOn:
  9054                           	callstack 0
  9055                           
  9056 ;; *************** function _initADC *****************
  9057 ;; Defined at:
  9058 ;;		line 15 in file "TADC.c"
  9059 ;; Parameters:    Size  Location     Type
  9060 ;;		None
  9061 ;; Auto vars:     Size  Location     Type
  9062 ;;		None
  9063 ;; Return value:  Size  Location     Type
  9064 ;;                  1    wreg      void 
  9065 ;; Registers used:
  9066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9067 ;; Tracked objects:
  9068 ;;		On entry : 0/0
  9069 ;;		On exit  : 0/0
  9070 ;;		Unchanged: 0/0
  9071 ;; Data sizes:     COMRAM   BANK0   BANK1
  9072 ;;      Params:         0       0       0
  9073 ;;      Locals:         0       0       0
  9074 ;;      Temps:          0       0       0
  9075 ;;      Totals:         0       0       0
  9076 ;;Total ram usage:        0 bytes
  9077 ;; Hardware stack levels used: 1
  9078 ;; Hardware stack levels required when called: 4
  9079 ;; This function calls:
  9080 ;;		_TiGetTimer
  9081 ;;		_TiResetTics
  9082 ;; This function is called by:
  9083 ;;		_main
  9084 ;; This function uses a non-reentrant model
  9085 ;;
  9086                           
  9087                           	psect	text67
  9088  001A22                     __ptext67:
  9089                           	callstack 0
  9090  001A22                     _initADC:
  9091                           	callstack 26
  9092                           
  9093                           ;TADC.c: 16:     timerADC = TiGetTimer();
  9094                           
  9095                           ;incstack = 0
  9096  001A22  EC71  F00C         	call	_TiGetTimer	;wreg free
  9097  001A26  6E4B               	movwf	_timerADC^0,c
  9098                           
  9099                           ;TADC.c: 17:     TiResetTics(timerADC);
  9100  001A28  504B               	movf	_timerADC^0,w,c
  9101  001A2A  EC1A  F00E         	call	_TiResetTics
  9102                           
  9103                           ;TADC.c: 18:     timerMicro = TiGetTimer();
  9104  001A2E  EC71  F00C         	call	_TiGetTimer	;wreg free
  9105  001A32  6E4A               	movwf	_timerMicro^0,c
  9106                           
  9107                           ;TADC.c: 19:     TiResetTics(timerMicro);
  9108  001A34  504A               	movf	_timerMicro^0,w,c
  9109  001A36  EC1A  F00E         	call	_TiResetTics
  9110                           
  9111                           ;TADC.c: 20:     move = 0;
  9112  001A3A  6A49               	clrf	_move^0,c
  9113                           
  9114                           ;TADC.c: 21:     TRISAbits.RA0 = 1;
  9115  001A3C  8092               	bsf	146,0,c	;volatile
  9116                           
  9117                           ;TADC.c: 22:     TRISAbits.RA1 = 1;
  9118  001A3E  8292               	bsf	146,1,c	;volatile
  9119                           
  9120                           ;TADC.c: 24:     ADCON1 = 0x0D;
  9121  001A40  0E0D               	movlw	13
  9122  001A42  6EC1               	movwf	193,c	;volatile
  9123                           
  9124                           ;TADC.c: 25:     ADCON2 = 0x00;
  9125  001A44  6AC0               	clrf	192,c	;volatile
  9126  001A46  0012               	return		;funcret
  9127  001A48                     __end_of_initADC:
  9128                           	callstack 0
  9129                           
  9130 ;; *************** function _TiInit *****************
  9131 ;; Defined at:
  9132 ;;		line 73 in file "TiTTimer.c"
  9133 ;; Parameters:    Size  Location     Type
  9134 ;;		None
  9135 ;; Auto vars:     Size  Location     Type
  9136 ;;  counter         1   11[COMRAM] unsigned char 
  9137 ;; Return value:  Size  Location     Type
  9138 ;;                  1    wreg      void 
  9139 ;; Registers used:
  9140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9141 ;; Tracked objects:
  9142 ;;		On entry : 0/0
  9143 ;;		On exit  : 0/0
  9144 ;;		Unchanged: 0/0
  9145 ;; Data sizes:     COMRAM   BANK0   BANK1
  9146 ;;      Params:         0       0       0
  9147 ;;      Locals:         1       0       0
  9148 ;;      Temps:          0       0       0
  9149 ;;      Totals:         1       0       0
  9150 ;;Total ram usage:        1 bytes
  9151 ;; Hardware stack levels used: 1
  9152 ;; Hardware stack levels required when called: 3
  9153 ;; This function calls:
  9154 ;;		Nothing
  9155 ;; This function is called by:
  9156 ;;		_main
  9157 ;; This function uses a non-reentrant model
  9158 ;;
  9159                           
  9160                           	psect	text68
  9161  001840                     __ptext68:
  9162                           	callstack 0
  9163  001840                     _TiInit:
  9164                           	callstack 27
  9165                           
  9166                           ;TiTTimer.c: 74:  unsigned char counter;;TiTTimer.c: 75:  for (counter=0;counter<32;coun
      +                          ter++) {
  9167                           
  9168                           ;incstack = 0
  9169  001840  6A65               	clrf	TiInit@counter^0,c
  9170  001842                     l4640:
  9171                           
  9172                           ;TiTTimer.c: 76:   s_Timers[counter].b_busy=0;
  9173  001842  5065               	movf	TiInit@counter^0,w,c
  9174  001844  EC82  F00C         	call	PL24	;call to abstracted procedure
  9175  001848  6ADF               	clrf	indf2,c
  9176                           
  9177                           ;TiTTimer.c: 77:  }
  9178  00184A  2A65               	incf	TiInit@counter^0,f,c
  9179  00184C  0E1F               	movlw	31
  9180  00184E  6465               	cpfsgt	TiInit@counter^0,c
  9181  001850  D7F8               	goto	l4640
  9182                           
  9183                           ;TiTTimer.c: 78:  h_Tics=0;
  9184  001852  6A0D               	clrf	_h_Tics^0,c
  9185  001854  6A0E               	clrf	(_h_Tics+1)^0,c
  9186                           
  9187                           ;TiTTimer.c: 79:     OSCCONbits.IRCF2 = 1;
  9188  001856  8CD3               	bsf	211,6,c	;volatile
  9189                           
  9190                           ;TiTTimer.c: 80:     OSCCONbits.IRCF1 = 1;
  9191  001858  8AD3               	bsf	211,5,c	;volatile
  9192                           
  9193                           ;TiTTimer.c: 81:     OSCCONbits.IRCF0 = 0;
  9194  00185A  98D3               	bcf	211,4,c	;volatile
  9195                           
  9196                           ;TiTTimer.c: 83:  T0CONbits.T08BIT=1;
  9197  00185C  8CD5               	bsf	213,6,c	;volatile
  9198                           
  9199                           ;TiTTimer.c: 84:  T0CONbits.T0CS = 0;
  9200  00185E  9AD5               	bcf	213,5,c	;volatile
  9201                           
  9202                           ;TiTTimer.c: 85:  T0CONbits.PSA = 0;
  9203  001860  96D5               	bcf	213,3,c	;volatile
  9204                           
  9205                           ;TiTTimer.c: 86:  T0CONbits.T0PS = 1;
  9206  001862  50D5               	movf	213,w,c	;volatile
  9207  001864  0BF8               	andlw	-8
  9208  001866  0901               	iorlw	1
  9209  001868  6ED5               	movwf	213,c	;volatile
  9210                           
  9211                           ;TiTTimer.c: 88:  TMR0L=6;
  9212  00186A  0E06               	movlw	6
  9213  00186C  6ED6               	movwf	214,c	;volatile
  9214                           
  9215                           ;TiTTimer.c: 89:  T0CONbits.TMR0ON = 1;
  9216  00186E  8ED5               	bsf	213,7,c	;volatile
  9217                           
  9218                           ;TiTTimer.c: 91:  INTCONbits.TMR0IF = 0;
  9219  001870  94F2               	bcf	242,2,c	;volatile
  9220                           
  9221                           ;TiTTimer.c: 92:  INTCONbits.TMR0IE = 1;
  9222  001872  8AF2               	bsf	242,5,c	;volatile
  9223                           
  9224                           ;TiTTimer.c: 93:     OSCTUNEbits.PLLEN = 1;
  9225  001874  8C9B               	bsf	155,6,c	;volatile
  9226  001876  0C06               	retlw	6	;funcret
  9227  001878                     __end_of_TiInit:
  9228                           	callstack 0
  9229                           
  9230 ;; *************** function _LcInit *****************
  9231 ;; Defined at:
  9232 ;;		line 54 in file "LcTLCD.c"
  9233 ;; Parameters:    Size  Location     Type
  9234 ;;  rows            1    wreg     unsigned char 
  9235 ;;  columns         1   24[COMRAM] unsigned char 
  9236 ;; Auto vars:     Size  Location     Type
  9237 ;;  rows            1    0[BANK1 ] unsigned char 
  9238 ;;  i               2    1[BANK1 ] int 
  9239 ;; Return value:  Size  Location     Type
  9240 ;;                  1    wreg      void 
  9241 ;; Registers used:
  9242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9243 ;; Tracked objects:
  9244 ;;		On entry : 0/0
  9245 ;;		On exit  : 3F/1
  9246 ;;		Unchanged: 0/0
  9247 ;; Data sizes:     COMRAM   BANK0   BANK1
  9248 ;;      Params:         1       0       0
  9249 ;;      Locals:         0       0       3
  9250 ;;      Temps:          0       0       0
  9251 ;;      Totals:         1       0       3
  9252 ;;Total ram usage:        4 bytes
  9253 ;; Hardware stack levels used: 1
  9254 ;; Hardware stack levels required when called: 5
  9255 ;; This function calls:
  9256 ;;		_CantaIR
  9257 ;;		_EscriuPrimeraOrdre
  9258 ;;		_Espera
  9259 ;;		_TiGetTimer
  9260 ;;		_WaitForBusy
  9261 ;; This function is called by:
  9262 ;;		_main
  9263 ;; This function uses a non-reentrant model
  9264 ;;
  9265                           
  9266                           	psect	text69
  9267  000B88                     __ptext69:
  9268                           	callstack 0
  9269  000B88                     _LcInit:
  9270                           	callstack 25
  9271                           
  9272                           ;incstack = 0
  9273                           ;LcInit@rows stored from wreg
  9274  000B88  0101               	movlb	1	; () banked
  9275  000B8A  6FB0               	movwf	LcInit@rows& (0+255),b
  9276                           
  9277                           ;LcTLCD.c: 60:  int i;;LcTLCD.c: 61:  Timer = TiGetTimer();
  9278  000B8C  EC71  F00C         	call	_TiGetTimer	;wreg free
  9279  000B90  6E0F               	movwf	_Timer^0,c
  9280  000B92  6A10               	clrf	(_Timer+1)^0,c
  9281                           
  9282                           ;LcTLCD.c: 62:  Rows = rows; Columns = columns;
  9283  000B94  C1B0  F04F         	movff	LcInit@rows,_Rows
  9284  000B98  C072  F04E         	movff	LcInit@columns,_Columns
  9285                           
  9286                           ;LcTLCD.c: 63:  RowAct = ColumnAct = 0;
  9287  000B9C  6A4C               	clrf	_ColumnAct^0,c
  9288  000B9E  6A4D               	clrf	_RowAct^0,c
  9289                           
  9290                           ;LcTLCD.c: 64:  (TRISBbits.RB3 = TRISBbits.RB4 = TRISBbits.RB5 = 0);
  9291  000BA0  9A93               	bcf	147,5,c	;volatile
  9292  000BA2  9893               	bcf	147,4,c	;volatile
  9293  000BA4  9693               	bcf	147,3,c	;volatile
  9294                           
  9295                           ;LcTLCD.c: 65:  for (i = 0; i < 2; i++) {
  9296  000BA6  0101               	movlb	1	; () banked
  9297  000BA8  6BB1               	clrf	LcInit@i& (0+255),b
  9298  000BAA  6BB2               	clrf	(LcInit@i+1)& (0+255),b
  9299  000BAC                     l8106:
  9300                           
  9301                           ; BSR set to: 1
  9302                           ;LcTLCD.c: 66:   Espera(Timer, 100);
  9303  000BAC  D84D               	call	PL20	;call to abstracted procedure
  9304  000BAE  0E64               	movlw	100
  9305  000BB0  6E6E               	movwf	Espera@ms^0,c
  9306  000BB2  ECE8  F00C         	call	_Espera	;wreg free
  9307                           
  9308                           ;LcTLCD.c: 69:   EscriuPrimeraOrdre(0x02 | 0x01);
  9309  000BB6  0E03               	movlw	3
  9310  000BB8  ECDE  F008         	call	_EscriuPrimeraOrdre
  9311                           
  9312                           ;LcTLCD.c: 70:   Espera(Timer, 5);
  9313  000BBC  D845               	call	PL20	;call to abstracted procedure
  9314  000BBE  0E05               	movlw	5
  9315  000BC0  6E6E               	movwf	Espera@ms^0,c
  9316  000BC2  ECE8  F00C         	call	_Espera	;wreg free
  9317                           
  9318                           ;LcTLCD.c: 71:   EscriuPrimeraOrdre(0x02 | 0x01);
  9319  000BC6  0E03               	movlw	3
  9320  000BC8  ECDE  F008         	call	_EscriuPrimeraOrdre
  9321                           
  9322                           ;LcTLCD.c: 72:   Espera(Timer, 1);
  9323  000BCC  D83D               	call	PL20	;call to abstracted procedure
  9324  000BCE  0E01               	movlw	1
  9325  000BD0  6E6E               	movwf	Espera@ms^0,c
  9326  000BD2  ECE8  F00C         	call	_Espera	;wreg free
  9327                           
  9328                           ;LcTLCD.c: 73:   EscriuPrimeraOrdre(0x02 | 0x01);
  9329  000BD6  0E03               	movlw	3
  9330  000BD8  ECDE  F008         	call	_EscriuPrimeraOrdre
  9331                           
  9332                           ;LcTLCD.c: 74:   Espera(Timer, 1);
  9333  000BDC  D835               	call	PL20	;call to abstracted procedure
  9334  000BDE  0E01               	movlw	1
  9335  000BE0  6E6E               	movwf	Espera@ms^0,c
  9336  000BE2  ECE8  F00C         	call	_Espera	;wreg free
  9337                           
  9338                           ;LcTLCD.c: 77:   EscriuPrimeraOrdre(0x02);
  9339  000BE6  0E02               	movlw	2
  9340  000BE8  ECDE  F008         	call	_EscriuPrimeraOrdre
  9341                           
  9342                           ;LcTLCD.c: 78:   Espera(Timer, 1);
  9343  000BEC  D82D               	call	PL20	;call to abstracted procedure
  9344  000BEE  0E01               	movlw	1
  9345  000BF0  6E6E               	movwf	Espera@ms^0,c
  9346  000BF2  ECE8  F00C         	call	_Espera	;wreg free
  9347                           
  9348                           ;LcTLCD.c: 79:   CantaIR(0x20 | 0x08);
  9349  000BF6  0E28               	movlw	40
  9350  000BF8  EC8F  F00D         	call	_CantaIR
  9351                           
  9352                           ;LcTLCD.c: 82:   WaitForBusy(); CantaIR(0x08);
  9353  000BFC  ECE5  F00B         	call	_WaitForBusy	;wreg free
  9354  000C00  0E08               	movlw	8
  9355  000C02  EC8F  F00D         	call	_CantaIR
  9356                           
  9357                           ;LcTLCD.c: 83:   WaitForBusy(); CantaIR(0x01);
  9358  000C06  ECE5  F00B         	call	_WaitForBusy	;wreg free
  9359  000C0A  0E01               	movlw	1
  9360  000C0C  EC8F  F00D         	call	_CantaIR
  9361                           
  9362                           ;LcTLCD.c: 84:   Espera(Timer,3);
  9363  000C10  D81B               	call	PL20	;call to abstracted procedure
  9364  000C12  0E03               	movlw	3
  9365  000C14  6E6E               	movwf	Espera@ms^0,c
  9366  000C16  ECE8  F00C         	call	_Espera	;wreg free
  9367                           
  9368                           ;LcTLCD.c: 85:   WaitForBusy(); CantaIR(0x04 | 0x02);
  9369  000C1A  ECE5  F00B         	call	_WaitForBusy	;wreg free
  9370  000C1E  0E06               	movlw	6
  9371  000C20  EC8F  F00D         	call	_CantaIR
  9372                           
  9373                           ;LcTLCD.c: 86:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  9374  000C24  ECE5  F00B         	call	_WaitForBusy	;wreg free
  9375  000C28  0E0F               	movlw	15
  9376  000C2A  EC8F  F00D         	call	_CantaIR
  9377                           
  9378                           ;LcTLCD.c: 87:  }
  9379  000C2E  0101               	movlb	1	; () banked
  9380  000C30  4BB1               	infsnz	LcInit@i& (0+255),f,b
  9381  000C32  2BB2               	incf	(LcInit@i+1)& (0+255),f,b
  9382                           
  9383                           ; BSR set to: 1
  9384  000C34  BFB2               	btfsc	(LcInit@i+1)& (0+255),7,b
  9385  000C36  D7BA               	goto	l8106
  9386  000C38  51B2               	movf	(LcInit@i+1)& (0+255),w,b
  9387  000C3A  E105               	bnz	u7410
  9388  000C3C  0E02               	movlw	2
  9389  000C3E  5DB1               	subwf	LcInit@i& (0+255),w,b
  9390  000C40  B0D8               	btfsc	status,0,c
  9391  000C42  0012               	return	
  9392  000C44  D7B3               	goto	l8106
  9393  000C46                     u7410:
  9394                           
  9395                           ; BSR set to: 1
  9396  000C46  0012               	return		;funcret
  9397  000C48                     __end_of_LcInit:
  9398                           	callstack 0
  9399  000C48                     PL20:
  9400                           	callstack 25
  9401  000C48  C00F  F06C         	movff	_Timer,Espera@Timer
  9402  000C4C  C010  F06D         	movff	_Timer+1,Espera@Timer+1
  9403  000C50  6A6F               	clrf	(Espera@ms+1)^0,c
  9404  000C52  0012               	return	
  9405  000C54                     __end_ofPL20:
  9406                           	callstack 0
  9407                           
  9408 ;; *************** function _WaitForBusy *****************
  9409 ;; Defined at:
  9410 ;;		line 234 in file "LcTLCD.c"
  9411 ;; Parameters:    Size  Location     Type
  9412 ;;		None
  9413 ;; Auto vars:     Size  Location     Type
  9414 ;;  Busy            1   18[COMRAM] unsigned char 
  9415 ;; Return value:  Size  Location     Type
  9416 ;;                  1    wreg      void 
  9417 ;; Registers used:
  9418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9419 ;; Tracked objects:
  9420 ;;		On entry : 0/1
  9421 ;;		On exit  : 0/0
  9422 ;;		Unchanged: 0/0
  9423 ;; Data sizes:     COMRAM   BANK0   BANK1
  9424 ;;      Params:         0       0       0
  9425 ;;      Locals:         1       0       0
  9426 ;;      Temps:          0       0       0
  9427 ;;      Totals:         1       0       0
  9428 ;;Total ram usage:        1 bytes
  9429 ;; Hardware stack levels used: 1
  9430 ;; Hardware stack levels required when called: 4
  9431 ;; This function calls:
  9432 ;;		_TiGetTics
  9433 ;;		_TiResetTics
  9434 ;; This function is called by:
  9435 ;;		_LcInit
  9436 ;;		_LcClear
  9437 ;;		_LcCursorOn
  9438 ;;		_LcGotoXY
  9439 ;;		_LcPutChar
  9440 ;; This function uses a non-reentrant model
  9441 ;;
  9442                           
  9443                           	psect	text70
  9444  0017CA                     __ptext70:
  9445                           	callstack 0
  9446  0017CA                     _WaitForBusy:
  9447                           	callstack 21
  9448                           
  9449                           ;LcTLCD.c: 235:  (TRISCbits.RC0 = TRISCbits.RC1 = TRISCbits.RC2 = TRISCbits.RC3 = 1);
  9450                           
  9451                           ; BSR set to: 1
  9452                           ;incstack = 0
  9453  0017CA  8694               	bsf	148,3,c	;volatile
  9454  0017CC  8494               	bsf	148,2,c	;volatile
  9455  0017CE  8294               	bsf	148,1,c	;volatile
  9456  0017D0  8094               	bsf	148,0,c	;volatile
  9457                           
  9458                           ;LcTLCD.c: 236:  (LATBbits.LATB3 = 0);
  9459  0017D2  968A               	bcf	138,3,c	;volatile
  9460                           
  9461                           ;LcTLCD.c: 237:  (LATBbits.LATB4 = 1);
  9462  0017D4  888A               	bsf	138,4,c	;volatile
  9463                           
  9464                           ;LcTLCD.c: 238:  TiResetTics(Timer);
  9465  0017D6  500F               	movf	_Timer^0,w,c
  9466  0017D8  EC1A  F00E         	call	_TiResetTics
  9467  0017DC                     l7304:
  9468                           
  9469                           ;LcTLCD.c: 240:   (LATBbits.LATB5 = 1);(LATBbits.LATB5 = 1);
  9470  0017DC  8A8A               	bsf	138,5,c	;volatile
  9471  0017DE  8A8A               	bsf	138,5,c	;volatile
  9472                           
  9473                           ;LcTLCD.c: 241:   Busy = (PORTCbits.RC1);
  9474  0017E0  0E00               	movlw	0
  9475  0017E2  B282               	btfsc	130,1,c	;volatile
  9476  0017E4  0E01               	movlw	1
  9477  0017E6  6E6C               	movwf	WaitForBusy@Busy^0,c
  9478                           
  9479                           ;LcTLCD.c: 242:   (LATBbits.LATB5 = 0);
  9480  0017E8  9A8A               	bcf	138,5,c	;volatile
  9481                           
  9482                           ;LcTLCD.c: 243:   (LATBbits.LATB5 = 0);
  9483  0017EA  9A8A               	bcf	138,5,c	;volatile
  9484                           
  9485                           ;LcTLCD.c: 244:   (LATBbits.LATB5 = 1);(LATBbits.LATB5 = 1);
  9486  0017EC  8A8A               	bsf	138,5,c	;volatile
  9487  0017EE  8A8A               	bsf	138,5,c	;volatile
  9488                           
  9489                           ;LcTLCD.c: 246:   (LATBbits.LATB5 = 0);
  9490  0017F0  9A8A               	bcf	138,5,c	;volatile
  9491                           
  9492                           ;LcTLCD.c: 247:   (LATBbits.LATB5 = 0);
  9493  0017F2  9A8A               	bcf	138,5,c	;volatile
  9494                           
  9495                           ;LcTLCD.c: 248:   if (TiGetTics(Timer)) break;
  9496  0017F4  500F               	movf	_Timer^0,w,c
  9497  0017F6  EC57  F00C         	call	_TiGetTics
  9498  0017FA  5065               	movf	?_TiGetTics^0,w,c
  9499  0017FC  1066               	iorwf	(?_TiGetTics+1)^0,w,c
  9500  0017FE  E001               	bz	l7326
  9501  001800  0012               	return	
  9502  001802                     l7326:
  9503                           
  9504                           ;LcTLCD.c: 249:  } while(Busy);
  9505  001802  506C               	movf	WaitForBusy@Busy^0,w,c
  9506  001804  E1EB               	bnz	l7304
  9507  001806  0012               	return		;funcret
  9508  001808                     __end_of_WaitForBusy:
  9509                           	callstack 0
  9510                           
  9511 ;; *************** function _TiGetTimer *****************
  9512 ;; Defined at:
  9513 ;;		line 97 in file "TiTTimer.c"
  9514 ;; Parameters:    Size  Location     Type
  9515 ;;		None
  9516 ;; Auto vars:     Size  Location     Type
  9517 ;;  counter         1   12[COMRAM] unsigned char 
  9518 ;; Return value:  Size  Location     Type
  9519 ;;                  1    wreg      unsigned char 
  9520 ;; Registers used:
  9521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9522 ;; Tracked objects:
  9523 ;;		On entry : 0/0
  9524 ;;		On exit  : 0/0
  9525 ;;		Unchanged: 0/0
  9526 ;; Data sizes:     COMRAM   BANK0   BANK1
  9527 ;;      Params:         0       0       0
  9528 ;;      Locals:         1       0       0
  9529 ;;      Temps:          1       0       0
  9530 ;;      Totals:         2       0       0
  9531 ;;Total ram usage:        2 bytes
  9532 ;; Hardware stack levels used: 1
  9533 ;; Hardware stack levels required when called: 3
  9534 ;; This function calls:
  9535 ;;		Nothing
  9536 ;; This function is called by:
  9537 ;;		_LcInit
  9538 ;;		_initADC
  9539 ;;		_initHora
  9540 ;;		_initMenu
  9541 ;;		_initSMS
  9542 ;;		_initSound
  9543 ;;		_initTeclat
  9544 ;; This function uses a non-reentrant model
  9545 ;;
  9546                           
  9547                           	psect	text71
  9548  0018E2                     __ptext71:
  9549                           	callstack 0
  9550  0018E2                     _TiGetTimer:
  9551                           	callstack 23
  9552                           
  9553                           ;TiTTimer.c: 98:  unsigned char counter=0;
  9554                           
  9555                           ;incstack = 0
  9556  0018E2  6A66               	clrf	TiGetTimer@counter^0,c
  9557                           
  9558                           ;TiTTimer.c: 99:  while (s_Timers[counter].b_busy==1) {
  9559  0018E4  D005               	goto	l7354
  9560  0018E6                     l7346:
  9561                           
  9562                           ;TiTTimer.c: 100:   counter++;
  9563  0018E6  2A66               	incf	TiGetTimer@counter^0,f,c
  9564                           
  9565                           ;TiTTimer.c: 101:   if (counter == 32) return -1;
  9566  0018E8  0E20               	movlw	32
  9567  0018EA  1866               	xorwf	TiGetTimer@counter^0,w,c
  9568  0018EC  E101               	bnz	l7354
  9569  0018EE  0CFF               	retlw	255
  9570  0018F0                     l7354:
  9571                           
  9572                           ;TiTTimer.c: 99:  while (s_Timers[counter].b_busy==1) {
  9573  0018F0  5066               	movf	TiGetTimer@counter^0,w,c
  9574  0018F2  D808               	call	PL24	;call to abstracted procedure
  9575  0018F4  04DE               	decf	postinc2,w,c
  9576  0018F6  E0F7               	bz	l7346
  9577                           
  9578                           ;TiTTimer.c: 103:  s_Timers[counter].b_busy=1;
  9579  0018F8  5066               	movf	TiGetTimer@counter^0,w,c
  9580  0018FA  D804               	call	PL24	;call to abstracted procedure
  9581  0018FC  0E01               	movlw	1
  9582  0018FE  6EDF               	movwf	indf2,c
  9583                           
  9584                           ;TiTTimer.c: 104:  return (counter);
  9585  001900  5066               	movf	TiGetTimer@counter^0,w,c
  9586  001902  0012               	return		;funcret
  9587  001904                     __end_of_TiGetTimer:
  9588                           	callstack 0
  9589  001904                     PL24:
  9590                           	callstack 27
  9591  001904  0D03               	mullw	3
  9592  001906  0E02               	movlw	low (_s_Timers+2)
  9593  001908  24F3               	addwf	243,w,c
  9594  00190A  6ED9               	movwf	fsr2l,c
  9595  00190C  0E01               	movlw	high (_s_Timers+2)
  9596  00190E  20F4               	addwfc	prodh,w,c
  9597  001910  6EDA               	movwf	fsr2h,c
  9598  001912  0012               	return	
  9599  001914                     __end_ofPL24:
  9600                           	callstack 0
  9601                           
  9602 ;; *************** function _Espera *****************
  9603 ;; Defined at:
  9604 ;;		line 183 in file "LcTLCD.c"
  9605 ;; Parameters:    Size  Location     Type
  9606 ;;  Timer           2   18[COMRAM] int 
  9607 ;;  ms              2   20[COMRAM] int 
  9608 ;; Auto vars:     Size  Location     Type
  9609 ;;		None
  9610 ;; Return value:  Size  Location     Type
  9611 ;;                  1    wreg      void 
  9612 ;; Registers used:
  9613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9614 ;; Tracked objects:
  9615 ;;		On entry : 0/0
  9616 ;;		On exit  : 0/0
  9617 ;;		Unchanged: 0/0
  9618 ;; Data sizes:     COMRAM   BANK0   BANK1
  9619 ;;      Params:         4       0       0
  9620 ;;      Locals:         0       0       0
  9621 ;;      Temps:          2       0       0
  9622 ;;      Totals:         6       0       0
  9623 ;;Total ram usage:        6 bytes
  9624 ;; Hardware stack levels used: 1
  9625 ;; Hardware stack levels required when called: 4
  9626 ;; This function calls:
  9627 ;;		_TiGetTics
  9628 ;;		_TiResetTics
  9629 ;; This function is called by:
  9630 ;;		_LcInit
  9631 ;;		_LcClear
  9632 ;; This function uses a non-reentrant model
  9633 ;;
  9634                           
  9635                           	psect	text72
  9636  0019D0                     __ptext72:
  9637                           	callstack 0
  9638  0019D0                     _Espera:
  9639                           	callstack 19
  9640                           
  9641                           ;LcTLCD.c: 184:  TiResetTics(Timer);
  9642                           
  9643                           ;incstack = 0
  9644  0019D0  506C               	movf	Espera@Timer^0,w,c
  9645  0019D2  EC1A  F00E         	call	_TiResetTics
  9646  0019D6                     l7280:
  9647  0019D6  C06E  F070         	movff	Espera@ms,??_Espera
  9648  0019DA  C06F  F071         	movff	Espera@ms+1,??_Espera+1
  9649  0019DE  90D8               	bcf	status,0,c
  9650  0019E0  3670               	rlcf	??_Espera^0,f,c
  9651  0019E2  3671               	rlcf	(??_Espera+1)^0,f,c
  9652  0019E4  90D8               	bcf	status,0,c
  9653  0019E6  3670               	rlcf	??_Espera^0,f,c
  9654  0019E8  3671               	rlcf	(??_Espera+1)^0,f,c
  9655  0019EA  506C               	movf	Espera@Timer^0,w,c
  9656  0019EC  EC57  F00C         	call	_TiGetTics
  9657  0019F0  5070               	movf	??_Espera^0,w,c
  9658  0019F2  5C65               	subwf	?_TiGetTics^0,w,c
  9659  0019F4  5071               	movf	(??_Espera+1)^0,w,c
  9660  0019F6  5866               	subwfb	(?_TiGetTics+1)^0,w,c
  9661  0019F8  E3EE               	bnc	l7280
  9662  0019FA  0012               	return		;funcret
  9663  0019FC                     __end_of_Espera:
  9664                           	callstack 0
  9665                           
  9666 ;; *************** function _TiResetTics *****************
  9667 ;; Defined at:
  9668 ;;		line 107 in file "TiTTimer.c"
  9669 ;; Parameters:    Size  Location     Type
  9670 ;;  Handle          1    wreg     unsigned char 
  9671 ;; Auto vars:     Size  Location     Type
  9672 ;;  Handle          1   11[COMRAM] unsigned char 
  9673 ;; Return value:  Size  Location     Type
  9674 ;;                  1    wreg      void 
  9675 ;; Registers used:
  9676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9677 ;; Tracked objects:
  9678 ;;		On entry : 0/1
  9679 ;;		On exit  : 0/0
  9680 ;;		Unchanged: 0/0
  9681 ;; Data sizes:     COMRAM   BANK0   BANK1
  9682 ;;      Params:         0       0       0
  9683 ;;      Locals:         1       0       0
  9684 ;;      Temps:          0       0       0
  9685 ;;      Totals:         1       0       0
  9686 ;;Total ram usage:        1 bytes
  9687 ;; Hardware stack levels used: 1
  9688 ;; Hardware stack levels required when called: 3
  9689 ;; This function calls:
  9690 ;;		Nothing
  9691 ;; This function is called by:
  9692 ;;		_Espera
  9693 ;;		_WaitForBusy
  9694 ;;		_initADC
  9695 ;;		_motorADC
  9696 ;;		_motorMicro
  9697 ;;		_initHora
  9698 ;;		_actHora
  9699 ;;		_motorHora
  9700 ;;		_initMenu
  9701 ;;		_changeMenu
  9702 ;;		_showLCD_Marq
  9703 ;;		_initSMS
  9704 ;;		_manageKeySMS
  9705 ;;		_initSound
  9706 ;;		_pressSound
  9707 ;;		_playMelody
  9708 ;;		_motorSound
  9709 ;;		_motorMelody
  9710 ;;		_initTeclat
  9711 ;;		_checkFila
  9712 ;;		_motorTeclat
  9713 ;; This function uses a non-reentrant model
  9714 ;;
  9715                           
  9716                           	psect	text73
  9717  001C34                     __ptext73:
  9718                           	callstack 0
  9719  001C34                     _TiResetTics:
  9720                           	callstack 21
  9721                           
  9722                           ;incstack = 0
  9723                           ;TiResetTics@Handle stored from wreg
  9724  001C34  6E65               	movwf	TiResetTics@Handle^0,c
  9725                           
  9726                           ;TiTTimer.c: 109:  s_Timers[Handle].h_TicsInicials=h_Tics;
  9727  001C36  5065               	movf	TiResetTics@Handle^0,w,c
  9728  001C38  EC69  F00C         	call	PL40	;call to abstracted procedure
  9729  001C3C  C00D  FFDE         	movff	_h_Tics,postinc2
  9730  001C40  C00E  FFDD         	movff	_h_Tics+1,postdec2
  9731  001C44  0012               	return		;funcret
  9732  001C46                     __end_of_TiResetTics:
  9733                           	callstack 0
  9734                           
  9735 ;; *************** function _TiGetTics *****************
  9736 ;; Defined at:
  9737 ;;		line 114 in file "TiTTimer.c"
  9738 ;; Parameters:    Size  Location     Type
  9739 ;;  Handle          1    wreg     unsigned char 
  9740 ;; Auto vars:     Size  Location     Type
  9741 ;;  Handle          1   15[COMRAM] unsigned char 
  9742 ;;  actual          2   16[COMRAM] volatile unsigned int 
  9743 ;; Return value:  Size  Location     Type
  9744 ;;                  2   11[COMRAM] unsigned int 
  9745 ;; Registers used:
  9746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9747 ;; Tracked objects:
  9748 ;;		On entry : 0/1
  9749 ;;		On exit  : 0/0
  9750 ;;		Unchanged: 0/0
  9751 ;; Data sizes:     COMRAM   BANK0   BANK1
  9752 ;;      Params:         2       0       0
  9753 ;;      Locals:         3       0       0
  9754 ;;      Temps:          2       0       0
  9755 ;;      Totals:         7       0       0
  9756 ;;Total ram usage:        7 bytes
  9757 ;; Hardware stack levels used: 1
  9758 ;; Hardware stack levels required when called: 3
  9759 ;; This function calls:
  9760 ;;		Nothing
  9761 ;; This function is called by:
  9762 ;;		_Espera
  9763 ;;		_WaitForBusy
  9764 ;;		_motorADC
  9765 ;;		_motorMicro
  9766 ;;		_motorHora
  9767 ;;		_showLCD_Marq
  9768 ;;		_motorMenu
  9769 ;;		_manageLetter
  9770 ;;		_motorSound
  9771 ;;		_motorMelody
  9772 ;;		_motorTeclat
  9773 ;; This function uses a non-reentrant model
  9774 ;;
  9775                           
  9776                           	psect	text74
  9777  0018AE                     __ptext74:
  9778                           	callstack 0
  9779  0018AE                     _TiGetTics:
  9780                           	callstack 21
  9781                           
  9782                           ;incstack = 0
  9783                           ;TiGetTics@Handle stored from wreg
  9784  0018AE  6E69               	movwf	TiGetTics@Handle^0,c
  9785                           
  9786                           ;TiTTimer.c: 115: volatile unsigned int actual;;TiTTimer.c: 116:  actual=h_Tics;
  9787  0018B0  C00D  F06A         	movff	_h_Tics,TiGetTics@actual	;volatile
  9788  0018B4  C00E  F06B         	movff	_h_Tics+1,TiGetTics@actual+1	;volatile
  9789                           
  9790                           ;TiTTimer.c: 117:  return (actual-(s_Timers[Handle].h_TicsInicials));
  9791  0018B8  5069               	movf	TiGetTics@Handle^0,w,c
  9792  0018BA  D80B               	call	PL40	;call to abstracted procedure
  9793  0018BC  CFDE F067          	movff	postinc2,??_TiGetTics
  9794  0018C0  CFDD F068          	movff	postdec2,??_TiGetTics+1
  9795  0018C4  5067               	movf	??_TiGetTics^0,w,c
  9796  0018C6  5C6A               	subwf	TiGetTics@actual^0,w,c	;volatile
  9797  0018C8  6E65               	movwf	?_TiGetTics^0,c
  9798  0018CA  5068               	movf	(??_TiGetTics+1)^0,w,c
  9799  0018CC  586B               	subwfb	(TiGetTics@actual+1)^0,w,c	;volatile
  9800  0018CE  6E66               	movwf	(?_TiGetTics+1)^0,c
  9801  0018D0  0012               	return		;funcret
  9802  0018D2                     __end_of_TiGetTics:
  9803                           	callstack 0
  9804  0018D2                     PL40:
  9805                           	callstack 21
  9806  0018D2  0D03               	mullw	3
  9807  0018D4  0E00               	movlw	low _s_Timers
  9808  0018D6  24F3               	addwf	243,w,c
  9809  0018D8  6ED9               	movwf	fsr2l,c
  9810  0018DA  0E01               	movlw	high _s_Timers
  9811  0018DC  20F4               	addwfc	prodh,w,c
  9812  0018DE  6EDA               	movwf	fsr2h,c
  9813  0018E0  0012               	return	
  9814  0018E2                     __end_ofPL40:
  9815                           	callstack 0
  9816                           
  9817 ;; *************** function _EscriuPrimeraOrdre *****************
  9818 ;; Defined at:
  9819 ;;		line 252 in file "LcTLCD.c"
  9820 ;; Parameters:    Size  Location     Type
  9821 ;;  ordre           1    wreg     unsigned char 
  9822 ;; Auto vars:     Size  Location     Type
  9823 ;;  ordre           1   12[COMRAM] unsigned char 
  9824 ;; Return value:  Size  Location     Type
  9825 ;;                  1    wreg      void 
  9826 ;; Registers used:
  9827 ;;		wreg, status,2, status,0
  9828 ;; Tracked objects:
  9829 ;;		On entry : 0/1
  9830 ;;		On exit  : 0/0
  9831 ;;		Unchanged: 0/0
  9832 ;; Data sizes:     COMRAM   BANK0   BANK1
  9833 ;;      Params:         0       0       0
  9834 ;;      Locals:         1       0       0
  9835 ;;      Temps:          1       0       0
  9836 ;;      Totals:         2       0       0
  9837 ;;Total ram usage:        2 bytes
  9838 ;; Hardware stack levels used: 1
  9839 ;; Hardware stack levels required when called: 3
  9840 ;; This function calls:
  9841 ;;		Nothing
  9842 ;; This function is called by:
  9843 ;;		_LcInit
  9844 ;; This function uses a non-reentrant model
  9845 ;;
  9846                           
  9847                           	psect	text75
  9848  0011BC                     __ptext75:
  9849                           	callstack 0
  9850  0011BC                     _EscriuPrimeraOrdre:
  9851                           	callstack 26
  9852                           
  9853                           ;incstack = 0
  9854                           ;EscriuPrimeraOrdre@ordre stored from wreg
  9855  0011BC  6E66               	movwf	EscriuPrimeraOrdre@ordre^0,c
  9856                           
  9857                           ;LcTLCD.c: 254:  (TRISCbits.RC0 = TRISCbits.RC1 = TRISCbits.RC2 = TRISCbits.RC3 = 0); (L
      +                          ATBbits.LATB3 = 0); (LATBbits.LATB4 = 0);
  9858  0011BE  9694               	bcf	148,3,c	;volatile
  9859                           
  9860                           ;LcTLCD.c: 255:  (LATBbits.LATB5 = 1); (LATBbits.LATB5 = 1);
  9861  0011C0  D82F               	call	PL46	;call to abstracted procedure
  9862  0011C2  8A8A               	bsf	138,5,c	;volatile
  9863                           
  9864                           ;LcTLCD.c: 256:   (LATCbits.LATC0 = (ordre & 0x08 ? 1 : 0));
  9865  0011C4  A666               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  9866  0011C6  D003               	goto	u6690
  9867  0011C8  6A65               	clrf	??_EscriuPrimeraOrdre^0,c
  9868  0011CA  2A65               	incf	??_EscriuPrimeraOrdre^0,f,c
  9869  0011CC  D001               	goto	u6708
  9870  0011CE                     u6690:
  9871  0011CE  6A65               	clrf	??_EscriuPrimeraOrdre^0,c
  9872  0011D0                     u6708:
  9873  0011D0  508B               	movf	139,w,c	;volatile
  9874  0011D2  1865               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9875  0011D4  0BFE               	andlw	-2
  9876  0011D6  1865               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9877  0011D8  6E8B               	movwf	139,c	;volatile
  9878                           
  9879                           ;LcTLCD.c: 257:   (LATCbits.LATC1 = (ordre & 0x04 ? 1 : 0));
  9880  0011DA  A466               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  9881  0011DC  D003               	goto	u6710
  9882  0011DE  6A65               	clrf	??_EscriuPrimeraOrdre^0,c
  9883  0011E0  2A65               	incf	??_EscriuPrimeraOrdre^0,f,c
  9884  0011E2  D001               	goto	u6728
  9885  0011E4                     u6710:
  9886  0011E4  6A65               	clrf	??_EscriuPrimeraOrdre^0,c
  9887  0011E6                     u6728:
  9888  0011E6  4665               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9889  0011E8  508B               	movf	139,w,c	;volatile
  9890  0011EA  1865               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9891  0011EC  0BFD               	andlw	-3
  9892  0011EE  1865               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9893  0011F0  6E8B               	movwf	139,c	;volatile
  9894                           
  9895                           ;LcTLCD.c: 258:   (LATCbits.LATC2 = (ordre & 0x02 ? 1 : 0));
  9896  0011F2  A266               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  9897  0011F4  D003               	goto	u6730
  9898  0011F6  6A65               	clrf	??_EscriuPrimeraOrdre^0,c
  9899  0011F8  2A65               	incf	??_EscriuPrimeraOrdre^0,f,c
  9900  0011FA  D001               	goto	u6748
  9901  0011FC                     u6730:
  9902  0011FC  6A65               	clrf	??_EscriuPrimeraOrdre^0,c
  9903  0011FE                     u6748:
  9904  0011FE  D817               	call	PL86	;call to abstracted procedure
  9905  001200  0BFB               	andlw	-5
  9906  001202  1865               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9907  001204  6E8B               	movwf	139,c	;volatile
  9908                           
  9909                           ;LcTLCD.c: 259:   (LATCbits.LATC3 = (ordre & 0x01 ? 1 : 0));
  9910  001206  A066               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  9911  001208  D003               	goto	u6750
  9912  00120A  6A65               	clrf	??_EscriuPrimeraOrdre^0,c
  9913  00120C  2A65               	incf	??_EscriuPrimeraOrdre^0,f,c
  9914  00120E  D001               	goto	u6768
  9915  001210                     u6750:
  9916  001210  6A65               	clrf	??_EscriuPrimeraOrdre^0,c
  9917  001212                     u6768:
  9918  001212  4665               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9919  001214  D80C               	call	PL86	;call to abstracted procedure
  9920  001216  0BF7               	andlw	-9
  9921  001218  1865               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9922  00121A  6E8B               	movwf	139,c	;volatile
  9923                           
  9924                           ;LcTLCD.c: 260:  (LATBbits.LATB5 = 0);
  9925  00121C  9A8A               	bcf	138,5,c	;volatile
  9926  00121E  0012               	return		;funcret
  9927  001220                     __end_of_EscriuPrimeraOrdre:
  9928                           	callstack 0
  9929  001220                     PL46:
  9930                           	callstack 20
  9931  001220  9494               	bcf	148,2,c	;volatile
  9932  001222  9294               	bcf	148,1,c	;volatile
  9933  001224  9094               	bcf	148,0,c	;volatile
  9934  001226  968A               	bcf	138,3,c	;volatile
  9935  001228  988A               	bcf	138,4,c	;volatile
  9936  00122A  8A8A               	bsf	138,5,c	;volatile
  9937  00122C  0012               	return	
  9938  00122E                     __end_ofPL46:
  9939                           	callstack 0
  9940  00122E                     PL86:
  9941                           	callstack 26
  9942  00122E  4665               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9943  001230  4665               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  9944  001232  508B               	movf	139,w,c	;volatile
  9945  001234  1865               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  9946  001236  0012               	return	
  9947  001238                     __end_ofPL86:
  9948                           	callstack 0
  9949                           
  9950 ;; *************** function _CantaIR *****************
  9951 ;; Defined at:
  9952 ;;		line 202 in file "LcTLCD.c"
  9953 ;; Parameters:    Size  Location     Type
  9954 ;;  IR              1    wreg     unsigned char 
  9955 ;; Auto vars:     Size  Location     Type
  9956 ;;  IR              1   13[COMRAM] unsigned char 
  9957 ;; Return value:  Size  Location     Type
  9958 ;;                  1    wreg      void 
  9959 ;; Registers used:
  9960 ;;		wreg, status,2, status,0, cstack
  9961 ;; Tracked objects:
  9962 ;;		On entry : 0/1
  9963 ;;		On exit  : 0/0
  9964 ;;		Unchanged: 0/0
  9965 ;; Data sizes:     COMRAM   BANK0   BANK1
  9966 ;;      Params:         0       0       0
  9967 ;;      Locals:         1       0       0
  9968 ;;      Temps:          0       0       0
  9969 ;;      Totals:         1       0       0
  9970 ;;Total ram usage:        1 bytes
  9971 ;; Hardware stack levels used: 1
  9972 ;; Hardware stack levels required when called: 4
  9973 ;; This function calls:
  9974 ;;		_CantaPartAlta
  9975 ;;		_CantaPartBaixa
  9976 ;; This function is called by:
  9977 ;;		_LcInit
  9978 ;;		_LcClear
  9979 ;;		_LcCursorOn
  9980 ;;		_LcGotoXY
  9981 ;; This function uses a non-reentrant model
  9982 ;;
  9983                           
  9984                           	psect	text76
  9985  001B1E                     __ptext76:
  9986                           	callstack 0
  9987  001B1E                     _CantaIR:
  9988                           	callstack 20
  9989                           
  9990                           ;incstack = 0
  9991                           ;CantaIR@IR stored from wreg
  9992  001B1E  6E67               	movwf	CantaIR@IR^0,c
  9993                           
  9994                           ;LcTLCD.c: 203:  (TRISCbits.RC0 = TRISCbits.RC1 = TRISCbits.RC2 = TRISCbits.RC3 = 0);
  9995  001B20  9694               	bcf	148,3,c	;volatile
  9996                           
  9997                           ;LcTLCD.c: 204:  (LATBbits.LATB3 = 0);
  9998                           
  9999                           ;LcTLCD.c: 205:  (LATBbits.LATB4 = 0);
 10000                           
 10001                           ;LcTLCD.c: 206:  (LATBbits.LATB5 = 1);
 10002  001B22  EC10  F009         	call	PL46	;call to abstracted procedure
 10003                           
 10004                           ;LcTLCD.c: 207:  CantaPartAlta(IR);
 10005  001B26  5067               	movf	CantaIR@IR^0,w,c
 10006  001B28  EC25  F00A         	call	_CantaPartAlta
 10007                           
 10008                           ;LcTLCD.c: 208:  (LATBbits.LATB5 = 1);
 10009                           
 10010                           ;LcTLCD.c: 209:  (LATBbits.LATB5 = 0);
 10011                           
 10012                           ;LcTLCD.c: 210:  (LATBbits.LATB5 = 0);
 10013                           
 10014                           ;LcTLCD.c: 211:  (LATBbits.LATB5 = 1);
 10015  001B2C  EC1B  F00C         	call	PL84	;call to abstracted procedure
 10016                           
 10017                           ;LcTLCD.c: 212:  CantaPartBaixa(IR);
 10018  001B30  5067               	movf	CantaIR@IR^0,w,c
 10019  001B32  ECF2  F009         	call	_CantaPartBaixa
 10020                           
 10021                           ;LcTLCD.c: 213:  (LATBbits.LATB5 = 1);
 10022                           
 10023                           ;LcTLCD.c: 214:  (LATBbits.LATB5 = 0);
 10024                           
 10025                           ;LcTLCD.c: 215:  (TRISCbits.RC0 = TRISCbits.RC1 = TRISCbits.RC2 = TRISCbits.RC3 = 1);
 10026  001B36  EF14  F00C         	goto	PL42	;call to abstracted procedure
 10027  001B3A                     __end_of_CantaIR:
 10028                           	callstack 0
 10029                           
 10030 ;; *************** function _CantaPartBaixa *****************
 10031 ;; Defined at:
 10032 ;;		line 195 in file "LcTLCD.c"
 10033 ;; Parameters:    Size  Location     Type
 10034 ;;  c               1    wreg     unsigned char 
 10035 ;; Auto vars:     Size  Location     Type
 10036 ;;  c               1   12[COMRAM] unsigned char 
 10037 ;; Return value:  Size  Location     Type
 10038 ;;                  1    wreg      void 
 10039 ;; Registers used:
 10040 ;;		wreg, status,2, status,0
 10041 ;; Tracked objects:
 10042 ;;		On entry : 0/1
 10043 ;;		On exit  : 0/0
 10044 ;;		Unchanged: 0/0
 10045 ;; Data sizes:     COMRAM   BANK0   BANK1
 10046 ;;      Params:         0       0       0
 10047 ;;      Locals:         1       0       0
 10048 ;;      Temps:          1       0       0
 10049 ;;      Totals:         2       0       0
 10050 ;;Total ram usage:        2 bytes
 10051 ;; Hardware stack levels used: 1
 10052 ;; Hardware stack levels required when called: 3
 10053 ;; This function calls:
 10054 ;;		Nothing
 10055 ;; This function is called by:
 10056 ;;		_CantaIR
 10057 ;;		_CantaData
 10058 ;; This function uses a non-reentrant model
 10059 ;;
 10060                           
 10061                           	psect	text77
 10062  0013E4                     __ptext77:
 10063                           	callstack 0
 10064  0013E4                     _CantaPartBaixa:
 10065                           	callstack 20
 10066                           
 10067                           ;incstack = 0
 10068                           ;CantaPartBaixa@c stored from wreg
 10069  0013E4  6E66               	movwf	CantaPartBaixa@c^0,c
 10070                           
 10071                           ;LcTLCD.c: 196:   (LATCbits.LATC0 = (c & 0x08 ? 1 : 0));
 10072  0013E6  A666               	btfss	CantaPartBaixa@c^0,3,c
 10073  0013E8  D003               	goto	u6120
 10074  0013EA  6A65               	clrf	??_CantaPartBaixa^0,c
 10075  0013EC  2A65               	incf	??_CantaPartBaixa^0,f,c
 10076  0013EE  D001               	goto	u6138
 10077  0013F0                     u6120:
 10078  0013F0  6A65               	clrf	??_CantaPartBaixa^0,c
 10079  0013F2                     u6138:
 10080  0013F2  508B               	movf	139,w,c	;volatile
 10081  0013F4  1865               	xorwf	??_CantaPartBaixa^0,w,c
 10082  0013F6  0BFE               	andlw	-2
 10083  0013F8  1865               	xorwf	??_CantaPartBaixa^0,w,c
 10084  0013FA  6E8B               	movwf	139,c	;volatile
 10085                           
 10086                           ;LcTLCD.c: 197:   (LATCbits.LATC1 = (c & 0x04 ? 1 : 0));
 10087  0013FC  A466               	btfss	CantaPartBaixa@c^0,2,c
 10088  0013FE  D003               	goto	u6140
 10089  001400  6A65               	clrf	??_CantaPartBaixa^0,c
 10090  001402  2A65               	incf	??_CantaPartBaixa^0,f,c
 10091  001404  D001               	goto	u6158
 10092  001406                     u6140:
 10093  001406  6A65               	clrf	??_CantaPartBaixa^0,c
 10094  001408                     u6158:
 10095  001408  4665               	rlncf	??_CantaPartBaixa^0,f,c
 10096  00140A  508B               	movf	139,w,c	;volatile
 10097  00140C  1865               	xorwf	??_CantaPartBaixa^0,w,c
 10098  00140E  0BFD               	andlw	-3
 10099  001410  1865               	xorwf	??_CantaPartBaixa^0,w,c
 10100  001412  6E8B               	movwf	139,c	;volatile
 10101                           
 10102                           ;LcTLCD.c: 198:   (LATCbits.LATC2 = (c & 0x02 ? 1 : 0));
 10103  001414  A266               	btfss	CantaPartBaixa@c^0,1,c
 10104  001416  D003               	goto	u6160
 10105  001418  6A65               	clrf	??_CantaPartBaixa^0,c
 10106  00141A  2A65               	incf	??_CantaPartBaixa^0,f,c
 10107  00141C  D001               	goto	u6178
 10108  00141E                     u6160:
 10109  00141E  6A65               	clrf	??_CantaPartBaixa^0,c
 10110  001420                     u6178:
 10111  001420  D80F               	call	PL82	;call to abstracted procedure
 10112  001422  0BFB               	andlw	-5
 10113  001424  1865               	xorwf	??_CantaPartBaixa^0,w,c
 10114  001426  6E8B               	movwf	139,c	;volatile
 10115                           
 10116                           ;LcTLCD.c: 199:   (LATCbits.LATC3 = (c & 0x01 ? 1 : 0));
 10117  001428  A066               	btfss	CantaPartBaixa@c^0,0,c
 10118  00142A  D003               	goto	u6180
 10119  00142C  6A65               	clrf	??_CantaPartBaixa^0,c
 10120  00142E  2A65               	incf	??_CantaPartBaixa^0,f,c
 10121  001430  D001               	goto	u6198
 10122  001432                     u6180:
 10123  001432  6A65               	clrf	??_CantaPartBaixa^0,c
 10124  001434                     u6198:
 10125  001434  4665               	rlncf	??_CantaPartBaixa^0,f,c
 10126  001436  D804               	call	PL82	;call to abstracted procedure
 10127  001438  0BF7               	andlw	-9
 10128  00143A  1865               	xorwf	??_CantaPartBaixa^0,w,c
 10129  00143C  6E8B               	movwf	139,c	;volatile
 10130  00143E  0012               	return		;funcret
 10131  001440                     __end_of_CantaPartBaixa:
 10132                           	callstack 0
 10133  001440                     PL82:
 10134                           	callstack 20
 10135  001440  4665               	rlncf	??_CantaPartBaixa^0,f,c
 10136  001442  4665               	rlncf	??_CantaPartBaixa^0,f,c
 10137  001444  508B               	movf	139,w,c	;volatile
 10138  001446  1865               	xorwf	??_CantaPartBaixa^0,w,c
 10139  001448  0012               	return	
 10140  00144A                     __end_ofPL82:
 10141                           	callstack 0
 10142                           
 10143 ;; *************** function _CantaPartAlta *****************
 10144 ;; Defined at:
 10145 ;;		line 188 in file "LcTLCD.c"
 10146 ;; Parameters:    Size  Location     Type
 10147 ;;  c               1    wreg     unsigned char 
 10148 ;; Auto vars:     Size  Location     Type
 10149 ;;  c               1   12[COMRAM] unsigned char 
 10150 ;; Return value:  Size  Location     Type
 10151 ;;                  1    wreg      void 
 10152 ;; Registers used:
 10153 ;;		wreg, status,2, status,0
 10154 ;; Tracked objects:
 10155 ;;		On entry : 0/1
 10156 ;;		On exit  : 0/0
 10157 ;;		Unchanged: 0/0
 10158 ;; Data sizes:     COMRAM   BANK0   BANK1
 10159 ;;      Params:         0       0       0
 10160 ;;      Locals:         1       0       0
 10161 ;;      Temps:          1       0       0
 10162 ;;      Totals:         2       0       0
 10163 ;;Total ram usage:        2 bytes
 10164 ;; Hardware stack levels used: 1
 10165 ;; Hardware stack levels required when called: 3
 10166 ;; This function calls:
 10167 ;;		Nothing
 10168 ;; This function is called by:
 10169 ;;		_CantaIR
 10170 ;;		_CantaData
 10171 ;; This function uses a non-reentrant model
 10172 ;;
 10173                           
 10174                           	psect	text78
 10175  00144A                     __ptext78:
 10176                           	callstack 0
 10177  00144A                     _CantaPartAlta:
 10178                           	callstack 20
 10179                           
 10180                           ;incstack = 0
 10181                           ;CantaPartAlta@c stored from wreg
 10182  00144A  6E66               	movwf	CantaPartAlta@c^0,c
 10183                           
 10184                           ;LcTLCD.c: 189:   (LATCbits.LATC0 = (c & 0x80 ? 1 : 0));
 10185  00144C  AE66               	btfss	CantaPartAlta@c^0,7,c
 10186  00144E  D003               	goto	u6040
 10187  001450  6A65               	clrf	??_CantaPartAlta^0,c
 10188  001452  2A65               	incf	??_CantaPartAlta^0,f,c
 10189  001454  D001               	goto	u6058
 10190  001456                     u6040:
 10191  001456  6A65               	clrf	??_CantaPartAlta^0,c
 10192  001458                     u6058:
 10193  001458  508B               	movf	139,w,c	;volatile
 10194  00145A  1865               	xorwf	??_CantaPartAlta^0,w,c
 10195  00145C  0BFE               	andlw	-2
 10196  00145E  1865               	xorwf	??_CantaPartAlta^0,w,c
 10197  001460  6E8B               	movwf	139,c	;volatile
 10198                           
 10199                           ;LcTLCD.c: 190:   (LATCbits.LATC1 = (c & 0x40 ? 1 : 0));
 10200  001462  AC66               	btfss	CantaPartAlta@c^0,6,c
 10201  001464  D003               	goto	u6060
 10202  001466  6A65               	clrf	??_CantaPartAlta^0,c
 10203  001468  2A65               	incf	??_CantaPartAlta^0,f,c
 10204  00146A  D001               	goto	u6078
 10205  00146C                     u6060:
 10206  00146C  6A65               	clrf	??_CantaPartAlta^0,c
 10207  00146E                     u6078:
 10208  00146E  4665               	rlncf	??_CantaPartAlta^0,f,c
 10209  001470  508B               	movf	139,w,c	;volatile
 10210  001472  1865               	xorwf	??_CantaPartAlta^0,w,c
 10211  001474  0BFD               	andlw	-3
 10212  001476  1865               	xorwf	??_CantaPartAlta^0,w,c
 10213  001478  6E8B               	movwf	139,c	;volatile
 10214                           
 10215                           ;LcTLCD.c: 191:   (LATCbits.LATC2 = (c & 0x20 ? 1 : 0));
 10216  00147A  AA66               	btfss	CantaPartAlta@c^0,5,c
 10217  00147C  D003               	goto	u6080
 10218  00147E  6A65               	clrf	??_CantaPartAlta^0,c
 10219  001480  2A65               	incf	??_CantaPartAlta^0,f,c
 10220  001482  D001               	goto	u6098
 10221  001484                     u6080:
 10222  001484  6A65               	clrf	??_CantaPartAlta^0,c
 10223  001486                     u6098:
 10224  001486  D80F               	call	PL92	;call to abstracted procedure
 10225  001488  0BFB               	andlw	-5
 10226  00148A  1865               	xorwf	??_CantaPartAlta^0,w,c
 10227  00148C  6E8B               	movwf	139,c	;volatile
 10228                           
 10229                           ;LcTLCD.c: 192:   (LATCbits.LATC3 = (c & 0x10 ? 1 : 0));
 10230  00148E  A866               	btfss	CantaPartAlta@c^0,4,c
 10231  001490  D003               	goto	u6100
 10232  001492  6A65               	clrf	??_CantaPartAlta^0,c
 10233  001494  2A65               	incf	??_CantaPartAlta^0,f,c
 10234  001496  D001               	goto	u6118
 10235  001498                     u6100:
 10236  001498  6A65               	clrf	??_CantaPartAlta^0,c
 10237  00149A                     u6118:
 10238  00149A  4665               	rlncf	??_CantaPartAlta^0,f,c
 10239  00149C  D804               	call	PL92	;call to abstracted procedure
 10240  00149E  0BF7               	andlw	-9
 10241  0014A0  1865               	xorwf	??_CantaPartAlta^0,w,c
 10242  0014A2  6E8B               	movwf	139,c	;volatile
 10243  0014A4  0012               	return		;funcret
 10244  0014A6                     __end_of_CantaPartAlta:
 10245                           	callstack 0
 10246  0014A6                     PL92:
 10247                           	callstack 20
 10248  0014A6  4665               	rlncf	??_CantaPartAlta^0,f,c
 10249  0014A8  4665               	rlncf	??_CantaPartAlta^0,f,c
 10250  0014AA  508B               	movf	139,w,c	;volatile
 10251  0014AC  1865               	xorwf	??_CantaPartAlta^0,w,c
 10252  0014AE  0012               	return	
 10253  0014B0                     __end_ofPL92:
 10254                           	callstack 0
 10255                           
 10256 ;; *************** function _RSI_High *****************
 10257 ;; Defined at:
 10258 ;;		line 27 in file "main.c"
 10259 ;; Parameters:    Size  Location     Type
 10260 ;;		None
 10261 ;; Auto vars:     Size  Location     Type
 10262 ;;		None
 10263 ;; Return value:  Size  Location     Type
 10264 ;;                  1    wreg      void 
 10265 ;; Registers used:
 10266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10267 ;; Tracked objects:
 10268 ;;		On entry : 0/0
 10269 ;;		On exit  : 0/0
 10270 ;;		Unchanged: 0/0
 10271 ;; Data sizes:     COMRAM   BANK0   BANK1
 10272 ;;      Params:         0       0       0
 10273 ;;      Locals:         0       0       0
 10274 ;;      Temps:          4       0       0
 10275 ;;      Totals:         4       0       0
 10276 ;;Total ram usage:        4 bytes
 10277 ;; Hardware stack levels used: 1
 10278 ;; Hardware stack levels required when called: 2
 10279 ;; This function calls:
 10280 ;;		_RSI_Timer0
 10281 ;; This function is called by:
 10282 ;;		Interrupt level 2
 10283 ;; This function uses a non-reentrant model
 10284 ;;
 10285                           
 10286                           	psect	intcode
 10287  000008                     __pintcode:
 10288                           	callstack 0
 10289  000008                     _RSI_High:
 10290                           	callstack 18
 10291                           
 10292                           ;incstack = 0
 10293  000008  8274               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10294  00000A  CFD9 F061          	movff	fsr2l,??_RSI_High
 10295  00000E  CFDA F062          	movff	fsr2h,??_RSI_High+1
 10296  000012  CFF3 F063          	movff	prodl,??_RSI_High+2
 10297  000016  CFF4 F064          	movff	prodh,??_RSI_High+3
 10298                           
 10299                           ;main.c: 28:         motorTX();
 10300  00001A  B4F2               	btfsc	242,2,c	;volatile
 10301                           
 10302                           ;main.c: 30:         motorRX();
 10303  00001C  EC1C  F009         	call	_RSI_Timer0	;wreg free
 10304  000020  C064  FFF4         	movff	??_RSI_High+3,prodh
 10305  000024  C063  FFF3         	movff	??_RSI_High+2,prodl
 10306  000028  C062  FFDA         	movff	??_RSI_High+1,fsr2h
 10307  00002C  C061  FFD9         	movff	??_RSI_High,fsr2l
 10308  000030  9274               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10309  000032  0011               	retfie		f
 10310  000034                     __end_of_RSI_High:
 10311                           	callstack 0
 10312                           
 10313 ;; *************** function _RSI_Timer0 *****************
 10314 ;; Defined at:
 10315 ;;		line 49 in file "TiTTimer.c"
 10316 ;; Parameters:    Size  Location     Type
 10317 ;;		None
 10318 ;; Auto vars:     Size  Location     Type
 10319 ;;		None
 10320 ;; Return value:  Size  Location     Type
 10321 ;;                  1    wreg      void 
 10322 ;; Registers used:
 10323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10324 ;; Tracked objects:
 10325 ;;		On entry : 0/0
 10326 ;;		On exit  : 0/0
 10327 ;;		Unchanged: 0/0
 10328 ;; Data sizes:     COMRAM   BANK0   BANK1
 10329 ;;      Params:         0       0       0
 10330 ;;      Locals:         0       0       0
 10331 ;;      Temps:          1       0       0
 10332 ;;      Totals:         1       0       0
 10333 ;;Total ram usage:        1 bytes
 10334 ;; Hardware stack levels used: 1
 10335 ;; Hardware stack levels required when called: 1
 10336 ;; This function calls:
 10337 ;;		i2___wmul
 10338 ;; This function is called by:
 10339 ;;		_RSI_High
 10340 ;; This function uses a non-reentrant model
 10341 ;;
 10342                           
 10343                           	psect	text80
 10344  001238                     __ptext80:
 10345                           	callstack 0
 10346  001238                     _RSI_Timer0:
 10347                           	callstack 18
 10348                           
 10349                           ;TiTTimer.c: 52:      INTCONbits.TMR0IF = 0;
 10350                           
 10351                           ;incstack = 0
 10352  001238  94F2               	bcf	242,2,c	;volatile
 10353                           
 10354                           ;TiTTimer.c: 53:  TMR0L=6;
 10355  00123A  0E06               	movlw	6
 10356  00123C  6ED6               	movwf	214,c	;volatile
 10357                           
 10358                           ;TiTTimer.c: 54:  h_Tics++;
 10359  00123E  4A0D               	infsnz	_h_Tics^0,f,c
 10360  001240  2A0E               	incf	(_h_Tics+1)^0,f,c
 10361                           
 10362                           ;TiTTimer.c: 56:  if (h_Tics>=30000) {
 10363  001242  0E30               	movlw	48
 10364  001244  5C0D               	subwf	_h_Tics^0,w,c
 10365  001246  0E75               	movlw	117
 10366  001248  580E               	subwfb	(_h_Tics+1)^0,w,c
 10367  00124A  A0D8               	btfss	status,0,c
 10368  00124C  0012               	return	
 10369                           
 10370                           ;TiTTimer.c: 58:   for (counter=0;counter<32;counter++)
 10371  00124E  6A0B               	clrf	_counter@TiTTimer$F1024^0,c
 10372  001250  6A0C               	clrf	(_counter@TiTTimer$F1024+1)^0,c
 10373  001252                     i2l6346:
 10374  001252  BE0C               	btfsc	(_counter@TiTTimer$F1024+1)^0,7,c
 10375  001254  D005               	goto	i2l6350
 10376  001256  500C               	movf	(_counter@TiTTimer$F1024+1)^0,w,c
 10377  001258  E11E               	bnz	i2l567
 10378  00125A  0E20               	movlw	32
 10379  00125C  5C0B               	subwf	_counter@TiTTimer$F1024^0,w,c
 10380  00125E  E21B               	bc	i2l567
 10381  001260                     i2l6350:
 10382                           
 10383                           ;TiTTimer.c: 59:    if (s_Timers[counter].b_busy==1)
 10384  001260  D81D               	call	PL34	;call to abstracted procedure
 10385  001262  EC24  F00D         	call	i2___wmul	;wreg free
 10386  001266  0E02               	movlw	low (_s_Timers+2)
 10387  001268  245A               	addwf	?i2___wmul^0,w,c
 10388  00126A  6ED9               	movwf	fsr2l,c
 10389  00126C  0E01               	movlw	high (_s_Timers+2)
 10390  00126E  205B               	addwfc	(?i2___wmul+1)^0,w,c
 10391  001270  6EDA               	movwf	fsr2h,c
 10392  001272  04DE               	decf	postinc2,w,c
 10393  001274  E10D               	bnz	i2l6354
 10394                           
 10395                           ;TiTTimer.c: 60:     s_Timers[counter].h_TicsInicials -= h_Tics;
 10396  001276  D812               	call	PL34	;call to abstracted procedure
 10397  001278  EC24  F00D         	call	i2___wmul	;wreg free
 10398  00127C  0E00               	movlw	low _s_Timers
 10399  00127E  245A               	addwf	?i2___wmul^0,w,c
 10400  001280  6ED9               	movwf	fsr2l,c
 10401  001282  0E01               	movlw	high _s_Timers
 10402  001284  205B               	addwfc	(?i2___wmul+1)^0,w,c
 10403  001286  6EDA               	movwf	fsr2h,c
 10404  001288  500D               	movf	_h_Tics^0,w,c
 10405  00128A  5EDE               	subwf	postinc2,f,c
 10406  00128C  500E               	movf	(_h_Tics+1)^0,w,c
 10407  00128E  5ADD               	subwfb	postdec2,f,c
 10408  001290                     i2l6354:
 10409  001290  4A0B               	infsnz	_counter@TiTTimer$F1024^0,f,c
 10410  001292  2A0C               	incf	(_counter@TiTTimer$F1024+1)^0,f,c
 10411  001294  D7DE               	goto	i2l6346
 10412  001296                     i2l567:
 10413                           
 10414                           ;TiTTimer.c: 61:   h_Tics=0;
 10415  001296  6A0D               	clrf	_h_Tics^0,c
 10416  001298  6A0E               	clrf	(_h_Tics+1)^0,c
 10417  00129A  0012               	return		;funcret
 10418  00129C                     __end_of_RSI_Timer0:
 10419                           	callstack 0
 10420  00129C                     PL34:
 10421                           	callstack 18
 10422  00129C  C00B  F05A         	movff	_counter@TiTTimer$F1024,i2___wmul@multiplier
 10423  0012A0  C00C  F05B         	movff	_counter@TiTTimer$F1024+1,i2___wmul@multiplier+1
 10424  0012A4  6A5D               	clrf	(i2___wmul@multiplicand+1)^0,c
 10425  0012A6  0E03               	movlw	3
 10426  0012A8  6E5C               	movwf	i2___wmul@multiplicand^0,c
 10427  0012AA  0C03               	retlw	3
 10428  0012AC                     __end_ofPL34:
 10429                           	callstack 0
 10430                           
 10431 ;; *************** function i2___wmul *****************
 10432 ;; Defined at:
 10433 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
 10434 ;; Parameters:    Size  Location     Type
 10435 ;;  multiplier      2    0[COMRAM] unsigned int 
 10436 ;;  multiplicand    2    2[COMRAM] unsigned int 
 10437 ;; Auto vars:     Size  Location     Type
 10438 ;;  product         2    4[COMRAM] unsigned int 
 10439 ;; Return value:  Size  Location     Type
 10440 ;;                  2    0[COMRAM] unsigned int 
 10441 ;; Registers used:
 10442 ;;		wreg, status,2, status,0, prodl, prodh
 10443 ;; Tracked objects:
 10444 ;;		On entry : 0/0
 10445 ;;		On exit  : 0/0
 10446 ;;		Unchanged: 0/0
 10447 ;; Data sizes:     COMRAM   BANK0   BANK1
 10448 ;;      Params:         4       0       0
 10449 ;;      Locals:         2       0       0
 10450 ;;      Temps:          0       0       0
 10451 ;;      Totals:         6       0       0
 10452 ;;Total ram usage:        6 bytes
 10453 ;; Hardware stack levels used: 1
 10454 ;; This function calls:
 10455 ;;		Nothing
 10456 ;; This function is called by:
 10457 ;;		_RSI_Timer0
 10458 ;; This function uses a non-reentrant model
 10459 ;;
 10460                           
 10461                           	psect	text81
 10462  001A48                     __ptext81:
 10463                           	callstack 0
 10464  001A48                     i2___wmul:
 10465                           	callstack 18
 10466                           
 10467                           ;incstack = 0
 10468  001A48  505A               	movf	i2___wmul@multiplier^0,w,c
 10469  001A4A  025C               	mulwf	i2___wmul@multiplicand^0,c
 10470  001A4C  CFF3 F05E          	movff	prodl,i2___wmul@product
 10471  001A50  CFF4 F05F          	movff	prodh,i2___wmul@product+1
 10472  001A54  505A               	movf	i2___wmul@multiplier^0,w,c
 10473  001A56  025D               	mulwf	(i2___wmul@multiplicand+1)^0,c
 10474  001A58  50F3               	movf	243,w,c
 10475  001A5A  265F               	addwf	(i2___wmul@product+1)^0,f,c
 10476  001A5C  505B               	movf	(i2___wmul@multiplier+1)^0,w,c
 10477  001A5E  025C               	mulwf	i2___wmul@multiplicand^0,c
 10478  001A60  50F3               	movf	243,w,c
 10479  001A62  265F               	addwf	(i2___wmul@product+1)^0,f,c
 10480  001A64  C05E  F05A         	movff	i2___wmul@product,?i2___wmul
 10481  001A68  C05F  F05B         	movff	i2___wmul@product+1,?i2___wmul+1
 10482  001A6C  0012               	return		;funcret
 10483  001A6E                     __end_ofi2___wmul:
 10484                           	callstack 0
 10485                           
 10486                           	psect	rparam
 10487  0000                     
 10488                           	psect	temp
 10489  000074                     btemp:
 10490                           	callstack 0
 10491  000074                     	ds	1
 10492  0000                     int$flags	set	btemp
 10493  0000                     wtemp8	set	btemp+1
 10494  0000                     ttemp5	set	btemp+1
 10495  0000                     ttemp6	set	btemp+4
 10496  0000                     ttemp7	set	btemp+8
 10497                           
 10498                           	psect	idloc
 10499                           
 10500                           ;Config register IDLOC0 @ 0x200000
 10501                           ;	unspecified, using default values
 10502  200000                     	org	2097152
 10503  200000  FF                 	db	255
 10504                           
 10505                           ;Config register IDLOC1 @ 0x200001
 10506                           ;	unspecified, using default values
 10507  200001                     	org	2097153
 10508  200001  FF                 	db	255
 10509                           
 10510                           ;Config register IDLOC2 @ 0x200002
 10511                           ;	unspecified, using default values
 10512  200002                     	org	2097154
 10513  200002  FF                 	db	255
 10514                           
 10515                           ;Config register IDLOC3 @ 0x200003
 10516                           ;	unspecified, using default values
 10517  200003                     	org	2097155
 10518  200003  FF                 	db	255
 10519                           
 10520                           ;Config register IDLOC4 @ 0x200004
 10521                           ;	unspecified, using default values
 10522  200004                     	org	2097156
 10523  200004  FF                 	db	255
 10524                           
 10525                           ;Config register IDLOC5 @ 0x200005
 10526                           ;	unspecified, using default values
 10527  200005                     	org	2097157
 10528  200005  FF                 	db	255
 10529                           
 10530                           ;Config register IDLOC6 @ 0x200006
 10531                           ;	unspecified, using default values
 10532  200006                     	org	2097158
 10533  200006  FF                 	db	255
 10534                           
 10535                           ;Config register IDLOC7 @ 0x200007
 10536                           ;	unspecified, using default values
 10537  200007                     	org	2097159
 10538  200007  FF                 	db	255
 10539                           
 10540                           	psect	config
 10541                           
 10542                           ; Padding undefined space
 10543  300000                     	org	3145728
 10544  300000  FF                 	db	255
 10545                           
 10546                           ;Config register CONFIG1H @ 0x300001
 10547                           ;	Oscillator
 10548                           ;	OSC = INTIO2, Internal oscillator block, port function on RA6 and RA7
 10549                           ;	Fail-Safe Clock Monitor Enable bit
 10550                           ;	FCMEN = 0x0, unprogrammed default
 10551                           ;	Internal/External Oscillator Switchover bit
 10552                           ;	IESO = 0x0, unprogrammed default
 10553  300001                     	org	3145729
 10554  300001  08                 	db	8
 10555                           
 10556                           ;Config register CONFIG2L @ 0x300002
 10557                           ;	Power-up Timer Enable bit
 10558                           ;	PWRT = OFF, PWRT disabled
 10559                           ;	Brown-out Reset Enable bits
 10560                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
 10561                           ;	Brown-out Reset Voltage bits
 10562                           ;	BORV = 0x3, unprogrammed default
 10563  300002                     	org	3145730
 10564  300002  19                 	db	25
 10565                           
 10566                           ;Config register CONFIG2H @ 0x300003
 10567                           ;	Watchdog Timer Enable bit
 10568                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 10569                           ;	Watchdog Timer Postscale Select bits
 10570                           ;	WDTPS = 0xF, unprogrammed default
 10571  300003                     	org	3145731
 10572  300003  1E                 	db	30
 10573                           
 10574                           ; Padding undefined space
 10575  300004                     	org	3145732
 10576  300004  FF                 	db	255
 10577                           
 10578                           ;Config register CONFIG3H @ 0x300005
 10579                           ;	CCP2 MUX bit
 10580                           ;	CCP2MX = 0x1, unprogrammed default
 10581                           ;	PORTB A/D Enable bit
 10582                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
 10583                           ;	Low-Power Timer1 Oscillator Enable bit
 10584                           ;	LPT1OSC = 0x0, unprogrammed default
 10585                           ;	MCLR Pin Enable bit
 10586                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
 10587  300005                     	org	3145733
 10588  300005  01                 	db	1
 10589                           
 10590                           ;Config register CONFIG4L @ 0x300006
 10591                           ;	Stack Full/Underflow Reset Enable bit
 10592                           ;	STVREN = 0x1, unprogrammed default
 10593                           ;	Single-Supply ICSP Enable bit
 10594                           ;	LVP = OFF, Single-Supply ICSP disabled
 10595                           ;	Boot Block Size Select bits
 10596                           ;	BBSIZ = 0x0, unprogrammed default
 10597                           ;	Extended Instruction Set Enable bit
 10598                           ;	XINST = 0x0, unprogrammed default
 10599                           ;	Background Debugger Enable bit
 10600                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
 10601  300006                     	org	3145734
 10602  300006  81                 	db	129
 10603                           
 10604                           ; Padding undefined space
 10605  300007                     	org	3145735
 10606  300007  FF                 	db	255
 10607                           
 10608                           ;Config register CONFIG5L @ 0x300008
 10609                           ;	unspecified, using default values
 10610                           ;	Code Protection bit
 10611                           ;	CP0 = 0x1, unprogrammed default
 10612                           ;	Code Protection bit
 10613                           ;	CP1 = 0x1, unprogrammed default
 10614  300008                     	org	3145736
 10615  300008  03                 	db	3
 10616                           
 10617                           ;Config register CONFIG5H @ 0x300009
 10618                           ;	unspecified, using default values
 10619                           ;	Boot Block Code Protection bitProtect Boot
 10620                           ;	CPB = 0x1, unprogrammed default
 10621                           ;	Data EEPROM Code Protection bit
 10622                           ;	CPD = 0x1, unprogrammed default
 10623  300009                     	org	3145737
 10624  300009  C0                 	db	192
 10625                           
 10626                           ;Config register CONFIG6L @ 0x30000A
 10627                           ;	unspecified, using default values
 10628                           ;	Write Protection bit
 10629                           ;	WRT0 = 0x1, unprogrammed default
 10630                           ;	Write Protection bit
 10631                           ;	WRT1 = 0x1, unprogrammed default
 10632  30000A                     	org	3145738
 10633  30000A  03                 	db	3
 10634                           
 10635                           ;Config register CONFIG6H @ 0x30000B
 10636                           ;	unspecified, using default values
 10637                           ;	Configuration Register Write Protection bit
 10638                           ;	WRTC = 0x1, unprogrammed default
 10639                           ;	Boot Block Write Protection bit
 10640                           ;	WRTB = 0x1, unprogrammed default
 10641                           ;	Data EEPROM Write Protection bit
 10642                           ;	WRTD = 0x1, unprogrammed default
 10643  30000B                     	org	3145739
 10644  30000B  E0                 	db	224
 10645                           
 10646                           ;Config register CONFIG7L @ 0x30000C
 10647                           ;	unspecified, using default values
 10648                           ;	Table Read Protection bit
 10649                           ;	EBTR0 = 0x1, unprogrammed default
 10650                           ;	Table Read Protection bit
 10651                           ;	EBTR1 = 0x1, unprogrammed default
 10652  30000C                     	org	3145740
 10653  30000C  03                 	db	3
 10654                           
 10655                           ;Config register CONFIG7H @ 0x30000D
 10656                           ;	unspecified, using default values
 10657                           ;	Boot Block Table Read Protection bit
 10658                           ;	EBTRB = 0x1, unprogrammed default
 10659  30000D                     	org	3145741
 10660  30000D  40                 	db	64
 10661                           tosu	equ	0xFFF
 10662                           tosh	equ	0xFFE
 10663                           tosl	equ	0xFFD
 10664                           stkptr	equ	0xFFC
 10665                           pclatu	equ	0xFFB
 10666                           pclath	equ	0xFFA
 10667                           pcl	equ	0xFF9
 10668                           tblptru	equ	0xFF8
 10669                           tblptrh	equ	0xFF7
 10670                           tblptrl	equ	0xFF6
 10671                           tablat	equ	0xFF5
 10672                           prodh	equ	0xFF4
 10673                           prodl	equ	0xFF3
 10674                           indf0	equ	0xFEF
 10675                           postinc0	equ	0xFEE
 10676                           postdec0	equ	0xFED
 10677                           preinc0	equ	0xFEC
 10678                           plusw0	equ	0xFEB
 10679                           fsr0h	equ	0xFEA
 10680                           fsr0l	equ	0xFE9
 10681                           wreg	equ	0xFE8
 10682                           indf1	equ	0xFE7
 10683                           postinc1	equ	0xFE6
 10684                           postdec1	equ	0xFE5
 10685                           preinc1	equ	0xFE4
 10686                           plusw1	equ	0xFE3
 10687                           fsr1h	equ	0xFE2
 10688                           fsr1l	equ	0xFE1
 10689                           bsr	equ	0xFE0
 10690                           indf2	equ	0xFDF
 10691                           postinc2	equ	0xFDE
 10692                           postdec2	equ	0xFDD
 10693                           preinc2	equ	0xFDC
 10694                           plusw2	equ	0xFDB
 10695                           fsr2h	equ	0xFDA
 10696                           fsr2l	equ	0xFD9
 10697                           status	equ	0xFD8

Data Sizes:
    Strings     9
    Constant    264
    Data        100
    BSS         293
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     26     115
    BANK0           128      0     128
    BANK1           256     19     195

Pointer List with Targets:

    enviaDada@info	PTR unsigned char  size(1) Largest target is 6
		 -> portName(COMRAM[4]), time(COMRAM[6]), 

    showLCD_Marq@message2	PTR const unsigned char  size(2) Largest target is 23
		 -> NOTHING(CODE[23]), MENU2_END(CODE[23]), MENU2_TIME(CODE[23]), MENU2_MODIFY(CODE[23]), 
		 -> MENU2_PLAY(CODE[23]), 

    showLCD_Marq@message1	PTR const unsigned char  size(2) Largest target is 23
		 -> MENU2_END(CODE[23]), MENU2_TIME(CODE[23]), MENU2_MODIFY(CODE[23]), MENU2_PLAY(CODE[23]), 
		 -> MENU2_START(CODE[23]), 

    showLCD_Records@message22	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_2(CODE[9]), recordings.timestmp(BANK1[6]), recordings(BANK1[80]), 

    showLCD_Records@message21	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_1(CODE[9]), recordings.index(BANK1[4]), recordings(BANK1[80]), 

    showLCD_Records@message12	PTR const unsigned char  size(2) Largest target is 80
		 -> recordings.timestmp(BANK1[6]), recordings(BANK1[80]), 

    showLCD_Records@message11	PTR const unsigned char  size(2) Largest target is 80
		 -> recordings.index(BANK1[4]), recordings(BANK1[80]), 

    showLCD@message2	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_3(CODE[1]), EMPTY2(BANK0[23]), NOTHING2(BANK0[23]), showTime(BANK0[23]), 

    showLCD@message1	PTR const unsigned char  size(2) Largest target is 23
		 -> SHOW_CURR_TIME(CODE[23]), SHOW_MODY_TIME(CODE[23]), EMPTY(BANK0[23]), SHOW_RECORDING(CODE[23]), 
		 -> MENU1_LOG(CODE[23]), END_MSG(BANK0[23]), 

    writeName@towerName	PTR unsigned char  size(1) Largest target is 4
		 -> portName(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_initROM
    _main->_motorADC
    _modifyHora->_changeMode
    _manageLetter->_TiGetTics
    _manageKey->_changeMode
    _printLetter->_LcPutChar
    _pressSound->_TiResetTics
    _initHora->_newHora
    _enterMode->_changeMode
    _initSound->_TiGetTimer
    _cleanPortName->_LcPutChar
    _initSMS->_TiGetTimer
    _checkFila->_TiResetTics
    _motorTX->_changeMode
    _motorSound->_TiGetTics
    _motorRX->_changeMode
    _playMelody->_TiResetTics
    _changeMode->_changeMenu
    _motorROM->_writeEEPROM
    _motorMicro->_TiGetTics
    _sendSound->_enviaMostra
    _motorMenu->_showLCD
    _motorMenu->_showLCD_Marq
    _showLCD_Records->_LcPutChar
    _showLCD_Marq->_LcPutChar
    _showLCD->_LcPutChar
    _LcPutChar->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _motorMelody->_TiGetTics
    _motorHora->_newHora
    _manageSegons->_newHora
    _manageMinutes->_newHora
    _newHora->_updateHora
    _updateHora->_actHora
    _actHora->_TiResetTics
    _initTeclat->_TiGetTimer
    _initROM->___wmul
    _LcClear->_Espera
    _LcCursorOn->_WaitForBusy
    _initADC->_TiGetTimer
    _LcInit->_Espera
    _WaitForBusy->_TiGetTics
    _Espera->_TiGetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa

Critical Paths under _RSI_High in COMRAM

    _RSI_High->_RSI_Timer0
    _RSI_Timer0->i2___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _RSI_High in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_motorMenu
    _motorTeclat->_manageKeySMS
    _manageKeySMS->_manageKey
    _manageKeySMS->_modifyHora
    _modifyHora->_LcGotoXY
    _printLetter->_LcGotoXY
    _cleanPortName->_LcGotoXY
    _motorMenu->_showLCD_Records
    _showLCD_Records->_LcGotoXY
    _showLCD_Marq->_LcGotoXY
    _showLCD->_LcGotoXY
    _LcPutChar->_LcGotoXY
    _motorADC->_changePos

Critical Paths under _RSI_High in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  116060
                             _LcInit
                             _TiInit
                            _initADC
                        _initCentral
                           _initMenu
                            _initROM
                            _initSIO
                            _initSMS
                          _initSound
                         _initTeclat
                           _motorADC
                          _motorHora
                        _motorMelody
                          _motorMenu
                         _motorMicro
                           _motorROM
                            _motorRX
                         _motorSound
                            _motorTX
                        _motorTeclat
 ---------------------------------------------------------------------------------
 (1) _motorTeclat                                          2     2      0   53126
                                             11 BANK1      2     2      0
                          _TiGetTics
                        _TiResetTics
                           _checkKey
                       _manageKeySMS
                           _whichKey
 ---------------------------------------------------------------------------------
 (2) _whichKey                                             2     2      0       0
                                             11 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _manageKeySMS                                         3     3      0   51470
                                              8 BANK1      3     3      0
                        _TiResetTics
                            _initSMS
                          _manageKey
                       _manageLetter
                         _modifyHora
 ---------------------------------------------------------------------------------
 (3) _modifyHora                                           3     3      0   19373
                                              5 BANK1      3     3      0
                           _LcGotoXY
                         _changeMode
                            _newHora
                        _printLetter
 ---------------------------------------------------------------------------------
 (3) _manageLetter                                         2     1      1     731
                                             18 COMRAM     2     1      1
                          _TiGetTics
                       _manageRepeat
 ---------------------------------------------------------------------------------
 (4) _manageRepeat                                         2     1      1     283
                                             11 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _manageKey                                            3     1      2   30816
                                              5 BANK1      3     1      2
                         _changeMode
                      _cleanPortName
                          _enterMode
                          _enviaDada
                           _initHora
                         _pressSound
                        _printLetter
                         _saveLetter
                        _selectSound
                          _writeName
 ---------------------------------------------------------------------------------
 (4) _writeName                                            1     0      1     185
                                             11 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (4) _selectSound                                          1     1      0      31
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _saveLetter                                           2     1      1     154
                                             11 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _printLetter                                          2     1      1    8564
                                             23 COMRAM     2     1      1
                           _LcGotoXY
                          _LcPutChar
 ---------------------------------------------------------------------------------
 (4) _pressSound                                           1     1      0      84
                                             12 COMRAM     1     1      0
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (4) _initHora                                             0     0      0    4428
                         _TiGetTimer
                        _TiResetTics
                            _newHora
 ---------------------------------------------------------------------------------
 (4) _enterMode                                            2     2      0    3187
                                              0 BANK1      2     2      0
                    _activaRecording
                         _changeMode
                           _emptyRec
                          _enviaDada
                        _initCentral
                            _initSIO
                          _initSound
 ---------------------------------------------------------------------------------
 (5) _initSound                                            0     0      0     172
                         _TiGetTimer
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (5) _initSIO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _initCentral                                          0     0      0       0
                           _emptyRec
                              _getPT
 ---------------------------------------------------------------------------------
 (6) _emptyRec                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _enviaDada                                            4     3      1     432
                                             11 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (5) _activaRecording                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _cleanPortName                                        0     0      0    8162
                           _LcGotoXY
                          _LcPutChar
 ---------------------------------------------------------------------------------
 (3) _initSMS                                              0     0      0     172
                         _TiGetTimer
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _checkKey                                             5     1      4    1524
                                             12 COMRAM     5     1      4
                          _checkFila
 ---------------------------------------------------------------------------------
 (3) _checkFila                                            0     0      0      42
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _motorTX                                              3     3      0    2631
                                              0 BANK1      3     3      0
                         _changeMode
                              _getNT
 ---------------------------------------------------------------------------------
 (1) _motorSound                                           2     2      0     132
                                             18 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _motorRX                                              3     3      0    5153
                                              0 BANK1      3     3      0
                     _activeWritting
                         _changeMode
                    _cleanMarquesina
                              _getNT
                         _playMelody
                           _updateNT
                           _updatePT
 ---------------------------------------------------------------------------------
 (2) _updatePT                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _updateNT                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _playMelody                                           0     0      0      42
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (4) _changeMode                                           1     1      0    2583
                                             25 COMRAM     1     1      0
                         _changeMenu
                            _setMode
 ---------------------------------------------------------------------------------
 (5) _setMode                                              1     1      0      31
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _changeMenu                                           1     1      0    2426
                                             24 COMRAM     1     1      0
                        _TiResetTics
                    _cleanMarquesina
 ---------------------------------------------------------------------------------
 (2) _activeWritting                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorROM                                             4     4      0     348
                                             13 COMRAM     4     4      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          2     1      1     348
                                             11 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _motorMicro                                           2     2      0     162
                                             18 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
                          _sendSound
 ---------------------------------------------------------------------------------
 (2) _sendSound                                            1     1      0      30
                                             12 COMRAM     1     1      0
                        _enviaMostra
 ---------------------------------------------------------------------------------
 (3) _enviaMostra                                          1     1      0      15
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _motorMenu                                            2     2      0   31136
                                             17 BANK1      2     2      0
                          _TiGetTics
                    _cleanMarquesina
                            _showLCD
                       _showLCD_Marq
                    _showLCD_Records
 ---------------------------------------------------------------------------------
 (2) _showLCD_Records                                     12     4      8    9220
                                              5 BANK1     12     4      8
                           _LcGotoXY
                          _LcPutChar
 ---------------------------------------------------------------------------------
 (2) _showLCD_Marq                                         6     2      4    9690
                                             23 COMRAM     2     2      0
                                              5 BANK1      4     0      4
                           _LcGotoXY
                          _LcPutChar
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (2) _showLCD                                             10     6      4    9794
                                             23 COMRAM     2     2      0
                                              5 BANK1      8     4      4
                           _LcGotoXY
                          _LcPutChar
 ---------------------------------------------------------------------------------
 (5) _LcPutChar                                            1     1      0    4402
                                             22 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (6) _LcGotoXY                                             8     7      1    3760
                                             19 COMRAM     3     2      1
                                              0 BANK1      5     5      0
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (6) _CantaData                                            1     1      0     420
                                             13 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (1) _motorMelody                                          2     2      0     132
                                             18 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _motorHora                                            2     2      0   12900
                                             20 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
                      _manageMinutes
                       _manageSegons
                            _newHora
 ---------------------------------------------------------------------------------
 (2) _manageSegons                                         0     0      0    4256
                            _newHora
 ---------------------------------------------------------------------------------
 (2) _manageMinutes                                        0     0      0    4256
                            _newHora
 ---------------------------------------------------------------------------------
 (4) _newHora                                              3     1      2    4256
                                             17 COMRAM     3     1      2
                         _updateHora
 ---------------------------------------------------------------------------------
 (5) _updateHora                                           3     1      2     654
                                             14 COMRAM     3     1      2
                            _actHora
 ---------------------------------------------------------------------------------
 (6) _actHora                                              2     1      1     232
                                             12 COMRAM     2     1      1
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _motorADC                                             2     2      0    2866
                                             24 COMRAM     2     2      0
                          _TiGetTics
                        _TiResetTics
                          _changePos
 ---------------------------------------------------------------------------------
 (2) _changePos                                           10    10      0    2734
                                              0 BANK1     10    10      0
                     _changeJoystick
                    _cleanMarquesina
                              _getNT
                              _getPT
 ---------------------------------------------------------------------------------
 (6) _getPT                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getNT                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _changeJoystick                                       1     1      0      44
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initTeclat                                           0     0      0     172
                         _TiGetTimer
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _initROM                                              9     9      0     758
                                             17 COMRAM     9     9      0
                             ___wmul
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _readEEPROM                                           1     1      0      22
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     439
                                             11 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _initMenu                                             0     0      0    3114
                         _LcCursorOn
                         _TiGetTimer
                        _TiResetTics
                    _cleanMarquesina
 ---------------------------------------------------------------------------------
 (6) _cleanMarquesina                                      0     0      0    2342
                            _LcClear
 ---------------------------------------------------------------------------------
 (7) _LcClear                                              0     0      0    2342
                            _CantaIR
                             _Espera
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LcCursorOn                                           0     0      0     600
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0     172
                         _TiGetTimer
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (1) _TiInit                                               1     1      0      68
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1    2846
                                             24 COMRAM     1     0      1
                                              0 BANK1      3     3      0
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                         _TiGetTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (6) _WaitForBusy                                          1     1      0     180
                                             18 COMRAM     1     1      0
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (5) _TiGetTimer                                           2     2      0     130
                                             11 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _Espera                                               6     2      4    1742
                                             18 COMRAM     6     2      4
                          _TiGetTics
                        _TiResetTics
 ---------------------------------------------------------------------------------
 (7) _TiResetTics                                          1     1      0      42
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _TiGetTics                                            7     5      2      90
                                             11 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      88
                                             11 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _CantaIR                                              1     1      0     420
                                             13 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (8) _CantaPartBaixa                                       2     2      0     168
                                             11 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _CantaPartAlta                                        2     2      0     168
                                             11 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _RSI_High                                            4     4      0      19
                                              7 COMRAM     4     4      0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (12) _RSI_Timer0                                          1     1      0      19
                                              6 COMRAM     1     1      0
                           i2___wmul
 ---------------------------------------------------------------------------------
 (13) i2___wmul                                            6     2      4      19
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcInit
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _EscriuPrimeraOrdre
     _Espera
       _TiGetTics
       _TiResetTics
     _TiGetTimer
     _WaitForBusy
       _TiGetTics
       _TiResetTics
   _TiInit
   _initADC
     _TiGetTimer
     _TiResetTics
   _initCentral
     _emptyRec
     _getPT
   _initMenu
     _LcCursorOn
       _CantaIR
       _WaitForBusy
     _TiGetTimer
     _TiResetTics
     _cleanMarquesina
       _LcClear
         _CantaIR
         _Espera
         _WaitForBusy
   _initROM
     ___wmul
     _readEEPROM
   _initSIO
   _initSMS
     _TiGetTimer
     _TiResetTics
   _initSound
     _TiGetTimer
     _TiResetTics
   _initTeclat
     _TiGetTimer
     _TiResetTics
   _motorADC
     _TiGetTics
     _TiResetTics
     _changePos
       _changeJoystick
       _cleanMarquesina
       _getNT
       _getPT
   _motorHora
     _TiGetTics
     _TiResetTics
     _manageMinutes
       _newHora
         _updateHora
           _actHora
             _TiResetTics
     _manageSegons
       _newHora
     _newHora
   _motorMelody
     _TiGetTics
     _TiResetTics
   _motorMenu
     _TiGetTics
     _cleanMarquesina
     _showLCD
       _LcGotoXY
         _CantaIR
         _WaitForBusy
       _LcPutChar
         _CantaData
           _CantaPartAlta
           _CantaPartBaixa
         _LcGotoXY
         _WaitForBusy
     _showLCD_Marq
       _LcGotoXY
       _LcPutChar
       _TiGetTics
       _TiResetTics
     _showLCD_Records
       _LcGotoXY
       _LcPutChar
   _motorMicro
     _TiGetTics
     _TiResetTics
     _sendSound
       _enviaMostra
   _motorROM
     _writeEEPROM
   _motorRX
     _activeWritting
     _changeMode
       _changeMenu
         _TiResetTics
         _cleanMarquesina
       _setMode
     _cleanMarquesina
     _getNT
     _playMelody
       _TiResetTics
     _updateNT
     _updatePT
   _motorSound
     _TiGetTics
     _TiResetTics
   _motorTX
     _changeMode
     _getNT
   _motorTeclat
     _TiGetTics
     _TiResetTics
     _checkKey
       _checkFila
         _TiResetTics
     _manageKeySMS
       _TiResetTics
       _initSMS
       _manageKey
         _changeMode
         _cleanPortName
           _LcGotoXY
           _LcPutChar
         _enterMode
           _activaRecording
           _changeMode
           _emptyRec
           _enviaDada
           _initCentral
           _initSIO
           _initSound
         _enviaDada
         _initHora
           _TiGetTimer
           _TiResetTics
           _newHora
         _pressSound
           _TiResetTics
         _printLetter
           _LcGotoXY
           _LcPutChar
         _saveLetter
         _selectSound
         _writeName
       _manageLetter
         _TiGetTics
         _manageRepeat
       _modifyHora
         _LcGotoXY
         _changeMode
         _newHora
         _printLetter
     _whichKey

 _RSI_High (ROOT)
   _RSI_Timer0
     i2___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      23        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     13      C3       7       76.2%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     1A      73       1       91.3%
BITBIGSFRhlhhh      1B      0       0       9        0.0%
BITBIGSFRhlhhll      E      0       0      11        0.0%
BITBIGSFRhh          D      0       0       8        0.0%
BITBIGSFRhllhll      7      0       0      16        0.0%
BITBIGSFRhllhhh      7      0       0      14        0.0%
BITBIGSFRhllhhh      7      0       0      13        0.0%
BITBIGSFRllh         5      0       0      20        0.0%
BITBIGSFRlh          5      0       0      19        0.0%
BITBIGSFRhlll        5      0       0      18        0.0%
BITBIGSFRhllhll      2      0       0      17        0.0%
BITBIGSFRlll         2      0       0      21        0.0%
BITBIGSFRhllhhl      1      0       0      15        0.0%
BITBIGSFRhlhhlh      1      0       0      10        0.0%
BITBIGSFRhlhl        1      0       0      12        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B6      22        0.0%
DATA                 0      0     1B6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Tue May 23 18:53:30 2023

         TiResetTics@Handle 0065                           _i 0027                           _k 0030  
                         _n 0043                           _p 0041                           _s 0026  
                         _t 0006                  _RSI_Timer0 1238                          PL2 072E  
                        PL4 0746                          PL6 0750                          PL8 075A  
                        l60 0DF2                          l56 0DDE                          l67 0E28  
                        _ok 0025         ___wmul@multiplicand 0067          _timer@TSound$F1621 001D  
                       PL10 0A7A                         PL20 0C48                         PL12 0976  
                       PL30 0D12                         PL22 04D0                         PL14 0A8A  
                       PL40 18D2                         PL32 0870                         PL24 1904  
                       PL16 0A96                         PL50 1964                         PL42 1828  
                       PL34 129C                         PL26 16EA                         PL18 0AA2  
                       PL60 1128                         PL52 193C                         PL44 0372  
                       PL36 1934                         PL28 061A                         PL70 130C  
                       PL62 0F82                         PL54 0F78                         PL46 1220  
                       PL38 04F2                         PL80 088A                         PL72 0E5E  
                       PL64 062C                         PL56 0768                         PL48 01CC  
                       PL90 1028                         PL82 1440                         PL74 196C  
                       PL66 101C                         PL58 0B7C                         PL92 14A6  
                       PL84 1836                         PL76 0638                         PL68 0F8E  
                       PL94 1BF8                         PL86 122E                         PL78 0880  
                       PL96 18A8                         PL88 1134                         PL98 0894  
            _changeJoystick 1B52                         l303 166E                         l306 1690  
                       l425 139C                         l291 1192                         l419 0D10  
                       l285 1140                         l288 115E                         l905 092E  
                       l850 07B8                         l852 07BE                         l891 08AA  
                       l894 08CA                         l897 08E8            ?_showLCD_Records 01B5  
                       _rep 001E                         _pit 002D            ??_CantaPartBaixa 0065  
         motorMelody@state2 0016                         prod 000FF3                         wreg 000FE8  
            selectSound@ind 0065                        PL100 0EFC                        PL102 01D4  
                      PL104 0502                        l1050 051C                        l1053 0528  
                      l1038 0B70                        l1055 0534                        l1048 0518  
                      l1057 0540                        l1066 05CE                        l1170 017E  
                      l1181 01C4                        l1326 19B6                        l1328 19C0  
                      l1355 1744                        l5130 08B6                        l5140 08D4  
                      l5124 089E                        l5150 08F2                        l5146 08E2  
                      l5180 0928                        l5164 090E                        l5166 0914  
                      l4640 1842                        l5192 0944                        l8002 071C  
                      l8004 0720                        l5188 0940                        l6414 086A  
                      l6406 0842                        l8030 004E                        l7304 17DC  
                      l8008 0728                        l8200 042A                        l8040 00C4  
                      l8032 0062                        l8106 0BAC                        l8202 0450  
                      l8042 00DE                        l8034 0076                        l6372 07A6  
                      l8204 0464                        l8044 00F8                        l8036 0090  
                      l8052 0146                        l7326 1802                        l6382 07C2  
                      l8206 0476                        l8046 0112                        l8038 00AA  
                      l7280 19D6                        l6368 079A                        l8320 056A  
                      l8064 01A6                        l8048 012C                        l8056 0188  
                      l8240 0EAE                        l7346 18E6                        l7354 18F0  
                      l6394 07FC                        l8410 1188                        l8218 04A6  
                      l8330 058A                        l8082 1738                        l8250 0ED6  
                      l8234 0E6A                        l7364 0DD0                        l8180 03A4  
                      l8340 059C                        l8332 058E                        l8236 0E7E  
                      l8406 117E                        l8422 11A2                        l8510 12F2  
                      l7374 0DFC                        l7454 15E8                        l8190 03F8  
                      l8182 03B4                        l8174 037C                        l8318 054E  
                      l8086 1740                        l7542 0F52                        l7518 0F06  
                      l7702 1090                        l8246 0ECA                        l8238 0E96  
                      l8254 0ED8                        l8416 1198                        l7368 0DE4  
                      l7384 0E2C                        l7472 1610                        l8192 0404  
                      l8184 03C4                        l8176 0384                        l8440 0AC8  
                      l8352 05D4                        l7528 0F20                        l8600 1546  
                      l7810 0DA2                        l8514 12F6                        l7378 0E0A  
                      l7386 0E46                        l7466 1602                        l8178 0394  
                      l8450 0AE4                        l8274 10E4                        l8266 10C6  
                      l7546 0F5A                        l7562 1380                        l7706 109E  
                      l7626 1C50                        l8532 0FBE                        l8524 0FA0  
                      l7900 0206                        l8196 0412                        l8188 03D8  
                      l8444 0AD2                        l8284 1100                        l8364 05F6  
                      l7548 0F74                        l7628 1C52                        l7740 15B2  
                      l7660 0CB8                        l7718 1B5E                        l8550 1000  
                      l8542 0FDA                        l8462 0B04                        l8454 0AF0  
                      l8286 1112                        l7574 13A4                        l7742 15C0  
                      l7662 0CBC                        l7808 0D9C                        l8392 1158  
                      l8544 0FEC                        l7912 0248                        l7904 021C  
                      l7576 13AA                        l7680 104C                        l7826 0DBA  
                      l7834 0DC4                        l7818 0DB0                        l7842 1922  
                      l7930 02F2                        l8298 050C                        l7762 19CA  
                      l7578 13B0                        l7586 13C2                        l8492 12B2  
                      l7916 0278                        l7908 0232                        l7782 0D32  
                      l7934 0306                        l7926 02DE                        l7918 0286  
                      l8582 16A6                        l7686 105C                        l7792 0D48  
                      l7784 0D38                        l7856 1952                        l7960 067C  
                      l7944 0362                        l7794 0D4E                        l8498 12D0  
                      l7890 0A70                        l7970 069E                        l7938 031A  
                      l7946 036E                        l7698 1088                        l7884 0A4E  
                      l7876 0A06                        l7886 0A66                        l7878 0A20  
                      l7982 06D0                        l7966 068A                        l7974 06AE  
                      l7992 06F2                        l7988 06DE                        l7996 0702  
                      STR_1 1FF5                        STR_2 1FF5                        STR_3 1FFD  
                      u6100 1498                        u6040 1456                        u6120 13F0  
                      u7010 0A1A                        u6060 146C                        u6140 1406  
                      u7020 0A40                        u6118 149A                        u5430 0798  
                      u6080 1484                        u6160 141E                        u7040 0A60  
                      u7200 035C                        u7120 02A0                        u7017 0A18  
                      u6058 1458                        u6138 13F2                        u5450 07A4  
                      u7210 0654                        u7027 0A3E                        u6180 1432  
                      u6078 146E                        u6158 1408                        u5470 07F8  
                      u7150 02D8                        u6430 0C88                        u7047 0A5E  
                      u7207 0358                        u7127 029C                        u5480 082A  
                      u6520 106E                        u6098 1486                        u6178 1420  
                      u7410 0C46                        u7157 02D4                        u7405 172C  
                      u6198 1434                        u6710 11E4                        u7406 172E  
                      u6730 11FC                        u6650 15A4                        u6708 11D0  
                      u6750 1210                        u6728 11E6                        u7385 1718  
                      u6690 11CE                        u6850 0D9A                        u7386 171A  
                      u7395 1722                        u6748 11FE                        u6940 09B8  
                      u7396 1724                        u6870 0DAC                        u6768 1212  
                      u6960 09D0                        u6947 09B6                        u6990 09F8  
                      u6967 09CE                        u6997 09F6                ?_enviaMostra 005A  
           __end_of_NOTHING 1F6B                        _Rows 004F                        _addr 0031  
                      _fila 0012                        _key0 0084                        _key1 0080  
                      _key2 1F0B                        _key3 1F07                        _key4 1F03  
                      _key5 1EFF                        _key6 1EFB                        _key7 1EF2  
                      _key8 1EF7                        _key9 1EED                        _main 1514  
                      _mode 0045                        _send 002A                        _move 0049  
                      _nota 001A                        _time 0050                        fsr0h 000FEA  
                      indf0 000FEF                        fsr2h 000FDA                        fsr0l 000FE9  
                      indf1 000FE7                        indf2 000FDF                        fsr1l 000FE1  
                      fsr2l 000FD9                  _LcCursorOn 1C84                        btemp 0074  
             ?_manageKeySMS 005A               _manageMinutes 1944                        prodh 000FF4  
    _counter@TiTTimer$F1024 000B                        prodl 000FF3               ?_manageLetter 006C  
           __end_of_LcClear 1BC4                        start 0034             __end_of_CantaIR 1B3A  
             ?_manageRepeat 0065               ?_manageSegons 005A                ?_initCentral 005A  
         TiGetTimer@counter 0066               LcInit@columns 0072                ___param_bank 000000  
               _writeEEPROM 1AAA      __end_of_changeJoystick 1B6A                 Espera@Timer 006C  
                     ?_main 005A              pressSound@tono 0066                       _EEADR 000FA9  
                     _EMPTY 00B6             __end_of_actHora 1BAE                       i2l567 1296  
                     _RCREG 000FAE                       _RCSTA 000FAB                       _TMR0L 000FD6  
                     _SPBRG 000FAF                       _PORTD 000F83                       _TRISD 000F95  
                     _TXREG 000FAD                       _TXSTA 000FAC                       _Timer 000F  
           __end_of_initADC 1A48                       _getNT 1CB6                       _getPT 1CB2  
           __end_of_initSIO 16EA             __end_of_initROM 0870             __end_of_initSMS 1B98  
                     _count 0046                       _empty 0039             __end_of_newHora 1B1E  
                     _timer 0040                       _state 0014                       _sound 0019  
          __end_of_RSI_High 0034             __end_of_setMode 1C96             __end_of_showLCD 0A7A  
                     tablat 000FF5             __end_of_motorRX 0B7C             __end_of_motorTX 061A  
             ??_TiResetTics 0065            __end_ofi2___wmul 1A6E                       ttemp5 0075  
                     ttemp6 0078                       ttemp7 007C              ??_manageKeySMS 01B8  
                     status 000FD8              _activeWritting 1CA8                       wtemp8 0075  
            ?_manageMinutes 005A              ??_manageLetter 006D                __end_ofPL100 0F02  
          __end_of_LcGotoXY 0E5E                __end_ofPL102 01DC                __end_ofPL104 050A  
            ??_manageRepeat 0066              ??_manageSegons 006E                  _TiGetTimer 18E2  
   EscriuPrimeraOrdre@ordre 0066             __initialization 161A                __end_of_key2 1F0F  
              __end_of_key3 1F0B                __end_of_key4 1F07                __end_of_key5 1F03  
              __end_of_key6 1EFF                __end_of_key7 1EF7                __end_of_key8 1EFB  
              __end_of_key9 1EF2                __end_of_main 1570            enviaMostra@sound 0065  
               ?_RSI_Timer0 005A             ?_changeJoystick 005A             _activaRecording 1C9C  
     __end_of_cleanPortName 18A8                      ??_main 0074               __activetblptr 000002  
         __end_of_MENU2_END 1F82           __end_of_MENU1_LOG 1FF5    showLCD_Records@message11 01B5  
  showLCD_Records@message12 01B7    showLCD_Records@message21 01B9    showLCD_Records@message22 01BB  
                    ?_getNT 005A                      ?_getPT 005A                ?_selectSound 005A  
                    _ADCON1 000FC1                      _ADCON2 000FC0                      _ADRESH 000FC4  
                    _EEDATA 000FA8                      _EECON2 000FA7      __end_of_activeWritting 1CAE  
                    _EMPTY2 009F                   ??_LcClear 0072                   ??_CantaIR 0067  
         ??_cleanMarquesina 0072                      i2l6350 1260                      i2l6354 1290  
                    i2l6346 1252              LcGotoXY@Fisics 01B2              LcGotoXY@Column 01B4  
             ??_WaitForBusy 006C                manageKey@key 01B7                      _SPBRGH 000FB0  
          __end_of_checkKey 1748                 ?_LcCursorOn 005A                      _LcInit 0B88  
             modifyHora@num 01B7                      _Espera 19D0                      _TiInit 1840  
              _LcGotoXY$320 01B0                 newHora@hora 006B                      _RowAct 004D  
       __end_of_TiResetTics 1C46            _timer@TSms$F1539 0021                      _h_Tics 000D  
                    ___wmul 19FC                      _action 0029                ?_motorMelody 005A  
          __end_of_emptyRec 1C9C                      _nTotal 002E                   ??_actHora 0067  
          __end_of_initHora 178A                ?_motorTeclat 005A            __end_of_initMenu 17CA  
                    _index1 002C                      _flying 0024                      _melody 0018  
                    _posLCD 003A                      clear_0 1640                      clear_1 164C  
                    clear_2 1658                      _posMax 0037                      _posMin 0036  
                    _timer2 003C                      _timer3 001B                      isa$std 000001  
                 ??_initADC 0067                   ??_initSIO 0065                   ??_initROM 006B  
                 ??_initSMS 0067            __end_of_motorADC 11BC                   ??_newHora 006D  
          __end_of_motorROM 0976             printLetter@posY 0071                   ??_setMode 0065  
              __mediumconst 1EEC            __end_of_whichKey 137E                   ??_showLCD 0071  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
                 ??_motorRX 01B0                   ??_motorTX 01B0            __end_of_updateNT 1CB2  
          __end_of_updatePT 1CA8           __end_of_CantaData 1828                ?_printLetter 0071  
             updateHora@mod 0069               updateHora@pos 006A             ?_activeWritting 005A  
           ??_manageMinutes 006E                  __accesstop 0080     __end_of__initialization 165E  
         __end_of_LcPutChar 161A               ___rparam_used 000001             writeEEPROM@addr 0066  
           writeEEPROM@data 0065     __end_of_activaRecording 1CA2                 ?_TiGetTimer 005A  
            __pcstackCOMRAM 005A         __end_of_WaitForBusy 1808                __pidataBANK0 14B0  
             __end_of_getNT 1CBA               __end_of_getPT 1CB6        __end_of_MENU2_MODIFY 1FB0  
                __end_ofPL2 0746                  __end_ofPL4 0750                  __end_ofPL6 075A  
                __end_ofPL8 0768                   ?_RSI_High 005A           __end_of_TiGetTics 18D2  
             changePos@num2 01B8        __end_of_manageKeySMS 01CC                   ?i2___wmul 005A  
      __end_of_manageLetter 15C6        __end_of_manageRepeat 1C56        __end_of_manageSegons 1934  
                 ?_LcGotoXY 006D                     ??_getNT 0065                     ??_getPT 0065  
                __pbssBANK0 00E4                  __pbssBANK1 0100                  _changeMenu 1BC4  
                _changeMode 1C10                 _TiResetTics 1C34          __end_of_MENU2_PLAY 1FC7  
        __end_of_MENU2_TIME 1F99                     ?_LcInit 0072               _CantaPartAlta 144A  
                   ?_Espera 006C                     ?_TiInit 005A                ?_writeEEPROM 0065  
                   ?___wmul 0065         manageLetter@prevKey 006C                  actHora@pos 0067  
                ??_RSI_High 0061                  _finalMarq2 0033                  ??i2___wmul 005E  
                   _END_MSG 0088                     LcInit@i 01B1                   ?_checkKey 0066  
                ??_LcGotoXY 006E                     _NOTHING 1F54               manageKey@note 01B6  
         __end_of_checkFila 19D0               ?_showLCD_Marq 01B5           __end_of_changePos 0DCA  
                   _LcClear 1BAE                     _CantaIR 1B1E           _timer@TMenu$F1082 003D  
                 ?_emptyRec 005A                   ?_initHora 005A                   ?_initMenu 005A  
               _WaitForBusy 17CA                  _readEEPROM 1C66              ?_CantaPartAlta 005A  
                   _Columns 004E               saveLetter@key 0066              checkKey@column 0069  
                   __Hparam 0000         _timer2@TSound$F1622 001C                  checkKey@D0 006A  
                checkKey@D1 0066                  checkKey@D2 0067                     __Lparam 0000  
                 ?_motorADC 005A            ??_changeJoystick 0065            ?_activaRecording 005A  
                 ?_motorROM 005A                   ?_whichKey 005A                  _initTeclat 1B6A  
              ??_RSI_Timer0 0060                   ?_updateNT 005A                   ?_updatePT 005A  
                   _actHora 1B98           __end_of_manageKey 10C0           __end_of_enviaDada 0F78  
             enviaDada@info 0065                     __pcinit 161A           __end_of_enterMode 13E4  
                   __ramtop 0200                     __ptext0 1514                     __ptext1 0E68  
                   __ptext2 1316                     __ptext3 0038                     __ptext4 0C54  
                   __ptext5 1570                     __ptext6 1C46                     __ptext7 1032  
                   __ptext8 1A6E                     __ptext9 1BEC                   _T0CONbits 000FD5  
                   _columna 0011                     _initADC 1A22             _cleanMarquesina 1C22  
                 CantaIR@IR 0067                     _initSIO 16BC                     _initROM 0772  
                   _initSMS 1B82                     _counter 0032           __end_of_initSound 19A2  
                   _newHora 1B02                  ??_checkKey 006A                     _setMode 1C8E  
                   _posMin2 0035                     _showLCD 09A6                  _modifyHora 0C54  
                   _motorRX 0AAC                     _motorTX 050A                     _prevKey 001F  
            _SHOW_CURR_TIME 1F0F             WaitForBusy@Busy 006C                   _MENU2_END 1F6B  
                 _MENU1_LOG 1FDE                 motorRX@info 0023              ??_showLCD_Marq 0071  
                _recordings 0160                  _playMelody 1AE6              _SHOW_RECORDING 1F3D  
      end_of_initialization 165E                  _saveLetter 1C56           __end_of_sendSound 1C84  
               ?_changeMenu 005A                 ?_changeMode 005A                  ??_emptyRec 0065  
        __end_of_RSI_Timer0 129C                  ??_initHora 006E                  ??_initMenu 0072  
             __Lmediumconst 1EEC             TiGetTics@Handle 0069         i2___wmul@multiplier 005A  
              ??_LcCursorOn 006D              _SHOW_MODY_TIME 1F26           __end_of_motorHora 130C  
         __end_of_motorMenu 04D0             motorSound@state 0017                  ??_motorADC 0072  
                ??_motorROM 0067             manageKeySMS@key 01BA             TiGetTics@actual 006A  
                ??_whichKey 0065                     postdec1 000FE5                     postdec2 000FDD  
                _motorMicro 166C                     postinc0 000FEE                     postinc2 000FDE  
                ??_updateNT 0065                  ??_updatePT 0065                  _motorSound 10C0  
                _timerMicro 004A              updateHora@hora 0068                   _PORTCbits 000F82  
                _pressSound 1B3A                   _PORTDbits 000F83           __end_of_writeName 1A8C  
    __end_of_SHOW_CURR_TIME 1F26          __end_of_LcCursorOn 1C8E            ??_activeWritting 0065  
                _updateHora 1AC8                   _TRISAbits 000F92                   _TRISBbits 000F93  
                 _TRISCbits 000F94      __end_of_SHOW_RECORDING 1F54            motorMicro@states 0047  
    __end_of_SHOW_MODY_TIME 1F3D                _MENU2_MODIFY 1F99             ??_CantaPartAlta 0065  
                 _CantaData 1808                 ?_readEEPROM 005A             manageLetter@key 006D  
                 _TXSTAbits 000FAC                _manageKeySMS 0038                _manageLetter 1570  
         ??_showLCD_Records 01BD                _manageRepeat 1C46                _manageSegons 1914  
              ??_TiGetTimer 0065              __end_of_LcInit 0C48                   _LcPutChar 15C6  
            __end_of_Espera 19FC              __end_of_TiInit 1878                 ?_initTeclat 005A  
             initROM@i_1234 0072     __end_of_cleanMarquesina 1C34  __end_of_EscriuPrimeraOrdre 1220  
           manageRepeat@max 0065             manageRepeat@rep 0066              __end_of___wmul 1A22  
               _BAUDCONbits 000FB8              changeMenu@mode 0072                  enviaDada@c 0068  
                 _ColumnAct 004C               TiInit@counter 0065            i2___wmul@product 005E  
           showLCD@message1 01B5             showLCD@message2 01B7                 __end_ofPL10 0A8A  
               __end_ofPL20 0C54                 __end_ofPL12 09A6                 __end_ofPL30 0D1E  
               __end_ofPL22 04F2                 __end_ofPL14 0A96                 __end_ofPL40 18E2  
               __end_ofPL32 0880                 __end_ofPL24 1914                 __end_ofPL16 0AA2  
               __end_ofPL50 196C                 __end_ofPL42 1836                 __end_ofPL34 12AC  
               __end_ofPL26 1702                 __end_ofPL18 0AAC                 __end_ofPL60 1134  
               __end_ofPL52 1944                 __end_ofPL44 037A                 __end_ofPL36 193C  
               __end_ofPL28 062C                 __end_ofPL70 1316                 __end_ofPL62 0F8E  
               __end_ofPL54 0F82                 __end_ofPL46 122E                 __end_ofPL38 0502  
               __end_ofPL80 0894                 __end_ofPL72 0E68                 __end_ofPL64 0638  
               __end_ofPL56 0772                 __end_ofPL48 01D4                 __end_ofPL90 1032  
               __end_ofPL82 144A                 __end_ofPL74 1974                 __end_ofPL66 1028  
               __end_ofPL58 0B88                 __end_ofPL92 14B0                 __end_ofPL84 1840  
               __end_ofPL76 0642                 __end_ofPL68 0F9A                 __end_ofPL94 1BFE  
               __end_ofPL86 1238                 __end_ofPL78 088A                 __end_ofPL96 18AE  
               __end_ofPL88 113E                 __end_ofPL98 089C         start_initialization 161A  
               ?_modifyHora 005A                   _TiGetTics 18AE          __end_of_TiGetTimer 1904  
               ?_playMelody 005A                 ?_saveLetter 0065               ??_enviaMostra 0065  
              ?_TiResetTics 005A                  ?_CantaData 005A       __end_of_manageMinutes 1964  
                  ??_LcInit 0073               ??_initCentral 0065                    ??_Espera 0070  
                  ??_TiInit 0065                  newHora@mod 006C                  newHora@pos 006D  
                ?_LcPutChar 005A                 ?_motorMicro 005A                    ??___wmul 0069  
               ?_motorSound 005A        __end_of_showLCD_Marq 072E                 __pdataBANK0 0080  
            motorHora@state 003E            checkKey@stateAux 0068                 ?_pressSound 005A  
             _cleanPortName 1878        showLCD_Marq@message1 01B5        showLCD_Marq@message2 01B7  
               __pbssCOMRAM 0001               motorADC@state 0048                 ?_updateHora 0068  
             __pcstackBANK1 01B0                  ?_TiGetTics 0065         __end_of_MENU2_START 1FDE  
              changePos@num 01B7                changePos@pos 01B9                    ?_LcClear 005A  
                  ?_CantaIR 005A         printLetter@finalKey 0072              _CantaPartBaixa 13E4  
              ?_WaitForBusy 005A                   _checkFila 19A2           changeJoystick@pos 0065  
                 _changePos 0D1E         __end_of_enviaMostra 1BEC          writeName@towerName 0065  
                 __pintcode 0008               __pmediumconst 1EEC            ?_cleanMarquesina 005A  
                  ?_actHora 0066                   _finalMarq 0034             CantaPartBaixa@c 0066  
       __end_of_initCentral 1AAA              ?_cleanPortName 005A                    ?_initADC 005A  
                 _manageKey 1032                    ?_initSIO 005A                    ?_initROM 005A  
                  ?_initSMS 005A                   _enviaDada 0F02                    ?_newHora 006B  
                 _countChar 0020                   _enterMode 137E                   _countTime 0001  
                  ?_setMode 005A                 actHora@hora 0066                    ?_showLCD 01B5  
                  ?_motorRX 005A                    ?_motorTX 005A               ??_selectSound 0065  
                 _initSound 1974      __end_of_CantaPartBaixa 1440                ??_changeMenu 0072  
              ??_changeMode 0073                 ??_CantaData 0067              ___wmul@product 0069  
                ?_checkFila 005A                    _LATAbits 000F89                  motorRX@num 01B2  
                  _LATBbits 000F8A                   _recording 0042                    _LATCbits 000F8B  
                  _LATDbits 000F8C                  motorTX@num 01B2                  ?_changePos 005A  
                 _sendSound 1C76                    _PIR1bits 000F9E                    _NOTHING2 00CD  
               ??_LcPutChar 0070                   _motorHora 12AC                   _motorMenu 037A  
             ??_motorMelody 006C               ??_motorTeclat 01BB                    _RSI_High 0008  
                _ADCON0bits 000FC2           ___wmul@multiplier 0065          __end_of_changeMenu 1BD8  
        __end_of_changeMode 1C22                   _startTime 003F                    i2___wmul 1A48  
                ?_manageKey 01B5                  ?_enviaDada 0065                 _MENU2_START 1FC7  
               _keyDetected 0013                  ?_enterMode 005A                    Espera@ms 006E  
                  _LcGotoXY 0DCA                 ??_TiGetTics 0067               ??_printLetter 0072  
                ?_initSound 005A                   _writeName 1A6E             _showLCD_Records 01DC  
               LcGotoXY@Row 006D                   copy_data0 162E             ?_CantaPartBaixa 005A  
               _enviaMostra 1BD8          manageKey@countChar 01B5                ??_readEEPROM 0065  
       __end_of_selectSound 1BF8                  _EECON1bits 000FA6                  ?_sendSound 005A  
                  __Hrparam 0000                 _initCentral 1A8C                    __Lrparam 0000  
       _timer@TTeclat$F1784 0015                  ?_motorHora 005A                  ?_motorMenu 005A  
              ??_initTeclat 0067             ??_cleanPortName 0071       i2___wmul@multiplicand 005C  
               changeMode@u 0073                _showLCD$1118 01B9                _showLCD$1119 01BB  
       __end_of_motorMelody 101C                    _caseMenu 003B                    _checkKey 1702  
       __end_of_motorTeclat 0EFC          __end_of_readEEPROM 1C76                ??_modifyHora 01B5  
                  __ptext10 1C56                    __ptext11 1BFE          _EscriuPrimeraOrdre 11BC  
                  __ptext20 1C9C                    __ptext12 1B3A                    __ptext21 1878  
                  __ptext13 1748                    __ptext30 1AE6                    __ptext22 1B82  
                  __ptext14 137E                    __ptext31 1C10                    __ptext23 1702  
                  __ptext15 1974                    __ptext40 037A                    __ptext32 1C8E  
                  __ptext24 19A2                    __ptext16 16BC                    __ptext41 01DC  
                  __ptext33 1BC4                    __ptext25 050A                    __ptext17 1A8C  
                  __ptext50 1944                    __ptext42 0642                    __ptext34 1CA8  
                  __ptext26 10C0                    __ptext18 1C96                    __ptext51 1B02  
                  __ptext43 09A6                    __ptext35 089C                    __ptext27 0AAC  
                  __ptext19 0F02                    __ptext60 0772                    __ptext52 1AC8  
                  __ptext44 15C6                    __ptext36 1AAA                    __ptext28 1CA2  
                  __ptext61 1C66                    __ptext53 1B98                    __ptext45 0DCA  
                  __ptext37 166C                    __ptext29 1CAE                    __ptext70 17CA  
                  __ptext62 19FC                    __ptext54 113E                    __ptext46 1808  
                  __ptext38 1C76                    __ptext71 18E2                    __ptext63 178A  
                  __ptext55 0D1E                    __ptext47 0F9A                    __ptext39 1BD8  
                  __ptext80 1238                    __ptext72 19D0                    __ptext64 1C22  
                  __ptext56 1CB2                    __ptext48 12AC                    __ptext81 1A48  
                  __ptext73 1C34                    __ptext65 1BAE                    __ptext57 1CB6  
                  __ptext49 1914                    __ptext74 18AE                    __ptext66 1C84  
                  __ptext58 1B52                    __ptext75 11BC                    __ptext67 1A22  
                  __ptext59 1B6A                    __ptext76 1B1E                    __ptext68 1840  
                  __ptext77 13E4                    __ptext69 0B88                    __ptext78 144A  
                ?_writeName 0065                ??_playMelody 0066              CantaPartAlta@c 0066  
              ??_saveLetter 0066                _showLCD_Marq 0642                    _s_Timers 0100  
        __end_of_initTeclat 1B82                    _enviaNom 0028                    _emptyRec 1C96  
                  _initHora 1748                    _initMenu 178A                 ??_checkFila 0066  
       ?_EscriuPrimeraOrdre 005A       __end_of_CantaPartAlta 14A6         __end_of_printLetter 1C10  
             CantaData@Data 0067                 ??_changePos 01B0                    _extraPos 0038  
                  _sendName 00E4                    _motorADC 113E               ??_writeEEPROM 0066  
                  _motorROM 089C                    _timerADC 004B                    isa$xinst 000000  
              ??_motorMicro 006C                    _showTime 00E9                    _portName 0056  
                  _whichKey 1316                    int$flags 0074                ??_motorSound 006C  
        __end_of_modifyHora 0D12                    _updateNT 1CAE                    _updatePT 1CA2  
                _MENU2_PLAY 1FB0                  _MENU2_TIME 1F82          __end_of_playMelody 1B02  
              ??_pressSound 0066        ??_EscriuPrimeraOrdre 0065                  LcInit@rows 01B0  
        __end_of_saveLetter 1C66                motorTX@state 0022     __end_of_showLCD_Records 0372  
                  _writting 002F            motorROM@stateROM 002B                 ??_manageKey 0074  
               ??_enviaDada 0066                    initROM@i 0070                    initROM@j 006E  
               ??_enterMode 01B0                 _OSCTUNEbits 000F9B                  _INTCONbits 000FF2  
              ??_updateHora 006A           ??_activaRecording 0065                 ??_initSound 0067  
               _selectSound 1BEC                    intlevel2 0000          __end_of_motorMicro 16BC  
        __end_of_motorSound 1128                    setMode@m 0065                  LcPutChar@c 0070  
               ??_sendSound 0066          __end_of_pressSound 1B52              sendSound@sound 0066  
                _OSCCONbits 000FD3                 ??_motorHora 006E                 ??_motorMenu 01C1  
               _posJoystick 0044              readEEPROM@addr 0065          __end_of_updateHora 1AE6  
               _motorMelody 0F9A                 _motorTeclat 0E68         __end_of_writeEEPROM 1AC8  
               ??_writeName 0066                 _printLetter 1BFE         saveLetter@countChar 0065  
